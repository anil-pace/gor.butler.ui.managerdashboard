/* istanbul ignore next */"use strict";Object.defineProperty(exports, "__esModule", { value: true });var _jsxFileName = "/Users/raja.d/GOR/gor.butler.ui.managerdashboard/src/containers/utilityTab.js";var /* istanbul ignore next */_react = require("react"); /* istanbul ignore next */var _react2 = _interopRequireDefault(_react);
var /* istanbul ignore next */_utilityTile = require("../components/utilityComponents/utilityTile"); /* istanbul ignore next */var _utilityTile2 = _interopRequireDefault(_utilityTile);
var /* istanbul ignore next */_scriptsTile = require("../components/utilityComponents/scriptsTile"); /* istanbul ignore next */var _scriptsTile2 = _interopRequireDefault(_scriptsTile);
var /* istanbul ignore next */_utilityDropdownWrap = require("../components/utilityComponents/utilityDropdownWrap"); /* istanbul ignore next */var _utilityDropdownWrap2 = _interopRequireDefault(_utilityDropdownWrap);
var /* istanbul ignore next */_masterUploadTile = require("../components/utilityComponents/masterUploadTile"); /* istanbul ignore next */var _masterUploadTile2 = _interopRequireDefault(_masterUploadTile);
var /* istanbul ignore next */_downloadReportsTile = require("../components/utilityComponents/downloadReportsTile"); /* istanbul ignore next */var _downloadReportsTile2 = _interopRequireDefault(_downloadReportsTile);
var /* istanbul ignore next */_downloadGRTile = require("../components/utilityComponents/downloadGRTile"); /* istanbul ignore next */var _downloadGRTile2 = _interopRequireDefault(_downloadGRTile);
var /* istanbul ignore next */_configConstants = require("../constants/configConstants");










var /* istanbul ignore next */_reactRedux = require("react-redux");
var /* istanbul ignore next */_utilityActions = require("../actions/utilityActions");










var /* istanbul ignore next */_spinnerAction = require("../actions/spinnerAction");




var /* istanbul ignore next */_frontEndConstants = require("../constants/frontEndConstants");















var /* istanbul ignore next */_messageConstants = require("../constants/messageConstants");

var /* istanbul ignore next */_fielderror = require("../components/fielderror/fielderror"); /* istanbul ignore next */var _fielderror2 = _interopRequireDefault(_fielderror);
var /* istanbul ignore next */_reactIntl = require("react-intl");
var /* istanbul ignore next */_socketActions = require("./../actions/socketActions");



var /* istanbul ignore next */_initData = require("./../constants/initData.js"); /* istanbul ignore next */function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}


//Mesages for internationalization
const messages = /* istanbul ignore next */(0, _reactIntl.defineMessages)({
    masterDataHead: {
        id: "utility.masterData.head",
        description: "Master data upload",
        defaultMessage: "Master data upload" },

    scriptsTileHead: {
        id: "utility.scriptsTile.head",
        description: "Run Script",
        defaultMessage: "Run Script" },

    downloadReportsHead: {
        id: "utility.downloadReport.head",
        description: "Download Reports",
        defaultMessage: "Download Reports" },

    downloadRprtsCategoryLabel: {
        id: "utility.downloadRprts.CategoryLabel",
        description: "Category",
        defaultMessage: "Category" },

    downloadRprtsCategoryPlchldr: {
        id: "utility.downloadRprts.CategoryPlchldr",
        description: "Select Category",
        defaultMessage: "Select Category" },

    downloadFileFormatPlchldr: {
        id: "utility.downloadRprts.FileFormatPlchldr",
        description: "Select File Format",
        defaultMessage: "Select File Format" },

    downloadFileFormatLabel: {
        id: "utility.downloadRprts.FileFormatLabel",
        description: "File Format",
        defaultMessage: "File Format" },

    downloadFileFormatCsv: {
        id: "utility.downloadRports.csvFormat",
        description: "Comma separated values (csv)",
        defaultMessage: "Comma separated values (csv)" },

    downloadFileFormatXls: {
        id: "utiltiy.downloadRports.xlsFormat",
        description: "ExceL Spreadsheet (xlsx)",
        defaultMessage: "ExceL Spreadsheet (xlsx)" },

    goodsRcvdNotesHead: {
        id: "utility.goodsRcvdNotes.head",
        description: "Goods Received Notes",
        defaultMessage: "Goods Received Notes" },

    stockLedgerHead: {
        id: "utility.stockLedgerHead.head",
        description: "Inventory Stock Ledger",
        defaultMessage: "Inventory Stock Ledger" },

    stockLedgerRawTransactionHead: {
        id: "utility.stockLedgerRawTransactionHead.head",
        description: "Stock Ledger Raw Transactions",
        defaultMessage: "Stock Ledger Raw Transactions" },

    uploadBtnText: {
        id: "utility.uploadBtn.label",
        description: "Upload Master Data",
        defaultMessage: "Upload Master Data" } });



class UtilityTab extends /* istanbul ignore next */_react2.default.Component {
    constructor(props) {
        super(props);
        this.state = {
            reportState: {},
            grnState: {},
            stockLedgerState: {
                category: "all",
                duration: { today: false, yesterday: false },
                sku: "" },

            prodStatusCalledOnLoad: false,
            utilityTabRefreshed: null };

    }

    _changeReportCategory(data) {
        var newState = this.state.reportState;
        newState.category = data.value;
        this.setState({ reportState: newState });
    }

    _changeReportFileType(data) {
        var newState = this.state.reportState;
        newState.fileType = data.value;
        this.setState({ reportState: newState });
    }

    _handleChangeSkuNumber(e) {
        if (e.target) {
            var newState = this.state.stockLedgerState;
            newState.sku = e.target.value;
            this.setState({ stockLedgerState: newState });
        }
    }

    _handleChangeStockLedgerCategory(e) {
        if (e.target.value) {
            var newState = this.state.stockLedgerState;
            newState.category = e.target.value;
            if (newState.category === "all") {
                newState.sku = "";
                this.props.clearStockLedgerSKU();
            }
            this.setState({ stockLedgerState: newState });
        }
    }

    _handleChangeStockLedgerDuration(e) {
        if (e.target) {
            let newState = this.state.stockLedgerState;
            newState.duration[e.target.value] = e.target.checked;
            this.setState({ stockLedgerState: newState });
        }
        console.log(this.state.stockLedgerState);
    }

    _validateStockLedgerButton() {
        let stock_ledger_state = this.state.stockLedgerState;
        let validated = false;
        if (
        stock_ledger_state.category === "all" && (
        stock_ledger_state.duration.today ||
        stock_ledger_state.duration.yesterday))
        {
            validated = true;
        } else if (
        stock_ledger_state.category === "sku" &&
        stock_ledger_state.sku.trim().length !== 0 && (
        stock_ledger_state.duration.today ||
        stock_ledger_state.duration.yesterday))
        {
            validated = true;
        }
        return validated;
    }

    _renderStockLedgertile() {
        let current_state = this.state.stockLedgerState;
        let tile = [];
        const fileType = [
        { value: "csv", label: "Comma separated values (csv)" },
        {
            value: "xlsx",
            label: "ExceL Spreadsheet (xlsx)" }];


        let checkbox =
        /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */"div", /* istanbul ignore next */{ key: "0", __source: { fileName: _jsxFileName, lineNumber: 220 }, __self: this },
            /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */"div", /* istanbul ignore next */{
                    className: "gor-utility-sku-wrap",
                    style: { marginTop: 10, marginBottom: 10, fontSize: 13 }, __source: { fileName: _jsxFileName, lineNumber: 221 }, __self: this },

                /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */"div", /* istanbul ignore next */{ __source: { fileName: _jsxFileName, lineNumber: 225 }, __self: this },
                    /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */"input", /* istanbul ignore next */{
                        checked: current_state.category === "all",
                        onChange: this._handleChangeStockLedgerCategory.bind(
                        this),

                        type: "radio",
                        id: "all",
                        name: "stock_ledger",
                        value: "all", __source: { fileName: _jsxFileName, lineNumber: 226 }, __self: this }),

                    /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */"label", /* istanbul ignore next */{ __source: { fileName: _jsxFileName, lineNumber: 236 }, __self: this },
                        /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_reactIntl.FormattedMessage, /* istanbul ignore next */{
                            id: "utility.stockLedger.category.all",
                            description: "all",
                            defaultMessage: "All", __source: { fileName: _jsxFileName, lineNumber: 237 }, __self: this }))),




                /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */"div", /* istanbul ignore next */{ __source: { fileName: _jsxFileName, lineNumber: 245 }, __self: this },
                    /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */"input", /* istanbul ignore next */{
                        checked: current_state.category === "sku",
                        onChange: this._handleChangeStockLedgerCategory.bind(
                        this),

                        type: "radio",
                        id: "sku",
                        name: "stock_ledger",
                        value: "sku", __source: { fileName: _jsxFileName, lineNumber: 246 }, __self: this }),

                    /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */"label", /* istanbul ignore next */{ __source: { fileName: _jsxFileName, lineNumber: 256 }, __self: this },
                        /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_reactIntl.FormattedMessage, /* istanbul ignore next */{
                            id: "utility.stockLedger.category.sku",
                            description: "sku",
                            defaultMessage: "Specific SKU", __source: { fileName: _jsxFileName, lineNumber: 257 }, __self: this })))));






        tile.push(checkbox);
        var invoiceInput =
        /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */"div", /* istanbul ignore next */{ key: "1", __source: { fileName: _jsxFileName, lineNumber: 269 }, __self: this },
            /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */"div", /* istanbul ignore next */{ className: "gor-audit-input-wrap gor-utility-sku-wrap", __source: { fileName: _jsxFileName, lineNumber: 270 }, __self: this },
                /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */"input", /* istanbul ignore next */{
                    value: current_state.sku,
                    disabled:
                    this.state.stockLedgerState.category === "all",

                    className: "gor-audit-input gor-input-ok",
                    placeholder: "Enter SKU Number",
                    onChange: this._handleChangeSkuNumber.bind(this), __source: { fileName: _jsxFileName, lineNumber: 271 }, __self: this }),

                this.props.validatedStockLedgerSKU &&
                this.state.stockLedgerState.category === "sku" ?
                /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */"div", /* istanbul ignore next */{ className: "gor-login-error", __source: { fileName: _jsxFileName, lineNumber: 282 }, __self: this }) :
                ""),

            this.props.validatedStockLedgerSKU &&
            this.state.stockLedgerState.category === "sku" ?
            /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */"div", /* istanbul ignore next */{ className: "gor-sku-error gor-utility-error-invoice", __source: { fileName: _jsxFileName, lineNumber: 287 }, __self: this },
                /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_reactIntl.FormattedMessage, /* istanbul ignore next */{
                    id: "utility.stockLedger.incorrectSku",
                    description: "Please enter correct SKU",
                    defaultMessage: "Please enter correct SKU", __source: { fileName: _jsxFileName, lineNumber: 288 }, __self: this })) :


            "");


        tile.push(invoiceInput);
        tile.push(
        /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */"div", /* istanbul ignore next */{ key: "2", style: { marginBottom: 10, fontSize: 13 }, __source: { fileName: _jsxFileName, lineNumber: 299 }, __self: this },
            /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */"div", /* istanbul ignore next */{ className: "gor-utility-stock-ledger-duration-label", __source: { fileName: _jsxFileName, lineNumber: 300 }, __self: this },
                " ",
                /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_reactIntl.FormattedMessage, /* istanbul ignore next */{
                    id: "utility.stockLedger.duration.label",
                    description: "Time Duration:",
                    defaultMessage: "Time Duration:", __source: { fileName: _jsxFileName, lineNumber: 302 }, __self: this })),


            /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */"div", /* istanbul ignore next */{ className: "gor-utility-duration-wrap", __source: { fileName: _jsxFileName, lineNumber: 308 }, __self: this },
                /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */"div", /* istanbul ignore next */{ style: { width: "50%", float: "left" }, __source: { fileName: _jsxFileName, lineNumber: 309 }, __self: this },

                    /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */"input", /* istanbul ignore next */{
                        onChange: this._handleChangeStockLedgerDuration.bind(
                        this),

                        defaultChecked: current_state.duration.today,
                        type: "checkbox",
                        id: "today",
                        value: "today", __source: { fileName: _jsxFileName, lineNumber: 311 }, __self: this }),

                    /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */"label", /* istanbul ignore next */{ __source: { fileName: _jsxFileName, lineNumber: 320 }, __self: this },
                        /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_reactIntl.FormattedMessage, /* istanbul ignore next */{
                            id: "utility.stockLedger.duration.today",
                            description: "Today",
                            defaultMessage: "Today", __source: { fileName: _jsxFileName, lineNumber: 321 }, __self: this }))),



                /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */"div", /* istanbul ignore next */{ style: { width: "50%", float: "right" }, __source: { fileName: _jsxFileName, lineNumber: 328 }, __self: this },
                    /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */"input", /* istanbul ignore next */{
                        onChange: this._handleChangeStockLedgerDuration.bind(
                        this),

                        defaultChecked: current_state.duration.yesterday,
                        type: "checkbox",
                        id: "yesterday",
                        value: "yesterday", __source: { fileName: _jsxFileName, lineNumber: 329 }, __self: this }),

                    /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */"label", /* istanbul ignore next */{ __source: { fileName: _jsxFileName, lineNumber: 338 }, __self: this },
                        /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_reactIntl.FormattedMessage, /* istanbul ignore next */{
                            id: "utility.stockLedger.duration.yesterday",
                            description: "Yesterday",
                            defaultMessage: "Yesterday", __source: { fileName: _jsxFileName, lineNumber: 339 }, __self: this }))))));






        return tile;
    }

    /**
       * The method will render the widget which will
       * enable the user to download raw transactions
       * for today only.
       * @returns {Array}
       * @private
       */
    _renderStockLedgerRawTransactionTile() {
        let tile = [];
        let checkbox =
        /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */"div", /* istanbul ignore next */{ key: "0", __source: { fileName: _jsxFileName, lineNumber: 362 }, __self: this },
            /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */"div", /* istanbul ignore next */{ className: "gor-utility-stock-ledger-duration-label", __source: { fileName: _jsxFileName, lineNumber: 363 }, __self: this },
                " ",
                /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_reactIntl.FormattedMessage, /* istanbul ignore next */{
                    id: "utility.stockLedger.duration.label",
                    description: "Time Duration:",
                    defaultMessage: "Time Duration:", __source: { fileName: _jsxFileName, lineNumber: 365 }, __self: this })),


            /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */"div", /* istanbul ignore next */{
                    className: "gor-utility-duration-wrap",
                    style: { marginBottom: 10, fontSize: 13 }, __source: { fileName: _jsxFileName, lineNumber: 371 }, __self: this },

                /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */"div", /* istanbul ignore next */{ __source: { fileName: _jsxFileName, lineNumber: 375 }, __self: this },
                    /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */"input", /* istanbul ignore next */{
                        checked: true,
                        disabled: true,
                        type: "checkbox",
                        id: "all",
                        name: "stock_ledger_raw_transaction_duration",
                        value: "all", __source: { fileName: _jsxFileName, lineNumber: 376 }, __self: this }),

                    /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */"label", /* istanbul ignore next */{ __source: { fileName: _jsxFileName, lineNumber: 384 }, __self: this },
                        /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_reactIntl.FormattedMessage, /* istanbul ignore next */{
                            id: "utility.stockLedgerRawTransaction.duration.today",
                            description: "today",
                            defaultMessage: "Today", __source: { fileName: _jsxFileName, lineNumber: 385 }, __self: this })))));







        tile.push(checkbox);
        return tile;
    }

    /**
       * [_onMasterFileUpload callback for master data file upload]
       * @param  {[type]} fileObject [description]
       * @return {[type]}            [description]
       */
    _onMasterFileUpload(fileObject) {
        var formData = new FormData();
        formData.append("file", fileObject);
        var params = {
            url: /* istanbul ignore next */_configConstants.MASTER_UPLOAD_URL,
            method: /* istanbul ignore next */_frontEndConstants.POST,
            token: this.props.auth_token,
            cause: /* istanbul ignore next */_frontEndConstants.MASTER_FILE_UPLOAD,
            contentType: false,
            formdata: formData };

        this.props.uploadMasterDataProcessing(true);
        this.props.getItemRecall(params);
    }

    _getfilemaxsize() {
        var params = {
            url: /* istanbul ignore next */_configConstants.GET_MAXSIZE_FILE_URL,
            method: /* istanbul ignore next */_frontEndConstants.GET,
            token: this.props.auth_token,
            cause: /* istanbul ignore next */_frontEndConstants.GET_MAX_FILE_SIZE,
            contentType: false };

        this.props.getItemRecall(params);
    }

    _generateReport(reqFileType) {
        let fileType = "csv";
        if (reqFileType) {
            fileType = reqFileType;
        }
        let url = /* istanbul ignore next */_configConstants.INVENTORY_REPORT_URL + "?sync=false&format=" + fileType;
        let data = {
            url: url,
            method: /* istanbul ignore next */_frontEndConstants.GET,
            token: this.props.auth_token,
            responseType: "arraybuffer",
            cause: /* istanbul ignore next */_frontEndConstants.INVENTORY_REPORT_RESPONSE };

        this.props.setInventoryReportSpinner(true);
        this.props.getGRdata(data);
        this._onInvRprtRefresh();
    }

    _generateGRN(reqFileType, invoiceId) {
        var fileType = "csv";
        if (reqFileType) {
            fileType = reqFileType;
        }
        if (!invoiceId) {
            throw new Error(
            "Did not receive the Invoice id for GRN generation!");

        }
        var url =
        /* istanbul ignore next */_configConstants.GR_REPORT_URL + "/" + invoiceId + "?sync=false&format=" + fileType;
        let data = {
            url: url,
            method: /* istanbul ignore next */_frontEndConstants.GET,
            token: this.props.auth_token,
            cause: /* istanbul ignore next */_frontEndConstants.GR_REPORT_RESPONSE,
            responseType: "arraybuffer" };

        this.props.getGRdata(data);
        this.props.validateInvoiceID(false);
        this._onGRNRefresh();
    }

    /**
       * The method will download
       * the aggregated stock ledger
       * report.
       * @private
       */
    _downloadStockLedger() {
        let params = [];
        if (this.state.stockLedgerState.sku) {
            params.push(["sku", this.state.stockLedgerState.sku].join("="));
            params.push(["all", "false"].join("="));
        } else {
            params.push(["all", "true"].join("="));
        }
        params.push(
        [
        "today",
        this.state.stockLedgerState.duration.today ? "true" : "false"].
        join("="));

        params.push(
        [
        "yesterday",
        this.state.stockLedgerState.duration.yesterday ?
        "true" :
        "false"].
        join("="));


        var url = /* istanbul ignore next */_configConstants.STOCK_LEDGER_REPORT_DOWNLOAD_URL;
        url = [url, params.join("&")].join("?");
        let data = {
            url: url,
            method: /* istanbul ignore next */_frontEndConstants.GET,
            token: this.props.auth_token,
            cause: /* istanbul ignore next */_frontEndConstants.DOWNLOAD_STOCK_LEDGER_REPORT,
            responseType: "arraybuffer",
            accept: "text/csv" };

        this.props.setStockLedgerSpinner(true);
        this.props.downloadStockLedgerReport(data);
        this.props.validateInvoiceID(false);
    }

    /**
       * The method will make the HTTP call to download
       * raw transactions for today.
       * @private
       */
    _downloadStockLedgerRawTransactions() {
        let url = /* istanbul ignore next */_configConstants.STOCK_LEDGER_REPORT_DOWNLOAD_RAW_TRANSACTIONS_URL;
        let data = {
            url: url,
            method: /* istanbul ignore next */_frontEndConstants.GET,
            token: this.props.auth_token,
            cause: /* istanbul ignore next */_frontEndConstants.DOWNLOAD_STOCK_LEDGER_RAW_TRANSACTIONS_REPORT,
            responseType: "arraybuffer",
            accept: "text/csv" };

        this.props.setStockLedgerRawTransactionsSpinner(true);
        this.props.downloadStockLedgerRawTransactionsReport(data);
    }

    _onMDMRefresh() {
        var params = {
            url: /* istanbul ignore next */_configConstants.UPLOAD_HISTORY_URL + "?&order_by=create_time",
            method: /* istanbul ignore next */_frontEndConstants.GET,
            token: this.props.auth_token,
            cause: /* istanbul ignore next */_frontEndConstants.UPLOAD_HISTORY };

        this.props.getUploadHistory(params);
    }

    _onInvRprtRefresh() {
        var params = {
            url: /* istanbul ignore next */_configConstants.REPORTS_HISTORY_URL + "?component=inventory&order_by=create_time",
            method: /* istanbul ignore next */_frontEndConstants.GET,
            token: this.props.auth_token,
            cause: /* istanbul ignore next */_frontEndConstants.REPORTS_HISTORY };

        this.props.getUploadHistory(params);
    }

    _onGRNRefresh() {
        var params = {
            url: /* istanbul ignore next */_configConstants.REPORTS_HISTORY_URL + "?component=gr&order_by=create_time",
            method: /* istanbul ignore next */_frontEndConstants.GET,
            token: this.props.auth_token,
            cause: /* istanbul ignore next */_frontEndConstants.GRN_HISTORY };

        this.props.getUploadHistory(params);
    }

    componentDidMount() {
        this._onMDMRefresh();
        this._getfilemaxsize();
        this._onInvRprtRefresh();
        this._onGRNRefresh();
    }

    componentWillReceiveProps(nextProps, nextState) {
        if (nextProps.newFileUploaded !== this.props.newFileUploaded) {
            this._onMDMRefresh();
        }

        if (
        nextProps.socketAuthorized &&
        nextProps.utilityTabRefreshed !== this.state.utilityTabRefreshed)
        {
            this.setState({
                utilityTabRefreshed: nextProps.utilityTabRefreshed });

            this._subscribeData();
        }
    }

    componentWillMount() {
        /**
                           * It will update the last refreshed property of
                           * overview details, so that updated subscription
                           * packet can be sent to the server for data
                           * update.
                           */
        this.props.utilityTabRefreshed();
    }

    _subscribeData() {
        let updatedWsSubscription = this.props.wsSubscriptionData;
        this.props.initDataSentCall(updatedWsSubscription["default"]);
        this.props.updateSubscriptionPacket(updatedWsSubscription);
    }

    render() {
        let stockLedgerTile = this._renderStockLedgertile();
        let stockLedgerRawTransactionTile = this._renderStockLedgerRawTransactionTile();
        var activeReportDownButton = this.state.reportState.fileType && this.state.reportState.category;
        var activeGRNDownButton = this.state.grnState.fileType && this.state.grnState.invoiceId;
        var activeStockLedgerButton = this._validateStockLedgerButton();
        let show_gr_report = false;
        let show_masterdata_upload = false;
        let show_inventory_report = false;
        let show_item_recall_scripts = false;
        let show_stock_ledger_widget = false;
        let show_stock_ledger_raw_transaction_widget = false;

        try {
            if (!this.props.config.utility_tab.enabled) {
                return null;
            }
        } catch (ex) {
            //Do nothing
        }

        try {
            show_gr_report = this.props.config.utility_tab.widgets.gr_report;
        } catch (ex) {
            //Do nothing
        }
        try {
            show_masterdata_upload = this.props.config.utility_tab.widgets.
            masterdata_upload;
        } catch (ex) {
            //Do nothing
        }
        try {
            show_inventory_report = this.props.config.utility_tab.widgets.
            reports.inventory_report;
        } catch (ex) {
            //Do nothing
        }
        try {
            show_item_recall_scripts = this.props.config.utility_tab.widgets.
            scripts.item_recall;
        } catch (ex) {
            //Do nothing
        }

        try {
            show_stock_ledger_widget = this.props.config.utility_tab.widgets.
            reports.stock_ledger_report;
        } catch (ex) {
            //Do nothing
        }

        try {
            show_stock_ledger_raw_transaction_widget = this.props.config.
            utility_tab.widgets.reports.
            stock_ledger_raw_transactions_report;
        } catch (ex) {
            //Do nothing
        }

        return (
            /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */"div", /* istanbul ignore next */{ __source: { fileName: _jsxFileName, lineNumber: 666 }, __self: this },
                show_inventory_report ?
                /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_utilityTile2.default, /* istanbul ignore next */{
                        tileHead: this.context.intl.formatMessage(
                        messages.downloadReportsHead),

                        showHeaderIcon: true,
                        onRefresh: this._onInvRprtRefresh.bind(this), __source: { fileName: _jsxFileName, lineNumber: 668 }, __self: this },

                    /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_downloadReportsTile2.default, /* istanbul ignore next */{
                        generateReport: this._generateReport.bind(
                        this),

                        reportsHistory: this.props.reportsHistory,
                        timeOffset: this.props.timeOffset, __source: { fileName: _jsxFileName, lineNumber: 675 }, __self: this })) :


                null,

                show_gr_report ?
                /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_utilityTile2.default, /* istanbul ignore next */{
                        tileHead: this.context.intl.formatMessage(
                        messages.goodsRcvdNotesHead),

                        showFooter: false,
                        showHeaderIcon: true,
                        onRefresh: this._onGRNRefresh.bind(this), __source: { fileName: _jsxFileName, lineNumber: 686 }, __self: this },

                    /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_downloadGRTile2.default, /* istanbul ignore next */{
                        validatedInvoice: this.props.validatedInvoice,
                        generateReport: this._generateGRN.bind(this),
                        grnHistory: this.props.grnHistory,
                        timeOffset: this.props.timeOffset, __source: { fileName: _jsxFileName, lineNumber: 694 }, __self: this })) :


                null,
                show_masterdata_upload ?
                /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_utilityTile2.default, /* istanbul ignore next */{
                        tileHead: this.context.intl.formatMessage(
                        messages.masterDataHead),

                        showFooter: false,
                        showHeaderIcon: true,
                        onRefresh: this._onMDMRefresh.bind(this), __source: { fileName: _jsxFileName, lineNumber: 703 }, __self: this },

                    /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_masterUploadTile2.default, /* istanbul ignore next */{
                        uploadHistChanged:
                        this.props.uploadHistChanged,

                        uploadBtnText: this.context.intl.formatMessage(
                        messages.uploadBtnText),

                        isMasterUploadProcessing:
                        this.props.isMasterUploadProcessing,

                        maxFileSize: this.props.maxfilesizelimit,
                        errorList: /* istanbul ignore next */_messageConstants.fileUploadMessages,
                        acceptedFormats: /* istanbul ignore next */_frontEndConstants.MASTER_FILE_FORMATS,
                        onMasterFileUpload: this._onMasterFileUpload.bind(
                        this),

                        historyData:
                        this.props.uploadHistoryData || [],

                        errorCode: this.props.errorCode,
                        maxSize: this.props.maxsize,
                        timeOffset: this.props.timeOffset, __source: { fileName: _jsxFileName, lineNumber: 711 }, __self: this })) :


                null,
                show_item_recall_scripts ?
                /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_utilityTile2.default, /* istanbul ignore next */{
                        tileHead: this.context.intl.formatMessage(
                        messages.scriptsTileHead),

                        showFooter: false, __source: { fileName: _jsxFileName, lineNumber: 737 }, __self: this },

                    /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_scriptsTile2.default, /* istanbul ignore next */{ auth_token: this.props.auth_token, __source: { fileName: _jsxFileName, lineNumber: 743 }, __self: this })) :

                null,
                show_stock_ledger_widget ?
                /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_utilityTile2.default, /* istanbul ignore next */{
                        loading: this.props.stockLedgerSpinner,
                        tileHead: this.context.intl.formatMessage(
                        messages.stockLedgerHead),

                        showFooter: true,
                        footerAction: this._downloadStockLedger.bind(
                        this),

                        enableButton: activeStockLedgerButton, __source: { fileName: _jsxFileName, lineNumber: 747 }, __self: this },

                    stockLedgerTile) :

                null,
                show_stock_ledger_raw_transaction_widget ?
                /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_utilityTile2.default, /* istanbul ignore next */{
                        loading:
                        this.props.stockLedgerRawTransactionsSpinner,

                        tileHead: this.context.intl.formatMessage(
                        messages.stockLedgerRawTransactionHead),

                        showFooter: true,
                        footerAction: this._downloadStockLedgerRawTransactions.bind(
                        this),

                        enableButton: true, __source: { fileName: _jsxFileName, lineNumber: 762 }, __self: this },

                    stockLedgerRawTransactionTile) :

                null));



    }}


function mapStateToProps(state, ownProps) {
    return {
        auth_token: state.authLogin.auth_token,
        reportsHistory: state.utilityValidations.reportsHistory || [],
        grnHistory: state.utilityValidations.grnHistory || [],
        validatedInvoice: state.utilityValidations.invalidInvoice || false,
        validatedStockLedgerSKU: state.utilityValidations.invalidStockLedgerSKU || false,
        inventorySpinner: state.spinner.inventoryReportSpinner || false,
        isMasterUploadProcessing: state.utilityValidations.isMasterUploadProcessing || false,
        newFileUploaded: state.utilityValidations.newFileUploaded,
        uploadHistoryData: state.utilityValidations.uploadHistoryData,
        uploadHistChanged: state.utilityValidations.uploadHistChanged,
        wsSubscriptionData: state.recieveSocketActions.socketDataSubscriptionPacket || /* istanbul ignore next */_initData.wsOverviewData,

        socketAuthorized: state.recieveSocketActions.socketAuthorized,
        utilityTabRefreshed: state.utilityValidations.utilityTabRefreshed,
        config: state.config || {},
        maxfilesizelimit: state.utilityValidations.maxfilesizelimit || 0,
        errorCode: state.utilityValidations.errorCode,
        maxsize: state.utilityValidations.maxsize || 0,
        timeOffset: state.authLogin.timeOffset,
        stockLedgerSpinner: state.spinner.stockLedgerSpinner || false,
        stockLedgerRawTransactionsSpinner: state.spinner.stockLedgerRawTransactionsSpinner || false };

}

var mapDispatchToProps = function mapDispatchToProps(dispatch) {
    return {
        getItemRecall: function /* istanbul ignore next */getItemRecall(data) {
            dispatch( /* istanbul ignore next */(0, _utilityActions.getItemRecall)(data));
        },
        getUploadHistory: function /* istanbul ignore next */getUploadHistory(data) {
            dispatch( /* istanbul ignore next */(0, _utilityActions.getUploadHistory)(data));
        },
        getGRdata: function /* istanbul ignore next */getGRdata(data) {
            dispatch( /* istanbul ignore next */(0, _utilityActions.getGRdata)(data));
        },
        downloadStockLedgerReport: function /* istanbul ignore next */downloadStockLedgerReport(data) {
            dispatch( /* istanbul ignore next */(0, _utilityActions.downloadStockLedgerReport)(data));
        },
        downloadStockLedgerRawTransactionsReport: function /* istanbul ignore next */downloadStockLedgerRawTransactionsReport(data) {
            dispatch( /* istanbul ignore next */(0, _utilityActions.downloadStockLedgerRawTransactionsReport)(data));
        },
        clearStockLedgerSKU: function /* istanbul ignore next */clearStockLedgerSKU(data) {
            dispatch( /* istanbul ignore next */(0, _utilityActions.clearStockLedgerSKU)(data));
        },
        validateInvoiceID: function /* istanbul ignore next */validateInvoiceID(data) {
            dispatch( /* istanbul ignore next */(0, _utilityActions.validateInvoiceID)(data));
        },
        uploadMasterDataProcessing: function /* istanbul ignore next */uploadMasterDataProcessing(data) {
            dispatch( /* istanbul ignore next */(0, _utilityActions.uploadMasterDataProcessing)(data));
        },
        setInventoryReportSpinner: function /* istanbul ignore next */setInventoryReportSpinner(data) {
            dispatch( /* istanbul ignore next */(0, _spinnerAction.setInventoryReportSpinner)(data));
        },
        updateSubscriptionPacket: function /* istanbul ignore next */updateSubscriptionPacket(data) {
            dispatch( /* istanbul ignore next */(0, _socketActions.updateSubscriptionPacket)(data));
        },
        initDataSentCall: function /* istanbul ignore next */initDataSentCall(data) {
            dispatch( /* istanbul ignore next */(0, _socketActions.setWsAction)({ type: /* istanbul ignore next */_frontEndConstants.WS_ONSEND, data: data }));
        },
        utilityTabRefreshed: function /* istanbul ignore next */utilityTabRefreshed(data) {
            dispatch( /* istanbul ignore next */(0, _utilityActions.utilityTabRefreshed)(data));
        },
        setStockLedgerSpinner: function /* istanbul ignore next */setStockLedgerSpinner(data) {
            dispatch( /* istanbul ignore next */(0, _spinnerAction.setStockLedgerSpinner)(data));
        },
        setStockLedgerRawTransactionsSpinner: function /* istanbul ignore next */setStockLedgerRawTransactionsSpinner(data) {
            dispatch( /* istanbul ignore next */(0, _spinnerAction.setStockLedgerRawTransactionsSpinner)(data));
        } };

};
UtilityTab.contextTypes = {
    intl: /* istanbul ignore next */_react2.default.PropTypes.object.isRequired }; /* istanbul ignore next */exports.default =


/* istanbul ignore next */(0, _reactRedux.connect)(mapStateToProps, mapDispatchToProps)(UtilityTab);