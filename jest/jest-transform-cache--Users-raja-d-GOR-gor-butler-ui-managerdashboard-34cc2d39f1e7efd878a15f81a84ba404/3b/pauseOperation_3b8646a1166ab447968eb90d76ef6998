/* istanbul ignore next */'use strict';Object.defineProperty(exports, "__esModule", { value: true });var _jsxFileName = '/Users/raja.d/GOR/gor.butler.ui.managerdashboard/src/containers/emergencyProcess/pauseOperation.js';var /* istanbul ignore next */_react = require('react'); /* istanbul ignore next */var _react2 = _interopRequireDefault(_react);
var /* istanbul ignore next */_reactRedux = require('react-redux');
var /* istanbul ignore next */_userActions = require('../../actions/userActions');
var /* istanbul ignore next */_reactIntl = require('react-intl');
var /* istanbul ignore next */_validationActions = require('../../actions/validationActions');
var /* istanbul ignore next */_fieldCheck = require('../../utilities/fieldCheck');
var /* istanbul ignore next */_configConstants = require('../../constants/configConstants');
var /* istanbul ignore next */_frontEndConstants = require('../../constants/frontEndConstants'); /* istanbul ignore next */function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}

class PauseOperation extends /* istanbul ignore next */_react2.default.Component {

  _removeThisModal() {
    this.props.resetForm();
    this.props.removeModal();
  }
  _typing() {
    this.passField.className = 'gor-password-field-lg gor-input-ok gor-input-typing';
    this._checkPass();
  }
  _checkPass() {
    let password = this.password.value.trim(),loginPassInfo;
    loginPassInfo = /* istanbul ignore next */(0, _fieldCheck.emptyField)(password);
    this.props.validatePass(loginPassInfo);
    return loginPassInfo.type;
  }
  componentWillReceiveProps(nextProps) {
    if (!nextProps.auth_token || nextProps.system_data !== this.props.system_data)
    {
      this._removeThisModal();
    }
    if (nextProps.modalStatus && !this.props.modalStatus) {
      this._removeThisModal();
    }
  }
  _handlePause() {
    let formdata = {
      'username': this.props.username,
      'password': this.password.value };

    let userData = {
      'url': /* istanbul ignore next */_configConstants.LOGIN_URL,
      'method': /* istanbul ignore next */_frontEndConstants.POST,
      'cause': /* istanbul ignore next */_frontEndConstants.PAUSE_OPERATION,
      'formdata': formdata,
      'contentType': /* istanbul ignore next */_frontEndConstants.APP_JSON,
      'accept': /* istanbul ignore next */_frontEndConstants.APP_JSON,
      'token': this.props.auth_token };

    this.props.userRequest(userData);
  }
  render()
  {
    return (
      /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'gor-operation-pause gor-modal-content', __source: { fileName: _jsxFileName, lineNumber: 54 }, __self: this },
        /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'gor-operation-head', __source: { fileName: _jsxFileName, lineNumber: 55 }, __self: this },
          /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'gor-question-2', __source: { fileName: _jsxFileName, lineNumber: 56 }, __self: this }), /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_reactIntl.FormattedMessage, /* istanbul ignore next */{ id: 'operation.pause.heading',
            defaultMessage: 'Pause Operation',
            description: 'Text for pause operation heading', __source: { fileName: _jsxFileName, lineNumber: 56 }, __self: this })),

        /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'gor-operation-body', __source: { fileName: _jsxFileName, lineNumber: 60 }, __self: this },
          /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_reactIntl.FormattedMessage, /* istanbul ignore next */{ id: 'operation.pause.text',
            defaultMessage: 'All Butler bots, PPS and other sysytem components will be paused once completed the last action',
            description: 'Text for pause operation action', __source: { fileName: _jsxFileName, lineNumber: 61 }, __self: this }),
          /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'gor-margin-top', __source: { fileName: _jsxFileName, lineNumber: 64 }, __self: this },
            /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'gor-password-field-lg' + (this.props.passwordCheck.type === /* istanbul ignore next */_frontEndConstants.ERROR ? ' gor-input-error' : ' gor-input-ok'), ref: node => {this.passField = node;}, __source: { fileName: _jsxFileName, lineNumber: 65 }, __self: this },
              /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: this.props.passwordCheck.type === /* istanbul ignore next */_frontEndConstants.ERROR ? 'gor-login-password-error' : 'gor-login-password', __source: { fileName: _jsxFileName, lineNumber: 66 }, __self: this }),
              /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'input', /* istanbul ignore next */{ className: 'field', type: 'password', id: 'password',
                ref: node => {this.password = node;}, onChange: this._typing.bind(this),
                placeholder: 'Enter your password', __source: { fileName: _jsxFileName, lineNumber: 67 }, __self: this })),

            this.props.passwordCheck && this.props.passwordCheck.type === /* istanbul ignore next */_frontEndConstants.ERROR ?
            /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'gor-login-usr-error gor-sm-string', __source: { fileName: _jsxFileName, lineNumber: 72 }, __self: this },
              /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_reactIntl.FormattedMessage, /* istanbul ignore next */{ id: 'operation.pause.error',
                defaultMessage: 'The entered input does not match. Please try again.',
                description: 'Text for wrong password', __source: { fileName: _jsxFileName, lineNumber: 73 }, __self: this })) :
            ''),


          /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'gor-margin-top', __source: { fileName: _jsxFileName, lineNumber: 79 }, __self: this },
            /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'button', /* istanbul ignore next */{ className: 'gor-cancel-btn', onClick: this._removeThisModal.bind(this), __source: { fileName: _jsxFileName, lineNumber: 80 }, __self: this },
              /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_reactIntl.FormattedMessage, /* istanbul ignore next */{ id: 'operation.pause.cancel',
                defaultMessage: 'Cancel',
                description: 'Text for cancel button', __source: { fileName: _jsxFileName, lineNumber: 81 }, __self: this })),
            /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'button', /* istanbul ignore next */{ className: 'gor-add-btn', disabled: this.props.passwordCheck.type === /* istanbul ignore next */_frontEndConstants.SUCCESS ? false : true,
                onClick: this._handlePause.bind(this), __source: { fileName: _jsxFileName, lineNumber: 84 }, __self: this },
              /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_reactIntl.FormattedMessage, /* istanbul ignore next */{ id: 'operation.pause.button',
                defaultMessage: 'Pause Operation',
                description: 'Text for pause button', __source: { fileName: _jsxFileName, lineNumber: 86 }, __self: this }))))));




  }}
;
function mapStateToProps(state, ownProps) {
  return {
    auth_token: state.authLogin.auth_token,
    username: state.authLogin.username,
    passwordCheck: state.appInfo.passwordInfo || {},
    modalStatus: state.emergency.hideModal || false,
    system_data: state.tabsData.system_data || null };

}
function mapDispatchToProps(dispatch) {
  return {
    userRequest: function /* istanbul ignore next */userRequest(data) {dispatch( /* istanbul ignore next */(0, _userActions.userRequest)(data));},
    validatePass: function /* istanbul ignore next */validatePass(data) {dispatch( /* istanbul ignore next */(0, _validationActions.validatePassword)(data));},
    resetForm: function /* istanbul ignore next */resetForm() {dispatch( /* istanbul ignore next */(0, _validationActions.modalFormReset)());} };

};
PauseOperation.propTypes = {
  auth_token: /* istanbul ignore next */_react2.default.PropTypes.string,
  username: /* istanbul ignore next */_react2.default.PropTypes.string,
  passwordCheck: /* istanbul ignore next */_react2.default.PropTypes.object,
  modalStatus: /* istanbul ignore next */_react2.default.PropTypes.bool,
  userRequest: /* istanbul ignore next */_react2.default.PropTypes.func,
  validatePass: /* istanbul ignore next */_react2.default.PropTypes.func,
  resetForm: /* istanbul ignore next */_react2.default.PropTypes.func,
  system_data: /* istanbul ignore next */_react2.default.PropTypes.string }; /* istanbul ignore next */exports.default =


/* istanbul ignore next */(0, _reactRedux.connect)(mapStateToProps, mapDispatchToProps)(PauseOperation);