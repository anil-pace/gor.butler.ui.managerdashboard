/* istanbul ignore next */"use strict";Object.defineProperty(exports, "__esModule", { value: true });var _jsxFileName = "/Users/raja.d/GOR/gor.butler.ui.managerdashboard/src/components/utilityComponents/scriptsTile.js";var /* istanbul ignore next */_react = require("react"); /* istanbul ignore next */var _react2 = _interopRequireDefault(_react);
var /* istanbul ignore next */_reactDom = require("react-dom"); /* istanbul ignore next */var _reactDom2 = _interopRequireDefault(_reactDom);
var /* istanbul ignore next */_reactRedux = require("react-redux");
var /* istanbul ignore next */_reactIntl = require("react-intl");
var /* istanbul ignore next */_scriptsRow = require("./scriptsRow"); /* istanbul ignore next */var _scriptsRow2 = _interopRequireDefault(_scriptsRow);

var /* istanbul ignore next */_configConstants = require("../../constants/configConstants");
var /* istanbul ignore next */_frontEndConstants = require("../../constants/frontEndConstants");

var /* istanbul ignore next */_utilityActions = require("../../actions/utilityActions"); /* istanbul ignore next */function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}
const messages = /* istanbul ignore next */(0, _reactIntl.defineMessages)({
	itemRecallHead: {
		id: "utility.itemRecall.head",
		description: "Expired Items",
		defaultMessage: "Expired Items" },

	itemRecallSubHead: {
		id: "utility.itemRecall.subHead",
		description: "(Recall all the expired items)",
		defaultMessage: "(Recall all the expired items)" },

	itemRecallButtonText: {
		id: "utility.itemRecall.buttonText",
		description: "RECALL",
		defaultMessage: "RECALL" } });



class ScriptTile extends /* istanbul ignore next */_react2.default.Component {
	_requestExpiredItems() {
		let data = {
			url: /* istanbul ignore next */_configConstants.GET_ITEM_RECALL,
			method: /* istanbul ignore next */_frontEndConstants.GET,
			token: this.props.auth_token,
			cause: /* istanbul ignore next */_frontEndConstants.ITEM_RECALLED };

		this.props.getItemRecall(data);
	}

	render() {
		let barData = {
			h1: this.context.intl.formatMessage(messages.itemRecallHead),
			h2: this.context.intl.formatMessage(messages.itemRecallSubHead),
			buttonText: this.context.intl.formatMessage(
			messages.itemRecallButtonText) };


		return (
			/* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_scriptsRow2.default, /* istanbul ignore next */{
				barData: barData,
				barAction: this._requestExpiredItems.bind(this), __source: { fileName: _jsxFileName, lineNumber: 49 }, __self: this }));


	}}


var mapDispatchToProps = function mapDispatchToProps(dispatch) {
	return {
		getItemRecall: function /* istanbul ignore next */getItemRecall(data) {
			dispatch( /* istanbul ignore next */(0, _utilityActions.getItemRecall)(data));
		} };

};

ScriptTile.contextTypes = {
	intl: /* istanbul ignore next */_react2.default.PropTypes.object.isRequired }; /* istanbul ignore next */exports.default =


/* istanbul ignore next */(0, _reactRedux.connect)(null, mapDispatchToProps)(ScriptTile);