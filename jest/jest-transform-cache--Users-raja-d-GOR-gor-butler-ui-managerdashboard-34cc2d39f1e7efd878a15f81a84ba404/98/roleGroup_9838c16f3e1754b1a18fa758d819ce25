/* istanbul ignore next */'use strict';Object.defineProperty(exports, "__esModule", { value: true });var _jsxFileName = '/Users/raja.d/GOR/gor.butler.ui.managerdashboard/src/containers/userTab/roleGroup.js';var /* istanbul ignore next */_react = require('react'); /* istanbul ignore next */var _react2 = _interopRequireDefault(_react);
var /* istanbul ignore next */_reactRedux = require('react-redux');
var /* istanbul ignore next */_userActions = require('../../actions/userActions');
var /* istanbul ignore next */_backEndConstants = require('../../constants/backEndConstants');
var /* istanbul ignore next */_reactIntl = require('react-intl'); /* istanbul ignore next */function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}


class RoleGroup extends /* istanbul ignore next */_react2.default.Component {
    constructor(props)
    {
        super(props);
    }
    _checkRole(value) {
        this.props.setRole(Number(value));
    }
    _getChecked(roleName, currentRole) {
        if (!roleName) {
            if (currentRole.name === /* istanbul ignore next */_backEndConstants.BUTLER_UI)
            {
                return true;
            }
        }
        if (roleName == currentRole.name) {
            return true;
        }
        return false;
    }
    _processRoles() {
        let roles = [],len,currentRole,item;
        len = this.props.roleList.length;

        for (let i = 0; i < len; i++) {
            currentRole = this.props.roleList[i];
            if ( /* istanbul ignore next */_backEndConstants.stringConfig.hasOwnProperty(currentRole.name)) {
                item = /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ key: i, __source: { fileName: _jsxFileName, lineNumber: 35 }, __self: this },
                    /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'gor-role', __source: { fileName: _jsxFileName, lineNumber: 36 }, __self: this },
                        /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'input', /* istanbul ignore next */{ type: 'radio', name: 'role', onChange: this._checkRole.bind(this, currentRole.id),
                            defaultChecked: this._getChecked(this.props.roleName, currentRole), __source: { fileName: _jsxFileName, lineNumber: 37 }, __self: this }),
                        /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'span', /* istanbul ignore next */{ className: 'gor-usr-hdsm', __source: { fileName: _jsxFileName, lineNumber: 39 }, __self: this },
                            this.context.intl.formatMessage( /* istanbul ignore next */_backEndConstants.stringConfig[currentRole.name]))),


                    /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'gor-choose', __source: { fileName: _jsxFileName, lineNumber: 43 }, __self: this },
                        /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'gor-sub-head', __source: { fileName: _jsxFileName, lineNumber: 44 }, __self: this },
                            /* istanbul ignore next */_backEndConstants.roleDesc.hasOwnProperty(currentRole.name) ? this.context.intl.formatMessage( /* istanbul ignore next */_backEndConstants.roleDesc[currentRole.name]) : '')));




                roles.push(item);
            }
        }
        return roles;
    }
    render() {
        var roles = this._processRoles();
        return (
            /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'gor-usr-details', __source: { fileName: _jsxFileName, lineNumber: 58 }, __self: this },
                /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'gor-usr-hdlg', __source: { fileName: _jsxFileName, lineNumber: 59 }, __self: this }, /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_reactIntl.FormattedMessage, /* istanbul ignore next */{ id: 'users.add.roledetails.heading', description: 'Heading for role',
                        defaultMessage: 'Choose a role', __source: { fileName: _jsxFileName, lineNumber: 59 }, __self: this })),
                /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'gor-sub-head', __source: { fileName: _jsxFileName, lineNumber: 61 }, __self: this }, /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_reactIntl.FormattedMessage, /* istanbul ignore next */{ id: 'users.add.roledetails.subheading', description: 'Subheading for role',
                        defaultMessage: 'User will be given a specific level of control over the Butler system depending on the designated role', __source: { fileName: _jsxFileName, lineNumber: 61 }, __self: this })),
                roles));


    }}
;
function mapStateToProps(state, ownProps) {
    return {};

}
function mapDispatchToProps(dispatch) {
    return {
        setRole: function /* istanbul ignore next */setRole(data) {dispatch( /* istanbul ignore next */(0, _userActions.setRole)(data));} };

}
RoleGroup.contextTypes = {
    intl: /* istanbul ignore next */_react2.default.PropTypes.object.isRequired }; /* istanbul ignore next */exports.default =


/* istanbul ignore next */(0, _reactRedux.connect)(mapStateToProps, mapDispatchToProps)(RoleGroup);