/* istanbul ignore next */'use strict';Object.defineProperty(exports, "__esModule", { value: true });var _jsxFileName = '/Users/raja.d/GOR/gor.butler.ui.managerdashboard/src/containers/emergencyProcess/resumeOperation.js';var /* istanbul ignore next */_react = require('react'); /* istanbul ignore next */var _react2 = _interopRequireDefault(_react);
var /* istanbul ignore next */_reactRedux = require('react-redux');
var /* istanbul ignore next */_userActions = require('../../actions/userActions');
var /* istanbul ignore next */_reactIntl = require('react-intl');
var /* istanbul ignore next */_reactReduxModal = require('react-redux-modal');
var /* istanbul ignore next */_validationActions = require('../../actions/validationActions');
var /* istanbul ignore next */_fieldCheck = require('../../utilities/fieldCheck');
var /* istanbul ignore next */_configConstants = require('../../constants/configConstants');
var /* istanbul ignore next */_frontEndConstants = require('../../constants/frontEndConstants');
var /* istanbul ignore next */_safetyChecklist = require('./safetyChecklist'); /* istanbul ignore next */var _safetyChecklist2 = _interopRequireDefault(_safetyChecklist);function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}

class ResumeOperation extends /* istanbul ignore next */_react2.default.Component {
  _removeThisModal() {
    this.props.modalresetForm();
    this.props.removeModal();
  }
  _typing() {
    this.passField.className = 'gor-password-field-lg gor-input-ok gor-input-typing';
    this._checkPass();
  }
  _checkPass() {
    let password = this.password.value.trim(),loginPassInfo;
    loginPassInfo = /* istanbul ignore next */(0, _fieldCheck.emptyField)(password);
    this.props.validatePass(loginPassInfo);
    return loginPassInfo.type;
  }
  componentWillMount() {
    this.props.resetPasswordButton();
    this.props.modalresetForm();
  }
  componentWillReceiveProps(nextProps) {
    if (!nextProps.breached && (!nextProps.auth_token || !nextProps.system_emergency || nextProps.system_data !== this.props.system_data))
    {
      if (nextProps.system_emergency || nextProps.fireHazard.emergency_type !== /* istanbul ignore next */_frontEndConstants.EMERGENCY_FIRE)
      this._removeThisModal();
    }
    if (nextProps.modalStatus && !this.props.modalStatus) {
      let typeFlag = this.props.fireHazardPressed ? /* istanbul ignore next */_frontEndConstants.EMERGENCY_FIRE : /* istanbul ignore next */_frontEndConstants.SYSTEM_EMERGENCY;
      this._removeThisModal();
      /* istanbul ignore next */_reactReduxModal.modal.add( /* istanbul ignore next */_safetyChecklist2.default, {
        title: '',
        size: 'large', // large, medium or small,
        closeOnOutsideClick: false, // (optional) Switch to true if you want to close the modal by clicking outside of it,
        hideCloseButton: true, // (optional) if you don't wanna show the top right close button
        emergency_type: typeFlag
        //.. all what you put in here you will get access in the modal props ;)
      });
    }
  }
  _handleResume() {
    let formdata = {
      'username': this.props.username,
      'password': this.password.value };

    let userData = {
      'url': /* istanbul ignore next */_configConstants.LOGIN_URL,
      'method': /* istanbul ignore next */_frontEndConstants.POST,
      'cause': /* istanbul ignore next */_frontEndConstants.RESUME_OPERATION,
      'formdata': formdata,
      'contentType': /* istanbul ignore next */_frontEndConstants.APP_JSON,
      'accept': /* istanbul ignore next */_frontEndConstants.APP_JSON,
      'token': this.props.auth_token };

    this.props.userRequest(userData);
  }
  render()
  {
    return (
      /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'gor-operation-pause gor-modal-content', __source: { fileName: _jsxFileName, lineNumber: 69 }, __self: this },
        /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'gor-operation-head', __source: { fileName: _jsxFileName, lineNumber: 70 }, __self: this },
          /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'gor-question-2', __source: { fileName: _jsxFileName, lineNumber: 71 }, __self: this }),
          /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_reactIntl.FormattedMessage, /* istanbul ignore next */{ id: 'operation.resume.heading',
            defaultMessage: 'Resume Operation',
            description: 'Text for resume operation heading', __source: { fileName: _jsxFileName, lineNumber: 72 }, __self: this })),

        /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'gor-operation-body', __source: { fileName: _jsxFileName, lineNumber: 76 }, __self: this },
          /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'span', /* istanbul ignore next */{ __source: { fileName: _jsxFileName, lineNumber: 77 }, __self: this }, /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_reactIntl.FormattedMessage, /* istanbul ignore next */{ id: 'operation.resume.text',
              defaultMessage: 'To resume operation, you will be required to go through a safety checklist to make sure that the Butler system is ready',

              description: 'Text for resume operation body', __source: { fileName: _jsxFileName, lineNumber: 77 }, __self: this })),
          /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'gor-margin-top', __source: { fileName: _jsxFileName, lineNumber: 81 }, __self: this },
            /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'gor-password-field-lg' + (this.props.passwordCheck.type === /* istanbul ignore next */_frontEndConstants.ERROR ? ' gor-input-error' : ' gor-input-ok'), ref: node => {this.passField = node;}, __source: { fileName: _jsxFileName, lineNumber: 82 }, __self: this },
              /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: this.props.passwordCheck.type === /* istanbul ignore next */_frontEndConstants.ERROR ? 'gor-login-password-error' : 'gor-login-password', __source: { fileName: _jsxFileName, lineNumber: 83 }, __self: this }),
              /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'input', /* istanbul ignore next */{ className: 'field', type: 'password', id: 'password',
                ref: node => {this.password = node;}, onChange: this._typing.bind(this),
                placeholder: 'Enter your password', __source: { fileName: _jsxFileName, lineNumber: 84 }, __self: this })),

            this.props.passwordCheck && this.props.passwordCheck.type === /* istanbul ignore next */_frontEndConstants.ERROR ?
            /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'gor-login-usr-error gor-sm-string', __source: { fileName: _jsxFileName, lineNumber: 89 }, __self: this },
              /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_reactIntl.FormattedMessage, /* istanbul ignore next */{ id: 'operation.resume.error',
                defaultMessage: 'The entered input does not match. Please try again.',
                description: 'Text for wrong password', __source: { fileName: _jsxFileName, lineNumber: 90 }, __self: this })) :
            ''),


          /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'gor-margin-top', __source: { fileName: _jsxFileName, lineNumber: 96 }, __self: this },
            /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'button', /* istanbul ignore next */{ className: 'gor-cancel-btn', onClick: this._removeThisModal.bind(this), __source: { fileName: _jsxFileName, lineNumber: 97 }, __self: this },
              /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_reactIntl.FormattedMessage, /* istanbul ignore next */{ id: 'operation.cancel',
                defaultMessage: 'Cancel', description: 'Text for cancel', __source: { fileName: _jsxFileName, lineNumber: 98 }, __self: this })),
            /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'button', /* istanbul ignore next */{ className: 'gor-add-btn', disabled: this.props.passwordCheck.type === /* istanbul ignore next */_frontEndConstants.SUCCESS ? false : true,
                onClick: this._handleResume.bind(this), __source: { fileName: _jsxFileName, lineNumber: 100 }, __self: this }, /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_reactIntl.FormattedMessage, /* istanbul ignore next */{ id: 'operation.resume.view',
                defaultMessage: 'View safety checklist', description: 'Text for viewing safety checklist', __source: { fileName: _jsxFileName, lineNumber: 101 }, __self: this }))))));




  }}
;
function mapStateToProps(state, ownProps) {
  return {
    auth_token: state.authLogin.auth_token,
    username: state.authLogin.username,
    passwordCheck: state.appInfo.passwordInfo || {},
    modalStatus: state.emergency.hideModal || false,
    system_emergency: state.tabsData.system_emergency || false,
    breached: state.tabsData.breached,
    system_data: state.tabsData.system_data || null,
    fireHazard: state.fireHazardDetail };


}
function mapDispatchToProps(dispatch) {
  return {
    userRequest: function /* istanbul ignore next */userRequest(data) {dispatch( /* istanbul ignore next */(0, _userActions.userRequest)(data));},
    validatePass: function /* istanbul ignore next */validatePass(data) {dispatch( /* istanbul ignore next */(0, _validationActions.validatePassword)(data));},
    modalresetForm: function /* istanbul ignore next */modalresetForm() {dispatch( /* istanbul ignore next */(0, _validationActions.modalFormReset)());},
    resetPasswordButton: function /* istanbul ignore next */resetPasswordButton() {dispatch( /* istanbul ignore next */(0, _validationActions.resetPasswordButton)());} };

};
ResumeOperation.propTypes = {
  auth_token: /* istanbul ignore next */_react2.default.PropTypes.string,
  username: /* istanbul ignore next */_react2.default.PropTypes.string,
  passwordCheck: /* istanbul ignore next */_react2.default.PropTypes.object,
  modalStatus: /* istanbul ignore next */_react2.default.PropTypes.bool,
  system_emergency: /* istanbul ignore next */_react2.default.PropTypes.bool,
  userRequest: /* istanbul ignore next */_react2.default.PropTypes.func,
  validatePass: /* istanbul ignore next */_react2.default.PropTypes.func,
  modalresetForm: /* istanbul ignore next */_react2.default.PropTypes.func,
  system_data: /* istanbul ignore next */_react2.default.PropTypes.string,
  resetPasswordButton: /* istanbul ignore next */_react2.default.PropTypes.func }; /* istanbul ignore next */exports.default =


/* istanbul ignore next */(0, _reactRedux.connect)(mapStateToProps, mapDispatchToProps)(ResumeOperation);