/* istanbul ignore next */'use strict';Object.defineProperty(exports, "__esModule", { value: true });var _jsxFileName = '/Users/raja.d/GOR/gor.butler.ui.managerdashboard/src/containers/systemTabs/ppsConfigurationList.js'; /**
                                                                                                                                                                                                                               * Created by gaurav.m on 6/22/17.
                                                                                                                                                                                                                               */
var /* istanbul ignore next */_react = require('react'); /* istanbul ignore next */var _react2 = _interopRequireDefault(_react);
var /* istanbul ignore next */_reactRedux = require('react-redux');
var /* istanbul ignore next */_ppsConfigurationActions = require('./../../actions/ppsConfigurationActions');
var /* istanbul ignore next */_frontEndConstants = require('./../../constants/frontEndConstants');
var /* istanbul ignore next */_configConstants = require('./../../constants/configConstants');
var /* istanbul ignore next */_reactIntl = require('react-intl');
var /* istanbul ignore next */_ajaxActions = require('./../../actions/ajaxActions'); /* istanbul ignore next */function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}

class PPSList extends /* istanbul ignore next */_react2.default.Component {
    constructor(props) {
        super(props);
        this.state = {
            data: [] };


    }

    componentWillReceiveProps(nextProps) {
        if (nextProps.ppsList !== this.state.data) {
            this.setState({ data: nextProps.ppsList, selectedProfile: nextProps.selectedProfile, selectedPPS: nextProps.selectedPPS });
        }
        if (nextProps.profileCreatedAt && nextProps.profileCreatedAt !== this.state.profileCreatedAt) {
            this.setState({ profileCreatedAt: nextProps.profileCreatedAt });
            this.fetchPPSProfiles();
        }
    }

    fetchPPSProfiles() {
        /**
                         * Fetch PPS List
                         */
        let userData = {
            'url': /* istanbul ignore next */_configConstants.PPS_LIST_URL,
            'method': /* istanbul ignore next */_frontEndConstants.GET,
            'cause': /* istanbul ignore next */_frontEndConstants.FETCH_PPS_PROFILES,
            'contentType': /* istanbul ignore next */_frontEndConstants.APP_JSON,
            'accept': /* istanbul ignore next */_frontEndConstants.APP_JSON,
            'token': this.props.auth_token };

        this.props.setPPSConfigurationSpinner(true);
        this.props.makeAjaxCall(userData);
    }

    componentDidMount() {
        this.fetchPPSProfiles();
    }

    selectPPSProfile({ pps, profile }, event) {
        if (profile) {
            /**
                       * Otherwise onClick of PPS would also get called
                       */
            event.stopPropagation();
            let url = /* istanbul ignore next */_configConstants.PPS_PROFILE_URL + pps.pps_id + "?profile_name=" + profile.profile_name;
            let data = {
                'url': url,
                'method': /* istanbul ignore next */_frontEndConstants.GET,
                'cause': /* istanbul ignore next */_frontEndConstants.FETCH_PROFILE_FOR_PPS,
                'contentType': /* istanbul ignore next */_frontEndConstants.APP_JSON,
                'accept': /* istanbul ignore next */_frontEndConstants.APP_JSON,
                'token': this.props.auth_token };

            this.props.setPPSConfigurationSpinner(true);
            this.props.makeAjaxCall(data);
        } else if (this.props.selectedPPS && pps.pps_id === this.props.selectedPPS.pps_id) {
            //Already Selected PPS, Do Nothing
        } else {
            this.props.selectPPSProfileForConfiguration({ pps: pps });
        }


    }


    render() {
        let self = this;
        return (/* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'pps-list-container', __source: { fileName: _jsxFileName, lineNumber: 80 }, __self: this },
                /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ __source: { fileName: _jsxFileName, lineNumber: 81 }, __self: this },
                    /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'pps-list-header', __source: { fileName: _jsxFileName, lineNumber: 82 }, __self: this },
                        /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_reactIntl.FormattedMessage, /* istanbul ignore next */{ id: 'pps.configuration.header.text',
                            description: 'PPS Configurations',
                            defaultMessage: 'PPS Configurations', __source: { fileName: _jsxFileName, lineNumber: 83 }, __self: this })),

                    /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'pps-list', __source: { fileName: _jsxFileName, lineNumber: 87 }, __self: this },
                        this.state.data.map(function (pps) {
                            return (/* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: ['pps-list-item', pps.pps_id === self.props.selectedPPS.pps_id ? 'selected' : null].join(" "), key: pps.pps_id, onClick: self.selectPPSProfile.bind(self, { pps: pps }), __source: { fileName: _jsxFileName, lineNumber: 89 }, __self: this },
                                    /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'pps-list-item-name', __source: { fileName: _jsxFileName, lineNumber: 90 }, __self: this },
                                        "PPS-" + pps.pps_id),

                                    /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'pps-list-item-profiles', __source: { fileName: _jsxFileName, lineNumber: 93 }, __self: this },
                                        pps.pps_id === self.props.selectedPPS.pps_id && pps.pps_profiles.map(function (profile) {
                                            return (/* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'pps-profile-item', onClick: self.selectPPSProfile.bind(self, { pps, profile }),
                                                        key: profile.profile_name, __source: { fileName: _jsxFileName, lineNumber: 95 }, __self: this },
                                                    /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: [profile.profile_name === self.props.selectedProfile.profile_name ? 'selected' : '', 'pps-profile-name'].join(" "), __source: { fileName: _jsxFileName, lineNumber: 97 }, __self: this }, profile.profile_name),
                                                    /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'profile-label-container', __source: { fileName: _jsxFileName, lineNumber: 98 }, __self: this },
                                                        profile.applied && /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'span', /* istanbul ignore next */{ className: 'profile-applied-label', __source: { fileName: _jsxFileName, lineNumber: 99 }, __self: this }, /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_reactIntl.FormattedMessage, /* istanbul ignore next */{ id: 'pps.configuration.applied.text', description: 'Applied', defaultMessage: 'Applied', __source: { fileName: _jsxFileName, lineNumber: 99 }, __self: this })),
                                                        profile.requested && !profile.applied && /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'span', /* istanbul ignore next */{ className: 'profile-requested-label', __source: { fileName: _jsxFileName, lineNumber: 100 }, __self: this }, /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_reactIntl.FormattedMessage, /* istanbul ignore next */{ id: 'pps.configuration.requested.text', description: 'Requested', defaultMessage: 'Requested', __source: { fileName: _jsxFileName, lineNumber: 100 }, __self: this })))));




                                        }),
                                        pps.pps_id !== self.props.selectedPPS.pps_id && pps.pps_profiles.map(function (profile) {
                                            return profile.applied ?
                                            /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ key: profile.profile_name, __source: { fileName: _jsxFileName, lineNumber: 108 }, __self: this }, profile.profile_name, /* istanbul ignore next */' ', /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_reactIntl.FormattedMessage, /* istanbul ignore next */{ id: 'pps.configuration.profileAplied.text',
                                                    description: ' profile applied',
                                                    defaultMessage: ' profile applied', __source: { fileName: _jsxFileName, lineNumber: 108 }, __self: this })) : null;
                                        }))));





                        })))));





    }}


function mapStateToProps(state, ownProps) {
    return {
        ppsList: state.ppsConfiguration.ppsList || [],
        selectedProfile: state.ppsConfiguration.selectedProfile || {},
        selectedPPS: state.ppsConfiguration.selectedPPS || {},
        auth_token: state.authLogin.auth_token,
        profileCreatedAt: state.ppsConfiguration.profileCreatedAt };


}

var mapDispatchToProps = function mapDispatchToProps(dispatch) {
    return {
        selectPPSProfileForConfiguration: function /* istanbul ignore next */selectPPSProfileForConfiguration(data) {
            dispatch( /* istanbul ignore next */(0, _ppsConfigurationActions.selectPPSProfileForConfiguration)(data));
        },
        setPPSConfigurationSpinner: function /* istanbul ignore next */setPPSConfigurationSpinner(data) {
            dispatch( /* istanbul ignore next */(0, _ppsConfigurationActions.setPPSConfigurationSpinner)(data));
        },
        makeAjaxCall: function /* istanbul ignore next */makeAjaxCall(data) {
            dispatch( /* istanbul ignore next */(0, _ajaxActions.makeAjaxCall)(data));
        } };

}; /* istanbul ignore next */exports.default =

/* istanbul ignore next */(0, _reactRedux.connect)(mapStateToProps, mapDispatchToProps)(PPSList);