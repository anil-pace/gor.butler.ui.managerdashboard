/* istanbul ignore next */'use strict';Object.defineProperty(exports, "__esModule", { value: true });exports.AuditIssuesTooltipCell = exports.SortHeaderCell = exports.tableRenderer = exports.ActionCellPPS = exports.ActionCellAudit = exports.ResolveCell = exports.AuditStatusCell = exports.OperatingModeCell = exports.ConnectionDetailsCell = exports.StatusCell = exports.PPSComponentCell = exports.ComponentCell = exports.ProgressCell = exports.ToolTipCell = exports.AuditPackingResolveCell = exports.AuditPackingStatusCell = exports.AuditPackingQuantityCell = exports.AuditPackingSlotIdCell = exports.TextCell = exports.ActionCell = exports.DataListWrapper = exports.SortTypes = undefined;var _jsxFileName = '/Users/raja.d/GOR/gor.butler.ui.managerdashboard/src/components/commonFunctionsDataTable.js';exports.















filterIndex = filterIndex; /* istanbul ignore next */exports.




























sortData = sortData;var /* istanbul ignore next */_react = require('react'); /* istanbul ignore next */var _react2 = _interopRequireDefault(_react);var /* istanbul ignore next */_fixedDataTable = require('fixed-data-table');var /* istanbul ignore next */_reactIntl = require('react-intl');var /* istanbul ignore next */_dropdownTable = require('./dropdown/dropdownTable'); /* istanbul ignore next */var _dropdownTable2 = _interopRequireDefault(_dropdownTable);var /* istanbul ignore next */_frontEndConstants = require('../constants/frontEndConstants');var /* istanbul ignore next */_dropdown = require('./gor-dropdown-component/dropdown'); /* istanbul ignore next */var _dropdown2 = _interopRequireDefault(_dropdown);function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}function _objectWithoutProperties(obj, keys) {var target = {};for (var i in obj) {if (keys.indexOf(i) >= 0) continue;if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;target[i] = obj[i];}return target;}var SortTypes = /* istanbul ignore next */exports.SortTypes = { ASC: 'ASC', DESC: 'DESC' };function reverseSortDirection(sortDir) {return sortDir === SortTypes.DESC ? SortTypes.ASC : SortTypes.DESC;}function filterIndex(e, _dataList, filterField) {var filterBy;if (!e.target) {filterBy = e.toLowerCase();} else {filterBy = e.target.value.toLowerCase();}var size = _dataList.getSize(),data = [];var filteredIndexes = [];for (var index = 0; index < size; index++) {var getData = _dataList.getObjectAt(index);for (var i = filterField.length - 1; i >= 0; i--) {data[i] = getData[filterField[i]];if (typeof data[i] === "string" && data[i].toLowerCase().indexOf(filterBy) !== -1) {filteredIndexes.push(index);break;}}}return filteredIndexes;}var reA = /[^a-zA-Z]/g;var reN = /[^0-9]/g;function sortData(columnKey, sortDir, sortIndexes, _dataList) {
    sortIndexes.sort((indexA, indexB) => {
        var sortVal = 0,valA,valB;
        if (_dataList._data) {
            valA = _dataList._data.newData[indexA][columnKey];
            valB = _dataList._data.newData[indexB][columnKey];
        } else

        {
            valA = _dataList.newData[indexA][columnKey];
            valB = _dataList.newData[indexB][columnKey];
        }
        var AInt = parseInt(valA, 10);
        var BInt = parseInt(valB, 10);

        if (isNaN(AInt) && isNaN(BInt)) {
            var aA = valA ? valA.replace(reA, "") : "";
            var bA = valB ? valB.replace(reA, "") : "";
            if (aA === bA) {
                var aN = parseInt(valA.replace(reN, ""), 10);
                var bN = parseInt(valB.replace(reN, ""), 10);
                sortVal = aN === bN ? 0 : aN > bN ? 1 : -1;
            } else {
                sortVal = aA.localeCompare(bA);
            }
        } else if (isNaN(AInt)) {
            sortVal = 1;
        } else if (isNaN(BInt)) {
            sortVal = -1;
        } else {
            sortVal = AInt > BInt ? 1 : -1;
        }

        if (sortVal !== 0 && sortDir === SortTypes.ASC) {
            sortVal *= -1;
        }


        return sortVal;
    });
    return sortIndexes;
}


function auditTaskActions(data, index) {
    var duplicateTask = /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_reactIntl.FormattedMessage, /* istanbul ignore next */{ id: 'audit.table.duplicateTask',
        description: 'duplicateTask option for audit',
        defaultMessage: 'Duplicate task', __source: { fileName: _jsxFileName, lineNumber: 91 }, __self: this });
    var deleteRecord = /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_reactIntl.FormattedMessage, /* istanbul ignore next */{ id: 'audit.table.deleteRecord', description: 'deleteRecord option for audit',
        defaultMessage: 'Delete record', __source: { fileName: _jsxFileName, lineNumber: 94 }, __self: this });
    var cancelTask = /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_reactIntl.FormattedMessage, /* istanbul ignore next */{ id: 'audit.table.cancelTask', description: 'cancel option for task',
        defaultMessage: 'Cancel Task', __source: { fileName: _jsxFileName, lineNumber: 96 }, __self: this });
    let taskList = [
    { value: 'duplicateTask', label: duplicateTask, disabled: false },
    { value: 'deleteRecord', label: deleteRecord, disabled: false },
    { value: "cancelTask", label: cancelTask, disabled: false }];

    if (data.newData && !data.newData[index].duplicatable) {
        taskList[0].disabled = true;
    }
    if (data.newData && !data.newData[index].deletable) {
        taskList[1].disabled = true;
    }
    if (data.newData && !data.newData[index].cancellable) {
        taskList[2].disabled = true;
    }

    return taskList;
}


class DataListWrapper {
    constructor(indexMap, data) {
        this._indexMap = indexMap;
        this._data = data;
    }

    getSize() {
        return this._indexMap.length;
    }

    getObjectAt(index) {
        return this._data.getObjectAt(
        this._indexMap[index]);

    }} /* istanbul ignore next */exports.DataListWrapper = DataListWrapper;


const ActionCell = ( /* istanbul ignore next */_ref) => /* istanbul ignore next */{let rowIndex = _ref.rowIndex,data = _ref.data,columnKey = _ref.columnKey,selEdit = _ref.selEdit,selDel = _ref.selDel,mid = _ref.mid,props = _objectWithoutProperties(_ref, ['rowIndex', 'data', 'columnKey', 'selEdit', 'selDel', 'mid']);return (
        /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_fixedDataTable.Cell, /* istanbul ignore next */Object.assign({}, props, { __source: { fileName: _jsxFileName, lineNumber: 135 }, __self: undefined }),
            /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'gor-user-Logo-wrap', __source: { fileName: _jsxFileName, lineNumber: 136 }, __self: undefined },
                /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'button', /* istanbul ignore next */{ onClick: selEdit.bind( /* istanbul ignore next */undefined, columnKey, rowIndex), __source: { fileName: _jsxFileName, lineNumber: 137 }, __self: undefined },
                    /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'gor-edit-icon', __source: { fileName: _jsxFileName, lineNumber: 138 }, __self: undefined }), /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'span', /* istanbul ignore next */{ __source: { fileName: _jsxFileName, lineNumber: 138 }, __self: undefined },
                        /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_reactIntl.FormattedMessage, /* istanbul ignore next */{ id: 'commonDataTable.edit.button', description: 'edit button', defaultMessage: 'Edit', __source: { fileName: _jsxFileName, lineNumber: 139 }, __self: undefined })))),



            /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'gor-user-Logo-wrap', __source: { fileName: _jsxFileName, lineNumber: 143 }, __self: undefined },

                /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'button', /* istanbul ignore next */{ disabled: mid === data.getObjectAt(rowIndex).uid ? true : false, onClick: selDel.bind( /* istanbul ignore next */undefined, columnKey, rowIndex), __source: { fileName: _jsxFileName, lineNumber: 145 }, __self: undefined },
                    /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'gor-del-icon', __source: { fileName: _jsxFileName, lineNumber: 146 }, __self: undefined }), /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'span', /* istanbul ignore next */{ __source: { fileName: _jsxFileName, lineNumber: 146 }, __self: undefined }, /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_reactIntl.FormattedMessage, /* istanbul ignore next */{ id: 'commonDataTable.Delete.button', description: 'Delete button', defaultMessage: 'Delete', __source: { fileName: _jsxFileName, lineNumber: 146 }, __self: undefined }))))));}; /* istanbul ignore next */exports.ActionCell = ActionCell;






const TextCell = ( /* istanbul ignore next */_ref2) => {/* istanbul ignore next */let rowIndex = _ref2.rowIndex,data = _ref2.data,columnKey = _ref2.columnKey,setClass = _ref2.setClass,props = _objectWithoutProperties(_ref2, ['rowIndex', 'data', 'columnKey', 'setClass']);

    const childrenCell = /* istanbul ignore next */_react2.default.Children.map(props.children, child => {

        return data.getObjectAt(rowIndex)[props.childColumnKey] ?
        /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'span', /* istanbul ignore next */{ className: props.childrenClass, __source: { fileName: _jsxFileName, lineNumber: 158 }, __self: undefined }, child, data.getObjectAt(rowIndex)[props.childColumnKey]) :
        "";
    });
    return (/* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_fixedDataTable.Cell, /* istanbul ignore next */Object.assign({}, props, { className: data.getObjectAt(rowIndex)[setClass], __source: { fileName: _jsxFileName, lineNumber: 161 }, __self: undefined }),
            data.getObjectAt(rowIndex)[columnKey],
            childrenCell));

}; /* istanbul ignore next */exports.TextCell = TextCell;

const AuditPackingSlotIdCell = ( /* istanbul ignore next */_ref3) => {/* istanbul ignore next */let rowIndex = _ref3.rowIndex,data = _ref3.data,columnKey = _ref3.columnKey,setClass = _ref3.setClass,props = _objectWithoutProperties(_ref3, ['rowIndex', 'data', 'columnKey', 'setClass']);

    return (/* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_fixedDataTable.Cell, /* istanbul ignore next */Object.assign({}, props, { className: data.getObjectAt(rowIndex)[setClass], __source: { fileName: _jsxFileName, lineNumber: 169 }, __self: undefined }),

            /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ __source: { fileName: _jsxFileName, lineNumber: 171 }, __self: undefined },
                /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'gor-audit-resolve-packing-cell', __source: { fileName: _jsxFileName, lineNumber: 172 }, __self: undefined }, data.getObjectAt(rowIndex)[columnKey]),
                /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'gor-audit-resolve-packing-cell', __source: { fileName: _jsxFileName, lineNumber: 173 }, __self: undefined }, /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_reactIntl.FormattedMessage, /* istanbul ignore next */{ id: 'audit.table.pack.outer.label',
                        description: 'audit.table.pack.outer.label',
                        defaultMessage: 'Outer', __source: { fileName: _jsxFileName, lineNumber: 173 }, __self: undefined })),
                /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'gor-audit-resolve-packing-cell', __source: { fileName: _jsxFileName, lineNumber: 176 }, __self: undefined }, /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_reactIntl.FormattedMessage, /* istanbul ignore next */{ id: 'audit.table.pack.inner.label',
                        description: 'audit.table.pack.inner.label',
                        defaultMessage: 'Inner', __source: { fileName: _jsxFileName, lineNumber: 176 }, __self: undefined })))));



}; /* istanbul ignore next */exports.AuditPackingSlotIdCell = AuditPackingSlotIdCell;
const AuditPackingQuantityCell = ( /* istanbul ignore next */_ref4) => {/* istanbul ignore next */let rowIndex = _ref4.rowIndex,data = _ref4.data,columnKey = _ref4.columnKey,setClass = _ref4.setClass,dataIndex = _ref4.dataIndex,dataKey = _ref4.dataKey,props = _objectWithoutProperties(_ref4, ['rowIndex', 'data', 'columnKey', 'setClass', 'dataIndex', 'dataKey']);

    const outer_pack = data.getObjectAt(rowIndex)[columnKey].filter(function (packing_info) {return packing_info.type === "container_level_1";});
    const inner_pack = data.getObjectAt(rowIndex)[columnKey].filter(function (packing_info) {return packing_info.type === "container_level_2";});


    return (/* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_fixedDataTable.Cell, /* istanbul ignore next */Object.assign({}, props, { className: data.getObjectAt(rowIndex)[setClass], __source: { fileName: _jsxFileName, lineNumber: 189 }, __self: undefined }),

            /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ __source: { fileName: _jsxFileName, lineNumber: 191 }, __self: undefined },
                /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'gor-audit-resolve-packing-cell', __source: { fileName: _jsxFileName, lineNumber: 192 }, __self: undefined }),
                /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'gor-audit-resolve-packing-cell', __source: { fileName: _jsxFileName, lineNumber: 193 }, __self: undefined }, outer_pack[0][dataKey]),
                /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'gor-audit-resolve-packing-cell', __source: { fileName: _jsxFileName, lineNumber: 194 }, __self: undefined }, inner_pack[0][dataKey]))));



}; /* istanbul ignore next */exports.AuditPackingQuantityCell = AuditPackingQuantityCell;
const AuditPackingStatusCell = ( /* istanbul ignore next */_ref5) => {/* istanbul ignore next */let rowIndex = _ref5.rowIndex,data = _ref5.data,columnKey = _ref5.columnKey,setClass = _ref5.setClass,props = _objectWithoutProperties(_ref5, ['rowIndex', 'data', 'columnKey', 'setClass']);

    return (/* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_fixedDataTable.Cell, /* istanbul ignore next */Object.assign({}, props, { className: data.getObjectAt(rowIndex)[setClass], __source: { fileName: _jsxFileName, lineNumber: 201 }, __self: undefined }),

            /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ __source: { fileName: _jsxFileName, lineNumber: 203 }, __self: undefined },
                /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'gor-audit-resolve-packing-cell', __source: { fileName: _jsxFileName, lineNumber: 204 }, __self: undefined }, data.getObjectAt(rowIndex)[columnKey]),
                /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'gor-audit-resolve-packing-cell', __source: { fileName: _jsxFileName, lineNumber: 205 }, __self: undefined }),
                /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'gor-audit-resolve-packing-cell', __source: { fileName: _jsxFileName, lineNumber: 206 }, __self: undefined }))));



}; /* istanbul ignore next */exports.AuditPackingStatusCell = AuditPackingStatusCell;
const AuditPackingResolveCell = ( /* istanbul ignore next */_ref6) => {/* istanbul ignore next */let rowIndex = _ref6.rowIndex,data = _ref6.data,columnKey = _ref6.columnKey,setClass = _ref6.setClass,checkStatus = _ref6.checkStatus,screenId = _ref6.screenId,children = _ref6.children,props = _objectWithoutProperties(_ref6, ['rowIndex', 'data', 'columnKey', 'setClass', 'checkStatus', 'screenId', 'children']);
    const childrenCell = /* istanbul ignore next */_react2.default.Children.map(children,
    child => /* istanbul ignore next */_react2.default.cloneElement(child, {
        rowIndex: rowIndex }));



    return (/* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ __source: { fileName: _jsxFileName, lineNumber: 218 }, __self: undefined },
            /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ style: { height: 30, paddingTop: 15 }, __source: { fileName: _jsxFileName, lineNumber: 219 }, __self: undefined }, childrenCell),
            /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ style: { height: 30, paddingTop: 20 }, __source: { fileName: _jsxFileName, lineNumber: 220 }, __self: undefined }),
            /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ style: { height: 30, paddingTop: 20 }, __source: { fileName: _jsxFileName, lineNumber: 221 }, __self: undefined })));



}; /* istanbul ignore next */exports.AuditPackingResolveCell = AuditPackingResolveCell;



const ToolTipCell = ( /* istanbul ignore next */_ref7) => /* istanbul ignore next */{let rowIndex = _ref7.rowIndex,data = _ref7.data,columnKey = _ref7.columnKey,setClass = _ref7.setClass,callBack = _ref7.callBack,tooltipData = _ref7.tooltipData,props = _objectWithoutProperties(_ref7, ['rowIndex', 'data', 'columnKey', 'setClass', 'callBack', 'tooltipData']);return (
        /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_fixedDataTable.Cell, /* istanbul ignore next */Object.assign({}, props, { className: setClass, __source: { fileName: _jsxFileName, lineNumber: 230 }, __self: undefined }),
            data.getObjectAt(rowIndex)[columnKey],
            /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'gor-tool-tip-hover', onMouseEnter: callBack, __source: { fileName: _jsxFileName, lineNumber: 232 }, __self: undefined },
                data.getObjectAt(rowIndex)[tooltipData] && data.getObjectAt(rowIndex)[tooltipData][Object.keys(data.getObjectAt(rowIndex)[tooltipData])[0]] ?
                /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_reactIntl.FormattedMessage, /* istanbul ignore next */{ id: 'commonDataTable.attributesType.itemSelectedText', description: 'heading for attribute', values: { count: data.getObjectAt(rowIndex)[tooltipData][Object.keys(data.getObjectAt(rowIndex)[tooltipData])[0]].length }, defaultMessage: '{count} items selected', __source: { fileName: _jsxFileName, lineNumber: 234 }, __self: undefined }) :
                ""),

            data.getObjectAt(rowIndex)[tooltipData] && data.getObjectAt(rowIndex)[tooltipData][Object.keys(data.getObjectAt(rowIndex)[tooltipData])[0]] ?
            /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'gor-tooltip', __source: { fileName: _jsxFileName, lineNumber: 238 }, __self: undefined },
                /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'gor-tooltip-arrow', __source: { fileName: _jsxFileName, lineNumber: 239 }, __self: undefined }),
                /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'gor-tooltip-text-wrap', __source: { fileName: _jsxFileName, lineNumber: 240 }, __self: undefined },
                    /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'gor-tooltip-heading', __source: { fileName: _jsxFileName, lineNumber: 241 }, __self: undefined },
                        /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_reactIntl.FormattedMessage, /* istanbul ignore next */{ id: 'commonDataTable.attributesType.heading', description: 'heading for attribute', defaultMessage: 'Box Id', __source: { fileName: _jsxFileName, lineNumber: 242 }, __self: undefined })),

                    /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'gor-tooltip-datalines', __source: { fileName: _jsxFileName, lineNumber: 244 }, __self: undefined },
                        /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ __source: { fileName: _jsxFileName, lineNumber: 245 }, __self: undefined },
                            data.getObjectAt(rowIndex)[tooltipData] && data.getObjectAt(rowIndex)[tooltipData][Object.keys(data.getObjectAt(rowIndex)[tooltipData])[0]] ?
                            data.getObjectAt(rowIndex)[tooltipData][Object.keys(data.getObjectAt(rowIndex)[tooltipData])[0]].map(function (object, i) {return (/* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ key: i, __source: { fileName: _jsxFileName, lineNumber: 247 }, __self: this }, /* istanbul ignore next */' ', i + 1, /* istanbul ignore next */'. ', object, /* istanbul ignore next */' '));}) :
                            "")))) :




            ""));};


//assuming only one attributes is there in tool tip component (kerry specific)
/* istanbul ignore next */exports.ToolTipCell = ToolTipCell;

const ProgressCell = ( /* istanbul ignore next */_ref8) => /* istanbul ignore next */{let rowIndex = _ref8.rowIndex,data = _ref8.data,columnKey = _ref8.columnKey,resolved = _ref8.resolved,unresolved = _ref8.unresolved,props = _objectWithoutProperties(_ref8, ['rowIndex', 'data', 'columnKey', 'resolved', 'unresolved']);return (
        /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_fixedDataTable.Cell, /* istanbul ignore next */Object.assign({}, props, { __source: { fileName: _jsxFileName, lineNumber: 260 }, __self: undefined }),
            /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'gor-progressBar-wrap', __source: { fileName: _jsxFileName, lineNumber: 261 }, __self: undefined },
                /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'gor-progressBar', style: { width: data.getObjectAt(rowIndex)[columnKey] * 1.4 }, __source: { fileName: _jsxFileName, lineNumber: 262 }, __self: undefined }),
                data.getObjectAt(rowIndex)[resolved] && data.getObjectAt(rowIndex)[unresolved] ?
                /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'gor-resolve-head', __source: { fileName: _jsxFileName, lineNumber: 264 }, __self: undefined },
                    /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_reactIntl.FormattedMessage, /* istanbul ignore next */{ id: 'audit.resolveUnresolve', description: 'resolveUnresolve issue for audit table', defaultMessage: '{resolvedCount} issues, {unresolvedCount} unresolved', values: { resolvedCount: data.getObjectAt(rowIndex)[resolved], unresolvedCount: data.getObjectAt(rowIndex)[unresolved] }, __source: { fileName: _jsxFileName, lineNumber: 265 }, __self: undefined })) :
                "",


                data.getObjectAt(rowIndex)[resolved] && !data.getObjectAt(rowIndex)[unresolved] ?
                /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'gor-resolve-head', __source: { fileName: _jsxFileName, lineNumber: 270 }, __self: undefined },
                    /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_reactIntl.FormattedMessage, /* istanbul ignore next */{ id: 'audit.resolveIssues', description: 'resolve issue for audit table', defaultMessage: '{resolvedCount} issues', values: { resolvedCount: data.getObjectAt(rowIndex)[resolved] }, __source: { fileName: _jsxFileName, lineNumber: 271 }, __self: undefined })) :
                "",


                !data.getObjectAt(rowIndex)[resolved] && data.getObjectAt(rowIndex)[unresolved] ?
                /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'gor-resolve-head', __source: { fileName: _jsxFileName, lineNumber: 276 }, __self: undefined },
                    /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_reactIntl.FormattedMessage, /* istanbul ignore next */{ id: 'audit.unresolveIssues', description: 'unresolve issue for audit table', defaultMessage: '{unresolvedCount} {unresolvedCount,plural, one {unresolved issue} other{unresolved issues}}', values: { unresolvedCount: data.getObjectAt(rowIndex)[unresolved] ? data.getObjectAt(rowIndex)[unresolved] : "0" }, __source: { fileName: _jsxFileName, lineNumber: 277 }, __self: undefined })) :
                ""),



            /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'gorProgressBarLabel', __source: { fileName: _jsxFileName, lineNumber: 282 }, __self: undefined },
                data.getObjectAt(rowIndex)[columnKey], /* istanbul ignore next */'%')));}; /* istanbul ignore next */exports.ProgressCell = ProgressCell;




const ComponentCell = ( /* istanbul ignore next */_ref9) => /* istanbul ignore next */{let rowIndex = _ref9.rowIndex,data = _ref9.data,columnKey = _ref9.columnKey,checkState = _ref9.checkState,checked = _ref9.checked,props = _objectWithoutProperties(_ref9, ['rowIndex', 'data', 'columnKey', 'checkState', 'checked']);return (

        /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_fixedDataTable.Cell, /* istanbul ignore next */Object.assign({}, props, { __source: { fileName: _jsxFileName, lineNumber: 290 }, __self: undefined }), /* istanbul ignore next */' ', /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'input', /* istanbul ignore next */{ type: 'checkbox', checked: checked[rowIndex] ? true : false, onChange: checkState.bind( /* istanbul ignore next */undefined, columnKey, rowIndex, data.getObjectAt(rowIndex)[columnKey]), __source: { fileName: _jsxFileName, lineNumber: 290 }, __self: undefined }),
            data.getObjectAt(rowIndex)[columnKey]));}; /* istanbul ignore next */exports.ComponentCell = ComponentCell;


const PPSComponentCell = ( /* istanbul ignore next */_ref10) => /* istanbul ignore next */{let rowIndex = _ref10.rowIndex,data = _ref10.data,columnKey = _ref10.columnKey,checkState = _ref10.checkState,checked = _ref10.checked,props = _objectWithoutProperties(_ref10, ['rowIndex', 'data', 'columnKey', 'checkState', 'checked']);return (

        /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_fixedDataTable.Cell, /* istanbul ignore next */Object.assign({}, props, { __source: { fileName: _jsxFileName, lineNumber: 296 }, __self: undefined }), /* istanbul ignore next */' ', /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'input', /* istanbul ignore next */{ type: 'checkbox', checked: data.getObjectAt(rowIndex)["isChecked"], onChange: checkState.bind( /* istanbul ignore next */undefined, props.checkboxColumn, rowIndex), __source: { fileName: _jsxFileName, lineNumber: 296 }, __self: undefined }),
            data.getObjectAt(rowIndex)[columnKey]));}; /* istanbul ignore next */exports.PPSComponentCell = PPSComponentCell;


const StatusCell = ( /* istanbul ignore next */_ref11) => /* istanbul ignore next */{let rowIndex = _ref11.rowIndex,data = _ref11.data,columnKey = _ref11.columnKey,statusKey = _ref11.statusKey,props = _objectWithoutProperties(_ref11, ['rowIndex', 'data', 'columnKey', 'statusKey']);return (
        /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_fixedDataTable.Cell, /* istanbul ignore next */Object.assign({}, props, { className: data.getObjectAt(rowIndex)[statusKey], __source: { fileName: _jsxFileName, lineNumber: 301 }, __self: undefined }),
            data.getObjectAt(rowIndex)[columnKey]));}; /* istanbul ignore next */exports.StatusCell = StatusCell;



const ConnectionDetailsCell = ( /* istanbul ignore next */_ref12) => {/* istanbul ignore next */let rowIndex = _ref12.rowIndex,data = _ref12.data,columnKey = _ref12.columnKey,subColumnKey = _ref12.subColumnKey,setClass = _ref12.setClass,props = _objectWithoutProperties(_ref12, ['rowIndex', 'data', 'columnKey', 'subColumnKey', 'setClass']);

    const children = /* istanbul ignore next */_react2.default.Children.map(props.children, (child, idx) => {
        return (
            /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'connectionDetails', __source: { fileName: _jsxFileName, lineNumber: 310 }, __self: undefined }, child, /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'span', /* istanbul ignore next */{ __source: { fileName: _jsxFileName, lineNumber: 310 }, __self: undefined }, idx === 0 ? data.getObjectAt(rowIndex)[columnKey] : data.getObjectAt(rowIndex)[subColumnKey])));

    });

    return (/* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_fixedDataTable.Cell, /* istanbul ignore next */Object.assign({}, props, { __source: { fileName: _jsxFileName, lineNumber: 314 }, __self: undefined }),
            children));

}; /* istanbul ignore next */exports.ConnectionDetailsCell = ConnectionDetailsCell;

const OperatingModeCell = ( /* istanbul ignore next */_ref13) => {/* istanbul ignore next */let rowIndex = _ref13.rowIndex,data = _ref13.data,columnKey = _ref13.columnKey,subColumnKey = _ref13.subColumnKey,classKey = _ref13.classKey,setClass = _ref13.setClass,props = _objectWithoutProperties(_ref13, ['rowIndex', 'data', 'columnKey', 'subColumnKey', 'classKey', 'setClass']);

    const children = /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: "actionTriggered " + data.getObjectAt(rowIndex)[classKey], __source: { fileName: _jsxFileName, lineNumber: 321 }, __self: undefined },
        /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'action-left', __source: { fileName: _jsxFileName, lineNumber: 322 }, __self: undefined },
            /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'span', /* istanbul ignore next */{ className: "action-icon", __source: { fileName: _jsxFileName, lineNumber: 323 }, __self: undefined })),

        /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'action-right', __source: { fileName: _jsxFileName, lineNumber: 325 }, __self: undefined },
            /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'p', /* istanbul ignore next */{ className: 'action-triggered', __source: { fileName: _jsxFileName, lineNumber: 326 }, __self: undefined }, data.getObjectAt(rowIndex)[columnKey]),
            /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'p', /* istanbul ignore next */{ className: 'sensor-triggered', __source: { fileName: _jsxFileName, lineNumber: 327 }, __self: undefined }, data.getObjectAt(rowIndex)[subColumnKey])));



    return (/* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_fixedDataTable.Cell, /* istanbul ignore next */Object.assign({}, props, { __source: { fileName: _jsxFileName, lineNumber: 331 }, __self: undefined }),
            children));

}; /* istanbul ignore next */exports.OperatingModeCell = OperatingModeCell;

const AuditStatusCell = ( /* istanbul ignore next */_ref14) => /* istanbul ignore next */{let rowIndex = _ref14.rowIndex,data = _ref14.data,columnKey = _ref14.columnKey,statusKey = _ref14.statusKey,descriptionKey = _ref14.descriptionKey,props = _objectWithoutProperties(_ref14, ['rowIndex', 'data', 'columnKey', 'statusKey', 'descriptionKey']);return (
        /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_fixedDataTable.Cell, /* istanbul ignore next */Object.assign({}, props, { __source: { fileName: _jsxFileName, lineNumber: 337 }, __self: undefined }),
            /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_fixedDataTable.Cell, /* istanbul ignore next */{ className: [data.getObjectAt(rowIndex)[statusKey]], style: { padding: 0 }, __source: { fileName: _jsxFileName, lineNumber: 338 }, __self: undefined },
                /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ __source: { fileName: _jsxFileName, lineNumber: 339 }, __self: undefined },
                    data.getObjectAt(rowIndex)[columnKey])),



            descriptionKey && data.getObjectAt(rowIndex)[descriptionKey] ? /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'gor-audit-cancelling-text', __source: { fileName: _jsxFileName, lineNumber: 344 }, __self: undefined }, data.getObjectAt(rowIndex)[descriptionKey]) : null));}; /* istanbul ignore next */exports.AuditStatusCell = AuditStatusCell;





const ResolveCell = ( /* istanbul ignore next */_ref15) => /* istanbul ignore next */{let rowIndex = _ref15.rowIndex,data = _ref15.data,columnKey = _ref15.columnKey,checkStatus = _ref15.checkStatus,screenId = _ref15.screenId,props = _objectWithoutProperties(_ref15, ['rowIndex', 'data', 'columnKey', 'checkStatus', 'screenId']);return (
        /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_fixedDataTable.Cell, /* istanbul ignore next */Object.assign({}, props, { __source: { fileName: _jsxFileName, lineNumber: 351 }, __self: undefined }),
            screenId === /* istanbul ignore next */_frontEndConstants.VIEW_AUDIT_ISSUES ?
            /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ style: screenId === /* istanbul ignore next */_frontEndConstants.VIEW_AUDIT_ISSUES || data.getObjectAt(rowIndex)[/* istanbul ignore next */_frontEndConstants.GOR_AUDIT_STATUS_DATA] !== /* istanbul ignore next */_frontEndConstants.AUDIT_PENDING_APPROVAL ? { opacity: 0.5 } : { opacity: 1 }, __source: { fileName: _jsxFileName, lineNumber: 353 }, __self: undefined },
                /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'input', /* istanbul ignore next */{ type: 'radio', name: data.getObjectAt(rowIndex)["auditLineId"], disabled: data.getObjectAt(rowIndex)[/* istanbul ignore next */_frontEndConstants.GOR_AUDIT_STATUS_DATA] !== /* istanbul ignore next */_frontEndConstants.AUDIT_PENDING_APPROVAL ? true : false,
                    onChange: checkStatus.bind( /* istanbul ignore next */undefined, rowIndex, /* istanbul ignore next */_frontEndConstants.AUDIT_APPROVED, data.getObjectAt(rowIndex)["auditLineId"]), checked: data.getObjectAt(rowIndex)[/* istanbul ignore next */_frontEndConstants.GOR_AUDIT_STATUS_DATA] === /* istanbul ignore next */_frontEndConstants.RESOLVED ? true : false, __source: { fileName: _jsxFileName, lineNumber: 354 }, __self: undefined }),
                /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_reactIntl.FormattedMessage, /* istanbul ignore next */{ id: 'commonDataTable.resolveAudit.approve', description: 'resolve button', defaultMessage: 'Approve ', __source: { fileName: _jsxFileName, lineNumber: 356 }, __self: undefined }),
                /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'input', /* istanbul ignore next */{ type: 'radio', name: data.getObjectAt(rowIndex)["auditLineId"], disabled: data.getObjectAt(rowIndex)[/* istanbul ignore next */_frontEndConstants.GOR_AUDIT_STATUS_DATA] !== /* istanbul ignore next */_frontEndConstants.AUDIT_PENDING_APPROVAL ? true : false,
                    onChange: checkStatus.bind( /* istanbul ignore next */undefined, rowIndex, /* istanbul ignore next */_frontEndConstants.AUDIT_REJECTED, data.getObjectAt(rowIndex)["auditLineId"]), checked: data.getObjectAt(rowIndex)[/* istanbul ignore next */_frontEndConstants.GOR_AUDIT_STATUS_DATA] === /* istanbul ignore next */_frontEndConstants.REJECTED || data.getObjectAt(rowIndex)[/* istanbul ignore next */_frontEndConstants.GOR_AUDIT_STATUS_DATA] === /* istanbul ignore next */_frontEndConstants.AUDIT_LINE_REAUDITED, __source: { fileName: _jsxFileName, lineNumber: 357 }, __self: undefined }),
                /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_reactIntl.FormattedMessage, /* istanbul ignore next */{ id: 'commonDataTable.resolveAudit.reject', description: 'resolve button', defaultMessage: 'Reject', __source: { fileName: _jsxFileName, lineNumber: 359 }, __self: undefined })) :

            /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ style: screenId === /* istanbul ignore next */_frontEndConstants.VIEW_AUDIT_ISSUES || data.getObjectAt(rowIndex)[/* istanbul ignore next */_frontEndConstants.GOR_AUDIT_STATUS_DATA] !== /* istanbul ignore next */_frontEndConstants.AUDIT_PENDING_APPROVAL ? { opacity: 0.5 } : { opacity: 1 }, __source: { fileName: _jsxFileName, lineNumber: 361 }, __self: undefined },
                /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'input', /* istanbul ignore next */{ type: 'radio', name: data.getObjectAt(rowIndex)["auditLineId"], defaultChecked: data.getObjectAt(rowIndex)[/* istanbul ignore next */_frontEndConstants.GOR_AUDIT_STATUS_DATA] === /* istanbul ignore next */_frontEndConstants.RESOLVED ? true : false, disabled: data.getObjectAt(rowIndex)[/* istanbul ignore next */_frontEndConstants.GOR_AUDIT_STATUS_DATA] !== /* istanbul ignore next */_frontEndConstants.AUDIT_PENDING_APPROVAL ? true : false,
                    onChange: checkStatus.bind( /* istanbul ignore next */undefined, rowIndex, /* istanbul ignore next */_frontEndConstants.AUDIT_APPROVED, data.getObjectAt(rowIndex)["auditLineId"]), __source: { fileName: _jsxFileName, lineNumber: 362 }, __self: undefined }),
                /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_reactIntl.FormattedMessage, /* istanbul ignore next */{ id: 'commonDataTable.resolveAudit.approve', description: 'resolve button', defaultMessage: 'Approve ', __source: { fileName: _jsxFileName, lineNumber: 364 }, __self: undefined }),
                /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'input', /* istanbul ignore next */{ type: 'radio', name: data.getObjectAt(rowIndex)["auditLineId"], defaultChecked: data.getObjectAt(rowIndex)[/* istanbul ignore next */_frontEndConstants.GOR_AUDIT_STATUS_DATA] === /* istanbul ignore next */_frontEndConstants.REJECTED || data.getObjectAt(rowIndex)[/* istanbul ignore next */_frontEndConstants.GOR_AUDIT_STATUS_DATA] === /* istanbul ignore next */_frontEndConstants.AUDIT_LINE_REAUDITED, disabled: data.getObjectAt(rowIndex)[/* istanbul ignore next */_frontEndConstants.GOR_AUDIT_STATUS_DATA] !== /* istanbul ignore next */_frontEndConstants.AUDIT_PENDING_APPROVAL ? true : false,
                    onChange: checkStatus.bind( /* istanbul ignore next */undefined, rowIndex, /* istanbul ignore next */_frontEndConstants.AUDIT_REJECTED, data.getObjectAt(rowIndex)["auditLineId"]), __source: { fileName: _jsxFileName, lineNumber: 365 }, __self: undefined }),
                /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_reactIntl.FormattedMessage, /* istanbul ignore next */{ id: 'commonDataTable.resolveAudit.reject', description: 'resolve button', defaultMessage: 'Reject', __source: { fileName: _jsxFileName, lineNumber: 367 }, __self: undefined }))));}; /* istanbul ignore next */exports.ResolveCell = ResolveCell;




const ActionCellAudit = ( /* istanbul ignore next */_ref16) => /* istanbul ignore next */{let rowIndex = _ref16.rowIndex,data = _ref16.data,columnKey = _ref16.columnKey,handleAudit = _ref16.handleAudit,manageAuditTask = _ref16.manageAuditTask,clickDropDown = _ref16.clickDropDown,showBox = _ref16.showBox,placeholderText = _ref16.placeholderText,resolveflag = _ref16.resolveflag,resolveAudit = _ref16.resolveAudit,checkIssues = _ref16.checkIssues,props = _objectWithoutProperties(_ref16, ['rowIndex', 'data', 'columnKey', 'handleAudit', 'manageAuditTask', 'clickDropDown', 'showBox', 'placeholderText', 'resolveflag', 'resolveAudit', 'checkIssues']);return (
        /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_fixedDataTable.Cell, /* istanbul ignore next */Object.assign({}, props, { __source: { fileName: _jsxFileName, lineNumber: 373 }, __self: undefined }),
            /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'gor-audit-actions-button', __source: { fileName: _jsxFileName, lineNumber: 374 }, __self: undefined },
                data.getObjectAt(rowIndex)[showBox] ?
                /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'button', /* istanbul ignore next */{ className: 'gor-add-btn', onClick: handleAudit.bind( /* istanbul ignore next */undefined, columnKey, rowIndex), __source: { fileName: _jsxFileName, lineNumber: 376 }, __self: undefined },
                    /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_reactIntl.FormattedMessage, /* istanbul ignore next */{ id: 'commonDataTable.startAudit.button', description: 'start button', defaultMessage: 'Start audit', __source: { fileName: _jsxFileName, lineNumber: 377 }, __self: undefined })) :
                '',
                data.getObjectAt(rowIndex)[resolveflag] ?
                /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'button', /* istanbul ignore next */{ className: 'gor-add-btn', onClick: resolveAudit.bind( /* istanbul ignore next */undefined, columnKey, rowIndex, /* istanbul ignore next */_frontEndConstants.APPROVE_AUDIT, data), __source: { fileName: _jsxFileName, lineNumber: 380 }, __self: undefined },
                    /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_reactIntl.FormattedMessage, /* istanbul ignore next */{ id: 'commonDataTable.resolveAudit.button', description: 'resolve button', defaultMessage: 'Resolve', __source: { fileName: _jsxFileName, lineNumber: 381 }, __self: undefined })) :
                '',
                data.getObjectAt(rowIndex)[checkIssues] ?
                /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'button', /* istanbul ignore next */{ className: 'gor-resolve-button', onClick: resolveAudit.bind( /* istanbul ignore next */undefined, columnKey, rowIndex, /* istanbul ignore next */_frontEndConstants.VIEW_AUDIT_ISSUES, data), __source: { fileName: _jsxFileName, lineNumber: 384 }, __self: undefined },
                    /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_reactIntl.FormattedMessage, /* istanbul ignore next */{ id: 'commonDataTable.viewIssues.button', description: 'viewIssues button', defaultMessage: 'View issues', __source: { fileName: _jsxFileName, lineNumber: 385 }, __self: undefined })) :
                ''),

            /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'gor-audit-actions-drop', __source: { fileName: _jsxFileName, lineNumber: 388 }, __self: undefined },
                /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_dropdown2.default, /* istanbul ignore next */{ placeholder: placeholderText, noBorder: true, labelIcon: "gor-action-audit-icon", options: auditTaskActions(data, rowIndex), onSelectHandler: manageAuditTask.bind( /* istanbul ignore next */undefined, rowIndex), resetOnSelect: true, __source: { fileName: _jsxFileName, lineNumber: 389 }, __self: undefined }))));}; /* istanbul ignore next */exports.ActionCellAudit = ActionCellAudit;






class ActionCellPPS extends /* istanbul ignore next */_react2.default.Component {
    constructor(props) {
        super(props);
    }
    /**
       * The method will return
       * the profile name of applied profile
       * that need to be displayed
       * as the placeholder of action dropdown.
       * @param data
       * @param index
       * @returns {string}
       */
    ppsProfilePlaceHolder(data, index) {
        let applied_profile = "";
        if (!data.getObjectAt(index)) {
            return applied_profile;
        }
        try {
            applied_profile = data.getObjectAt(index).profiles.filter(function (profile) {
                return profile.applied;
            })[0].profile_name;
        } catch (ex) {

        }



        return applied_profile;

    }

    /**
       * The method will return
       * the list of profiles
       * need to be shown in the option
       * of available profiles that can be
       * applied.
       * @param data
       * @param index
       */
    availablePPSProfiles(data, index) {
        let profiles = data.getObjectAt(index).profiles.map(function (profile) {
            profile.value = profile.profile_name;
            // profile.label = <div key={profile.profile_name} className="pps-list-available-profile">
            //     <div className="profile-name">{profile.profile_name}</div>
            //     {profile.applied && <div className="applied-status">V</div>}</div>

            profile.label = profile.profile_name;
            return profile;
        });


        return profiles;
    }

    render() {
        let self = this;
        if (self.props.data.getObjectAt(self.props.rowIndex)) {
            let placeholder = self.ppsProfilePlaceHolder(self.props.data, self.props.rowIndex);
            let options = self.availablePPSProfiles(self.props.data, self.props.rowIndex);
            let forced_close_pps = self.props.data.getObjectAt(self.props.rowIndex).statusClass === /* istanbul ignore next */_frontEndConstants.PPS_STATUS_FCLOSE;
            let any_requested_profile = self.props.data.getObjectAt(self.props.rowIndex)[self.props.columnKey].filter(function (profile) {
                return profile.requested;
            }).length > 0;
            return (/* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_fixedDataTable.Cell, /* istanbul ignore next */{ __source: { fileName: _jsxFileName, lineNumber: 461 }, __self: this },
                    /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'gor-pps-profile-drop', __source: { fileName: _jsxFileName, lineNumber: 462 }, __self: this },
                        /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_dropdown2.default, /* istanbul ignore next */{ disabled: any_requested_profile || forced_close_pps, noBorder: true, labelIcon: "gor-action-pps-icon", listItemIcon: "gor-tick-icon", placeholder: placeholder, options: options,
                            onSelectHandler: self.props.confirmApplyProfile.bind(self, self.props.data.getObjectAt(self.props.rowIndex)['ppsId']),
                            resetOnSelect: true, __source: { fileName: _jsxFileName, lineNumber: 463 }, __self: this })),

                    any_requested_profile &&
                    /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'span', /* istanbul ignore next */{ className: 'requestedProfileTxt', __source: { fileName: _jsxFileName, lineNumber: 468 }, __self: this }, /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_reactIntl.FormattedMessage, /* istanbul ignore next */{ id: 'pps.configuration.profile.requestedText',
                            description: 'requested profile for PPS',
                            defaultMessage: 'Requested Profile: {requestedProfile}',
                            values: {
                                requestedProfile: self.props.data.getObjectAt(self.props.rowIndex)[self.props.columnKey].filter(function (profile) {
                                    return profile.requested;
                                })[0].profile_name }, __source: { fileName: _jsxFileName, lineNumber: 468 }, __self: this }))));




        } else {
            return null;
        }

    }} /* istanbul ignore next */exports.ActionCellPPS = ActionCellPPS;



class tableRenderer {
    constructor(size) {
        this.size = size;
        this.newData = [];
    }

    getObjectAt(index) {
        if (index < 0 || index > this.size) {
            return undefined;
        }
        return this.newData[index];
    }

    getAll() {
        if (this.newData.length < this.size) {
            for (var i = 0; i < this.size; i++) {
                this.getObjectAt(i);
            }
        }
        return this.newData.slice();
    }

    getSize() {
        return this.size;
    }} /* istanbul ignore next */exports.tableRenderer = tableRenderer;


class SortHeaderCell extends /* istanbul ignore next */_react2.default.Component {
    constructor(props) {
        super(props);

        this._onSortChange = this._onSortChange.bind(this);
    }

    render() {/* istanbul ignore next */var _props =
        this.props,sortDir = _props.sortDir,children = _props.children,onSortChange = _props.onSortChange,props = _objectWithoutProperties(_props, ['sortDir', 'children', 'onSortChange']);
        return (
            /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_fixedDataTable.Cell, /* istanbul ignore next */Object.assign({}, props, { __source: { fileName: _jsxFileName, lineNumber: 524 }, __self: this }),
                /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'a', /* istanbul ignore next */{ onClick: this._onSortChange, __source: { fileName: _jsxFileName, lineNumber: 525 }, __self: this },
                    children,
                    /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'sortIcon', __source: { fileName: _jsxFileName, lineNumber: 527 }, __self: this }, sortDir ? sortDir === SortTypes.DESC ? '↑' : '↓' : '', /* istanbul ignore next */' '))));



    }

    _onSortChange(e) {
        e.preventDefault();
        this.props.onSortChange(
        this.props.columnKey,
        this.props.sortDir ?
        reverseSortDirection(this.props.sortDir) :
        SortTypes.DESC);

    }} /* istanbul ignore next */exports.SortHeaderCell = SortHeaderCell;


const AuditIssuesTooltipCell = ( /* istanbul ignore next */_ref17) => /* istanbul ignore next */{let rowIndex = _ref17.rowIndex,data = _ref17.data,columnKey = _ref17.columnKey,setClass = _ref17.setClass,callBack = _ref17.callBack,resolved = _ref17.resolved,unresolved = _ref17.unresolved,checkState = _ref17.checkState,checked = _ref17.checked,props = _objectWithoutProperties(_ref17, ['rowIndex', 'data', 'columnKey', 'setClass', 'callBack', 'resolved', 'unresolved', 'checkState', 'checked']);return (
        /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_fixedDataTable.Cell, /* istanbul ignore next */Object.assign({}, props, { __source: { fileName: _jsxFileName, lineNumber: 545 }, __self: undefined }),

            /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'input', /* istanbul ignore next */{ type: 'checkbox', checked: data.getObjectAt(rowIndex)["isChecked"], onChange: checkState.bind( /* istanbul ignore next */undefined, props.checkboxColumn, rowIndex), __source: { fileName: _jsxFileName, lineNumber: 547 }, __self: undefined }),

            data.getObjectAt(rowIndex)[unresolved] || data.getObjectAt(rowIndex).infoIcon ?

            /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'gor-tool-tip-hover', style: { fontSize: 16, color: 'black' }, __source: { fileName: _jsxFileName, lineNumber: 551 }, __self: undefined },
                data.getObjectAt(rowIndex)[columnKey], /* istanbul ignore next */' ', /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'span', /* istanbul ignore next */{ className: 'gor-audit-info-icon', onMouseEnter: callBack, __source: { fileName: _jsxFileName, lineNumber: 552 }, __self: undefined })) :
            data.getObjectAt(rowIndex)[columnKey],



            data.getObjectAt(rowIndex)[resolved] && data.getObjectAt(rowIndex)[unresolved] ?
            /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'gor-tooltip', __source: { fileName: _jsxFileName, lineNumber: 558 }, __self: undefined },
                /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'gor-tooltip-arrow', __source: { fileName: _jsxFileName, lineNumber: 559 }, __self: undefined }),
                /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'gor-tooltip-text-wrap', __source: { fileName: _jsxFileName, lineNumber: 560 }, __self: undefined },
                    /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'gor-tooltip-heading', __source: { fileName: _jsxFileName, lineNumber: 561 }, __self: undefined },
                        /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_reactIntl.FormattedMessage, /* istanbul ignore next */{ id: 'audit.resolveUnresolve.tooltip.header',
                            description: 'resolveUnresolve issue for audit table',
                            defaultMessage: '{resolvedCount} audit lines, {unresolvedCount} audit lines',
                            values: {
                                resolvedCount: data.getObjectAt(rowIndex)[resolved],
                                unresolvedCount: data.getObjectAt(rowIndex)[unresolved] }, __source: { fileName: _jsxFileName, lineNumber: 562 }, __self: undefined })),


                    /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'gor-tooltip-datalines', __source: { fileName: _jsxFileName, lineNumber: 570 }, __self: undefined },
                        /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ __source: { fileName: _jsxFileName, lineNumber: 571 }, __self: undefined },

                            /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_reactIntl.FormattedMessage, /* istanbul ignore next */{ id: 'audit.resolveUnresolve.tooltip.content',
                                description: 'unresolve issue for audit table',
                                defaultMessage: ' Approve or reject audit line with issues',
                                values: { unresolvedCount: data.getObjectAt(rowIndex)[unresolved] ? data.getObjectAt(rowIndex)[unresolved] : "0" }, __source: { fileName: _jsxFileName, lineNumber: 573 }, __self: undefined }))))) :





            "",


            !data.getObjectAt(rowIndex)[resolved] && data.getObjectAt(rowIndex)[unresolved] ?
            /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'gor-tooltip', __source: { fileName: _jsxFileName, lineNumber: 586 }, __self: undefined },
                /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'gor-tooltip-arrow', __source: { fileName: _jsxFileName, lineNumber: 587 }, __self: undefined }),
                /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'gor-tooltip-text-wrap', __source: { fileName: _jsxFileName, lineNumber: 588 }, __self: undefined },
                    /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'gor-tooltip-heading', __source: { fileName: _jsxFileName, lineNumber: 589 }, __self: undefined },
                        /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_reactIntl.FormattedMessage, /* istanbul ignore next */{ id: 'audit.unresolveIssues.tooltip.header',
                            description: 'unresolve issue for audit table',
                            defaultMessage: '{unresolvedCount} {unresolvedCount,plural, one {unresolved audit line} other{unresolved audit lines}}',
                            values: { unresolvedCount: data.getObjectAt(rowIndex)[unresolved] ? data.getObjectAt(rowIndex)[unresolved] : "0" }, __source: { fileName: _jsxFileName, lineNumber: 590 }, __self: undefined })),

                    /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'gor-tooltip-datalines', __source: { fileName: _jsxFileName, lineNumber: 595 }, __self: undefined },
                        /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ __source: { fileName: _jsxFileName, lineNumber: 596 }, __self: undefined },
                            /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_reactIntl.FormattedMessage, /* istanbul ignore next */{ id: 'audit.unresolveIssues.tooltip.content',
                                description: 'unresolve issue for audit table',
                                defaultMessage: ' Approve or reject audit line with issues',
                                values: { unresolvedCount: data.getObjectAt(rowIndex)[unresolved] ? data.getObjectAt(rowIndex)[unresolved] : "0" }, __source: { fileName: _jsxFileName, lineNumber: 597 }, __self: undefined }))))) :





            "",


            !data.getObjectAt(rowIndex)[unresolved] && data.getObjectAt(rowIndex).infoIcon === 'rejected' ?
            /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'gor-tooltip', __source: { fileName: _jsxFileName, lineNumber: 610 }, __self: undefined },
                /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'gor-tooltip-arrow', __source: { fileName: _jsxFileName, lineNumber: 611 }, __self: undefined }),
                /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'gor-tooltip-text-wrap', __source: { fileName: _jsxFileName, lineNumber: 612 }, __self: undefined },
                    /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'gor-tooltip-heading', __source: { fileName: _jsxFileName, lineNumber: 613 }, __self: undefined },
                        /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_reactIntl.FormattedMessage, /* istanbul ignore next */{ id: 'audit.rejected.tooltip.header',
                            description: 'rejected issue for audit table',
                            defaultMessage: '{rejected_lines}/{total_lines} {rejected_lines,plural, one {audit line} other{audit lines}} were rejected',
                            values: { total_lines: data.getObjectAt(rowIndex).auditInfo.total_lines, rejected_lines: data.getObjectAt(rowIndex).auditInfo.rejected_lines }, __source: { fileName: _jsxFileName, lineNumber: 614 }, __self: undefined })),

                    /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'gor-tooltip-datalines', __source: { fileName: _jsxFileName, lineNumber: 619 }, __self: undefined },
                        /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ __source: { fileName: _jsxFileName, lineNumber: 620 }, __self: undefined },
                            /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_reactIntl.FormattedMessage, /* istanbul ignore next */{ id: 'audit.rejected.tooltip.content',
                                description: 'Re-audit the rejected audit lines',
                                defaultMessage: ' Re-audit the rejected audit lines', __source: { fileName: _jsxFileName, lineNumber: 621 }, __self: undefined }))))) :





            "",



            data.getObjectAt(rowIndex).infoIcon === "created" ?
            /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'gor-tooltip', __source: { fileName: _jsxFileName, lineNumber: 634 }, __self: undefined },
                /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'gor-tooltip-arrow', __source: { fileName: _jsxFileName, lineNumber: 635 }, __self: undefined }),
                /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'gor-tooltip-text-wrap', __source: { fileName: _jsxFileName, lineNumber: 636 }, __self: undefined },
                    /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'gor-tooltip-heading', __source: { fileName: _jsxFileName, lineNumber: 637 }, __self: undefined },
                        /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_reactIntl.FormattedMessage, /* istanbul ignore next */{ id: 'audit.created.tooltip.header',
                            description: 'resolveUnresolve issue for audit table',
                            defaultMessage: 'Assign PPS to start audit task', __source: { fileName: _jsxFileName, lineNumber: 638 }, __self: undefined })),

                    /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'gor-tooltip-datalines', __source: { fileName: _jsxFileName, lineNumber: 642 }, __self: undefined },
                        /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ __source: { fileName: _jsxFileName, lineNumber: 643 }, __self: undefined },

                            /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_reactIntl.FormattedMessage, /* istanbul ignore next */{ id: 'audit.created.tooltip.content',
                                description: 'unresolve issue for audit table',
                                defaultMessage: ' Click on "Start Audit" to assign PPS', __source: { fileName: _jsxFileName, lineNumber: 645 }, __self: undefined }))))) :




            ""));}; /* istanbul ignore next */exports.AuditIssuesTooltipCell = AuditIssuesTooltipCell;