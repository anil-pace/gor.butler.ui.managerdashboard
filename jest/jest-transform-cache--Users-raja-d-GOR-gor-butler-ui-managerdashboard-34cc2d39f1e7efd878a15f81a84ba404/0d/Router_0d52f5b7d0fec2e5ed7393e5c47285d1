/* istanbul ignore next */'use strict';Object.defineProperty(exports, "__esModule", { value: true });var _jsxFileName = '/Users/raja.d/GOR/gor.butler.ui.managerdashboard/src/components/Router.js'; /**
                                                                                                                                                                                                      * Importing Router dependencies
                                                                                                                                                                                                      */
var /* istanbul ignore next */_react = require('react'); /* istanbul ignore next */var _react2 = _interopRequireDefault(_react);
var /* istanbul ignore next */_reactRedux = require('react-redux');
var /* istanbul ignore next */_reactRouter = require('react-router');
var /* istanbul ignore next */_loginAction = require('../actions/loginAction');
var /* istanbul ignore next */_OverviewTab = require('../containers/OverviewTab'); /* istanbul ignore next */var _OverviewTab2 = _interopRequireDefault(_OverviewTab);
var /* istanbul ignore next */_tabSelectAction = require('../actions/tabSelectAction');
var /* istanbul ignore next */_inventoryActions = require('../actions/inventoryActions');
var /* istanbul ignore next */_auditActions = require('../actions/auditActions');
var /* istanbul ignore next */_orderListActions = require('../actions/orderListActions');
var /* istanbul ignore next */_spinnerAction = require('../actions/spinnerAction');
var /* istanbul ignore next */_appConstants = require('../constants/appConstants');
var /* istanbul ignore next */_frontEndConstants = require('../constants/frontEndConstants');
var /* istanbul ignore next */_i18n = require('../utilities/i18n');
var /* istanbul ignore next */_reactIntlRedux = require('react-intl-redux'); /* istanbul ignore next */function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}

class Routes extends /* istanbul ignore next */_react2.default.Component {


    _requireAuth(nextState, replace) {
        if (sessionStorage.getItem('auth_token')) {
            let subTab = sessionStorage.getItem('subTab') || null;
            let nextView = sessionStorage.getItem('nextUrl') || 'md';
            let selTab = sessionStorage.getItem('selTab') || /* istanbul ignore next */_frontEndConstants.TAB_ROUTE_MAP[/* istanbul ignore next */_frontEndConstants.OVERVIEW];
            this.props.loginRequest();
            this.props.tabSelected(selTab);
            this.props.subTabSelected(subTab);
            switch (selTab.toUpperCase()) {
                case /* istanbul ignore next */_frontEndConstants.INVENTORY:
                    this.props.setInventorySpinner(true);
                    break;

                case /* istanbul ignore next */_appConstants.AUDIT:
                    this.props.setAuditSpinner(true);
                    break;
                case /* istanbul ignore next */_appConstants.USER:
                    this.props.setUserSpinner(true);
                    break;

                default:
                    this.props.setInventorySpinner(false);
                    this.props.setAuditSpinner(false);
                    this.props.setUserSpinner(false);}


            if (subTab !== null) {
                switch (subTab.toUpperCase()) {
                    case /* istanbul ignore next */_appConstants.ORDERLIST:
                        this.props.setOrderListSpinner(true);
                        break;

                    case /* istanbul ignore next */_appConstants.WAVES.toUpperCase():
                        this.props.setWavesSpinner(true);
                        break;

                    case /* istanbul ignore next */_appConstants.BUTLERBOTS.toUpperCase():
                        this.props.setButlerSpinner(true);
                        break;

                    case /* istanbul ignore next */_appConstants.PPS.toUpperCase():
                        this.props.setPpsSpinner(true);
                        break;

                    case /* istanbul ignore next */_appConstants.CHARGING.toUpperCase():
                        this.props.setCsSpinner(true);
                        break;

                    case /* istanbul ignore next */_appConstants.WAVES.toUpperCase():
                        this.props.setWavesSpinner(true);
                        break;


                    default:
                        this.props.setOrderListSpinner(false);
                        this.props.setWavesSpinner(false);
                        this.props.setButlerSpinner(false);
                        this.props.setPpsSpinner(false);
                        this.props.setCsSpinner(false);
                        this.props.setWavesSpinner(false);}



            }
            replace(nextView);
        }
    }

    _updateLanguage() {
        var sessionLocale = sessionStorage.getItem('localLanguage');

        sessionLocale = sessionLocale.substring(0, 2); // since we need only the first two characters fo the locale.
        let data = {
            locale: sessionLocale,
            messages: /* istanbul ignore next */_i18n.translationMessages[sessionLocale] };

        sessionStorage.setItem('localLanguage', sessionLocale);
        this.props.updateIntl(data);
    }


    _refreshPage(nextState, replace) {
        if (sessionStorage.getItem('auth_token')) {
            this._requireAuth.call(this, nextState, replace);
        }

        if (sessionStorage.getItem('localLanguage')) {
            this._updateLanguage.call(this);
        }
    }

    _handleNavigationChanges(context, replace) {
        let pathname = context.location.pathname;

        pathname = pathname.substring(1, pathname.length);
        let navigator = pathname.split("/");
        sessionStorage.setItem("selTab", navigator[0]);
        sessionStorage.setItem("nextView", pathname);
        if (navigator.length > 1) {
            sessionStorage.setItem("subTab", navigator[1]);
            this.props.subTabSelected(navigator[1]);
        } else {
            sessionStorage.removeItem("subTab");
            this.props.subTabSelected(null);
        }

        this.props.tabSelected(navigator[0]);


    }

    render() {
        return (
            /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_reactRouter.Router, /* istanbul ignore next */{ history: /* istanbul ignore next */_reactRouter.hashHistory, __source: { fileName: _jsxFileName, lineNumber: 135 }, __self: this },
                /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_reactRouter.Route, /* istanbul ignore next */{ onEnter: this._handleNavigationChanges.bind(this), name: 'default', path: '/',
                    getComponent: (location, callback) => {
                        require.ensure([], function (require) {
                            callback(null, require('../App').default);
                        }, "defaultApp");
                    }, __source: { fileName: _jsxFileName, lineNumber: 136 }, __self: this }),

                /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_reactRouter.Route, /* istanbul ignore next */{ name: 'login', path: '/login', onEnter: this._refreshPage.bind(this),
                    getComponent: (location, callback) => {
                        require.ensure([], function (require) {
                            callback(null, require('./login/login').default);
                        }, "login");
                    }, __source: { fileName: _jsxFileName, lineNumber: 143 }, __self: this }),

                /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_reactRouter.Route, /* istanbul ignore next */{ onEnter: this._handleNavigationChanges.bind(this), name: 'app', path: '/md',
                        getComponent: (location, callback) => {
                            require.ensure([], function (require) {
                                callback(null, require('../App').default);
                            }, "app");
                        }, __source: { fileName: _jsxFileName, lineNumber: 150 }, __self: this },

                    /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_reactRouter.IndexRoute, /* istanbul ignore next */{
                        getComponent: (location, callback) => {
                            require.ensure([], function (require) {
                                callback(null, require('../containers/OverviewTab').default);
                            }, "indexOverview");
                        }, __source: { fileName: _jsxFileName, lineNumber: 157 }, __self: this }),

                    /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_reactRouter.Route, /* istanbul ignore next */{ onEnter: this._handleNavigationChanges.bind(this), name: 'system', path: '/system', className: 'gorResponsive',
                            getComponent: (location, callback) => {
                                require.ensure([], function (require) {
                                    callback(null, require('../containers/systemTab').default);
                                }, "system");
                            }, __source: { fileName: _jsxFileName, lineNumber: 164 }, __self: this },

                        /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_reactRouter.IndexRoute, /* istanbul ignore next */{
                            getComponent: (location, callback) => {
                                require.ensure([], function (require) {
                                    callback(null, require('../containers/systemTabs/sysOverview').default);
                                }, "defaultSystem");
                            }, __source: { fileName: _jsxFileName, lineNumber: 171 }, __self: this }),

                        /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_reactRouter.Route, /* istanbul ignore next */{ onEnter: this._handleNavigationChanges.bind(this), name: 'sysOverview', path: '/system/sysOverview',
                            getComponent: (location, callback) => {
                                require.ensure([], function (require) {
                                    callback(null, require('../containers/systemTabs/sysOverview').default);
                                }, "sysOverview");
                            }, __source: { fileName: _jsxFileName, lineNumber: 178 }, __self: this }),

                        /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_reactRouter.Route, /* istanbul ignore next */{ onEnter: this._handleNavigationChanges.bind(this), name: 'butlerbots', path: '/system/butlerbots',
                            getComponent: (location, callback) => {
                                require.ensure([], function (require) {
                                    callback(null, require('../containers/systemTabs/butlerbotTab').default);
                                }, "butlerBots");
                            }, __source: { fileName: _jsxFileName, lineNumber: 185 }, __self: this }),


                        /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_reactRouter.Route, /* istanbul ignore next */{ onEnter: this._handleNavigationChanges.bind(this), name: 'pps', path: '/system/pps',
                            getComponent: (location, callback) => {
                                require.ensure([], function (require) {
                                    callback(null, require('../containers/systemTabs/ppsTab').default);
                                }, "pps");
                            }, __source: { fileName: _jsxFileName, lineNumber: 193 }, __self: this }),


                        /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_reactRouter.Route, /* istanbul ignore next */{ onEnter: this._handleNavigationChanges.bind(this), name: 'chargingstation', path: '/system/chargingstation',
                            getComponent: (location, callback) => {
                                require.ensure([], function (require) {
                                    callback(null, require('../containers/systemTabs/chargingStationsTab').default);
                                }, "chargingStation");
                            }, __source: { fileName: _jsxFileName, lineNumber: 201 }, __self: this }),

                        /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_reactRouter.Route, /* istanbul ignore next */{ onEnter: this._handleNavigationChanges.bind(this), name: 'sysControllers', path: '/system/sysControllers',
                            getComponent: (location, callback) => {
                                require.ensure([], function (require) {
                                    callback(null, require('../containers/systemTabs/sysControllers').default);
                                }, "sysControllers");
                            }, __source: { fileName: _jsxFileName, lineNumber: 208 }, __self: this }),


                        /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_reactRouter.Route, /* istanbul ignore next */{ onEnter: this._handleNavigationChanges.bind(this), name: 'ppsConfiguration', path: '/system/ppsConfiguration',
                            getComponent: (location, callback) => {
                                require.ensure([], function (require) {
                                    callback(null, require('../containers/systemTabs/ppsConfigurationTab').default);
                                }, "ppsConfiguration");
                            }, __source: { fileName: _jsxFileName, lineNumber: 216 }, __self: this })),



                    /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_reactRouter.Route, /* istanbul ignore next */{ onEnter: this._handleNavigationChanges.bind(this), name: 'orders', path: '/orders',
                            getComponent: (location, callback) => {
                                require.ensure([], function (require) {
                                    callback(null, require('../containers/ordersTab').default);
                                }, "orders");
                            }, __source: { fileName: _jsxFileName, lineNumber: 225 }, __self: this },

                        /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_reactRouter.IndexRoute, /* istanbul ignore next */{
                            getComponent: (location, callback) => {
                                require.ensure([], function (require) {
                                    callback(null, require('../containers/orderTab/waveTab').default);
                                }, "indexWave");
                            }, __source: { fileName: _jsxFileName, lineNumber: 232 }, __self: this }),


                        /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_reactRouter.Route, /* istanbul ignore next */{ onEnter: this._handleNavigationChanges.bind(this), name: 'waves', path: '/orders/waves',
                            getComponent: (location, callback) => {
                                require.ensure([], function (require) {
                                    callback(null, require('../containers/orderTab/waveTab').default);
                                }, "waveTab");
                            }, __source: { fileName: _jsxFileName, lineNumber: 240 }, __self: this }),


                        /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_reactRouter.Route, /* istanbul ignore next */{ onEnter: this._handleNavigationChanges.bind(this), name: 'orderlist', path: '/orders/orderlist',
                            getComponent: (location, callback) => {
                                require.ensure([], function (require) {
                                    callback(null, require('../containers/orderTab/orderListTab').default);
                                }, "orderList");
                            }, __source: { fileName: _jsxFileName, lineNumber: 248 }, __self: this })),




                    /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_reactRouter.Route, /* istanbul ignore next */{ onEnter: this._handleNavigationChanges.bind(this), name: 'audit', path: '/audit',
                        getComponent: (location, callback) => {
                            require.ensure([], function (require) {
                                callback(null, require('../containers/auditTab').default);
                            }, "audit");

                        }, __source: { fileName: _jsxFileName, lineNumber: 258 }, __self: this }),


                    /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_reactRouter.Route, /* istanbul ignore next */{ onEnter: this._handleNavigationChanges.bind(this), name: 'inventory', path: '/inventory',
                        getComponent: (location, callback) => {
                            require.ensure([], function (require) {
                                callback(null, require('../containers/inventoryTab').default);
                            }, "inventory");


                        }, __source: { fileName: _jsxFileName, lineNumber: 267 }, __self: this }),


                    /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_reactRouter.Route, /* istanbul ignore next */{ onEnter: this._handleNavigationChanges.bind(this), name: 'audit', path: '/audit',
                        getComponent: (location, callback) => {
                            require.ensure([], function (require) {
                                callback(null, require('../containers/auditTab').default);
                            }, "audit");
                        }, __source: { fileName: _jsxFileName, lineNumber: 277 }, __self: this }),


                    /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_reactRouter.Route, /* istanbul ignore next */{ onEnter: this._handleNavigationChanges.bind(this), name: 'users', path: '/users',
                        getComponent: (location, callback) => {
                            require.ensure([], function (require) {
                                callback(null, require('../containers/userTab/usersTab').default);
                            }, "users");
                        }, __source: { fileName: _jsxFileName, lineNumber: 285 }, __self: this }),


                    /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_reactRouter.Route, /* istanbul ignore next */{ onEnter: this._handleNavigationChanges.bind(this), name: 'utilities', path: '/utilities',
                        getComponent: (location, callback) => {
                            require.ensure([], function (require) {
                                callback(null, require('../containers/utilityTab').default);
                            }, "utilities");
                        }, __source: { fileName: _jsxFileName, lineNumber: 293 }, __self: this }),


                    /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_reactRouter.Route, /* istanbul ignore next */{ onEnter: this._handleNavigationChanges.bind(this), name: 'overview', path: '/overview',
                        getComponent: (location, callback) => {
                            require.ensure([], function (require) {
                                callback(null, require('../containers/OverviewTab').default);
                            }, "overview");
                        }, __source: { fileName: _jsxFileName, lineNumber: 301 }, __self: this }),



                    /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_reactRouter.Route, /* istanbul ignore next */{ onEnter: this._handleNavigationChanges.bind(this), name: 'reports', path: '/reports',
                            getComponent: (location, callback) => {
                                require.ensure([], function (require) {
                                    callback(null, require('../containers/reportsTab/reportsTab.js').default);
                                }, "reports");
                            }, __source: { fileName: _jsxFileName, lineNumber: 310 }, __self: this },

                        /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_reactRouter.IndexRoute, /* istanbul ignore next */{
                            getComponent: (location, callback) => {
                                require.ensure([], function (require) {
                                    callback(null, require('../containers/reportsTab/operationsLogTab.js').default);
                                }, "defaultReports");
                            }, __source: { fileName: _jsxFileName, lineNumber: 317 }, __self: this }),


                        /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_reactRouter.Route, /* istanbul ignore next */{ onEnter: this._handleNavigationChanges.bind(this), name: 'operationsLog', path: '/reports/operationsLog',
                            getComponent: (location, callback) => {
                                require.ensure([], function (require) {
                                    callback(null, require('../containers/reportsTab/operationsLogTab.js').default);
                                }, "operationsLogTab");
                            }, __source: { fileName: _jsxFileName, lineNumber: 325 }, __self: this }),

                        /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_reactRouter.Route, /* istanbul ignore next */{ onEnter: this._handleNavigationChanges.bind(this), name: 'downloadReport', path: '/reports/downloadReport',
                            getComponent: (location, callback) => {
                                require.ensure([], function (require) {
                                    callback(null, require('../containers/reportsTab/downloadReportTab.js').default);
                                }, "downloadReportTab");
                            }, __source: { fileName: _jsxFileName, lineNumber: 332 }, __self: this })))));








    }}




var mapDispatchToProps = function mapDispatchToProps(dispatch) {
    return {
        updateIntl: function /* istanbul ignore next */updateIntl(params) {
            dispatch( /* istanbul ignore next */(0, _reactIntlRedux.updateIntl)(params));
        },
        loginRequest: function /* istanbul ignore next */loginRequest() {
            dispatch( /* istanbul ignore next */(0, _loginAction.loginRequest)());
        },
        tabSelected: function /* istanbul ignore next */tabSelected(data) {
            dispatch( /* istanbul ignore next */(0, _tabSelectAction.tabSelected)(data));
        },
        subTabSelected: function /* istanbul ignore next */subTabSelected(data) {
            dispatch( /* istanbul ignore next */(0, _tabSelectAction.subTabSelected)(data));
        },
        setInventorySpinner: function /* istanbul ignore next */setInventorySpinner(data) {
            dispatch( /* istanbul ignore next */(0, _inventoryActions.setInventorySpinner)(data));
        },
        setAuditSpinner: function /* istanbul ignore next */setAuditSpinner(data) {
            dispatch( /* istanbul ignore next */(0, _auditActions.setAuditSpinner)(data));
        },
        setButlerSpinner: function /* istanbul ignore next */setButlerSpinner(data) {
            dispatch( /* istanbul ignore next */(0, _spinnerAction.setButlerSpinner)(data));
        },
        setOrderListSpinner: function /* istanbul ignore next */setOrderListSpinner(data) {
            dispatch( /* istanbul ignore next */(0, _orderListActions.setOrderListSpinner)(data));
        },
        setWavesSpinner: function /* istanbul ignore next */setWavesSpinner(data) {
            dispatch( /* istanbul ignore next */(0, _spinnerAction.setWavesSpinner)(data));
        },
        setPpsSpinner: function /* istanbul ignore next */setPpsSpinner(data) {
            dispatch( /* istanbul ignore next */(0, _spinnerAction.setPpsSpinner)(data));
        },
        setCsSpinner: function /* istanbul ignore next */setCsSpinner(data) {
            dispatch( /* istanbul ignore next */(0, _spinnerAction.setCsSpinner)(data));
        },
        setUserSpinner: function /* istanbul ignore next */setUserSpinner(data) {
            dispatch( /* istanbul ignore next */(0, _spinnerAction.setUserSpinner)(data));
        } };


};

function mapStateToProps(state, ownProps) {

    return {
        config: state.config || {} };

} /* istanbul ignore next */exports.default =


/* istanbul ignore next */(0, _reactRedux.connect)(mapStateToProps, mapDispatchToProps)(Routes);