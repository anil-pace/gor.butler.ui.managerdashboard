/* istanbul ignore next */'use strict';Object.defineProperty(exports, "__esModule", { value: true });var _jsxFileName = '/Users/raja.d/GOR/gor.butler.ui.managerdashboard/src/containers/auditTab/resolveAudit.js';var /* istanbul ignore next */_react = require('react'); /* istanbul ignore next */var _react2 = _interopRequireDefault(_react);
var /* istanbul ignore next */_reactIntl = require('react-intl');
var /* istanbul ignore next */_reactRedux = require('react-redux');
var /* istanbul ignore next */_auditActions = require('../../actions/auditActions');
var /* istanbul ignore next */_frontEndConstants = require('../../constants/frontEndConstants');
var /* istanbul ignore next */_configConstants = require('../../constants/configConstants');
var /* istanbul ignore next */_fixedDataTable = require('fixed-data-table');
var /* istanbul ignore next */_commonFunctionsDataTable = require('../../components/commonFunctionsDataTable');
var /* istanbul ignore next */_backEndConstants = require('../../constants/backEndConstants');
var /* istanbul ignore next */_Spinner = require('../../components/spinner/Spinner'); /* istanbul ignore next */var _Spinner2 = _interopRequireDefault(_Spinner);
var /* istanbul ignore next */_spinnerAction = require('../../actions/spinnerAction'); /* istanbul ignore next */function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}
class ResolveAudit extends /* istanbul ignore next */_react2.default.Component {
  constructor(props)
  {
    super(props);
    var data = this.props.auditLines.auditlines || [];
    this._dataList = new /* istanbul ignore next */_commonFunctionsDataTable.tableRenderer(data ? data.length : 0);
    this._dataList.newData = data;
    this.state = {
      auditDataList: this._dataList,
      checkedState: [],
      totalMismatch: 0 };

  }

  componentWillReceiveProps(nextProps) {

    var data = nextProps.auditLines.auditlines || [],processedData;
    processedData = this._processData(data, nextProps);
    this._dataList = new /* istanbul ignore next */_commonFunctionsDataTable.tableRenderer(data ? data.length : 0);
    this._dataList.newData = processedData;
    this.state = {
      auditDataList: this._dataList,
      checkedState: [],
      totalMismatch: 0 };

  }
  _removeThisModal() {
    this.props.removeModal();
  }

  componentDidMount() {
    let url = /* istanbul ignore next */_configConstants.AUDIT_URL + "/" + this.props.auditId + /* istanbul ignore next */_configConstants.PENDING_ORDERLINES;
    let paginationData = {
      'url': url,
      'method': /* istanbul ignore next */_frontEndConstants.GET,
      'cause': /* istanbul ignore next */_frontEndConstants.AUDIT_RESOLVE_LINES,
      'token': this.props.auth_token,
      'contentType': /* istanbul ignore next */_frontEndConstants.APP_JSON };

    this.props.setResolveAuditSpinner(true);
    this.props.getAuditOrderLines(paginationData);
  }


  _processData(auditLines, nProps) {
    var data = auditLines,processedData = [],auditData = {},totalMismatch = 0;
    for (var i = data.length - 1; i >= 0; i--) {
      auditData.actual_quantity = data[i].actual_quantity;
      auditData.expected_quantity = data[i].expected_quantity;
      totalMismatch = data[i].expected_quantity - data[i].actual_quantity + totalMismatch;
      auditData.slot_id = data[i].slot_id;
      auditData.auditLineId = data[i].auditline_id;
      if (data[i].status) {
        /**
                            * Data from the backend for the comparison.
                            */
        auditData[/* istanbul ignore next */_frontEndConstants.GOR_AUDIT_STATUS_DATA] = data[i].status;
      }
      if (this.context.intl.formatMessage( /* istanbul ignore next */_backEndConstants.stringConfig[data[i].status])) {
        auditData.status = this.context.intl.formatMessage( /* istanbul ignore next */_backEndConstants.stringConfig[data[i].status]);
      } else
      {
        auditData.status = data[i].status;
      }
      if (data[i].pdfa_audit_attributes && auditLines[i].pdfa_audit_attributes[Object.keys(auditLines[0].pdfa_audit_attributes)]) {
        auditData.attributeDetail = auditLines[i].pdfa_audit_attributes[Object.keys(auditLines[0].pdfa_audit_attributes)]; //assuming only one attributes is there as of now (kerry specific) 
      }
      if (data[i].anamoly_info) {
        auditData.anamoly_info = data[i].anamoly_info;
      }
      if (data[i].k_deep_audit) {
        auditData.k_deep_audit = data[i].k_deep_audit;
      }
      processedData.push(auditData);
      auditData = {};

    }
    this.setState({ totalMismatch: totalMismatch });
    return processedData;
  }

  _checkAuditStatus(rowIndex, state, auditLineId) {
    var newAuditLineId;
    if (this.props.auditMethod === /* istanbul ignore next */_frontEndConstants.AUDIT_BY_PDFA) {
      var newAuditLineIndex = this.actualMapping[auditLineId]; //in case of pdfa rowindex wont work so using actual index
      newAuditLineId = this.state.auditDataList.newData[newAuditLineIndex].auditLineId;
    } else
    {
      newAuditLineId = this.state.auditDataList.newData[rowIndex].auditLineId;
    }
    var checkedAudit = { "response": state, "auditline_id": newAuditLineId },auditIndexed = false;
    var tempState = this.state.checkedState.slice();
    for (var i = tempState.length - 1; i >= 0; i--) {
      if (tempState[i].auditline_id === newAuditLineId) {
        tempState[i].response = state;
        auditIndexed = true;
        break;
      }
    }
    if (!auditIndexed) {
      tempState.push(checkedAudit);
    }
    this.setState({ checkedState: tempState });
  }

  _confirmIssues() {

    // since we also need the username for the request generated.
    // hence getting the username from the state and then sending 
    // the same during the request.

    var userName = this.props.username || null;
    var auditConfirmDetail = { data: {
        username: userName,
        auditlines: this.state.checkedState } };


    var url = /* istanbul ignore next */_configConstants.AUDIT_URL + /* istanbul ignore next */_configConstants.AUDIT_ANAMOLY;
    let paginationData = {
      'url': url,
      'method': /* istanbul ignore next */_frontEndConstants.POST,
      'cause': /* istanbul ignore next */_frontEndConstants.AUDIT_RESOLVE_CONFIRMED,
      'token': this.props.auth_token,
      'contentType': /* istanbul ignore next */_frontEndConstants.APP_JSON,
      'accept': /* istanbul ignore next */_frontEndConstants.APP_JSON,
      'formdata': auditConfirmDetail };

    this.props.resolveAuditLines(paginationData);

    this._removeThisModal();
  }

  _resolveIssueByPdfa() {
    var slotIdHashMap = {};
    var auditDataLine = this.state.auditDataList.newData;
    var slotIdGrouping = {},slotIdData = { slotId: "", slotIdDataLine: [] },actualMapping = {};
    for (var i = auditDataLine.length - 1; i >= 0; i--) {
      var columnSlotId = auditDataLine[i].slot_id;
      if (slotIdHashMap[columnSlotId] >= 0) {
        slotIdGrouping[columnSlotId].slotIdDataLine.push(auditDataLine[i]);
        actualMapping[auditDataLine[i].auditLineId] = i;
      } else

      {
        slotIdHashMap[columnSlotId] = i;
        slotIdData.slotId = auditDataLine[i].slot_id;
        slotIdData.slotIdDataLine.push(auditDataLine[i]);
        slotIdGrouping[columnSlotId] = slotIdData;
        actualMapping[auditDataLine[i].auditLineId] = i;
        slotIdData = { slotId: "", slotIdDataLine: [] };
      }
    }
    this.actualMapping = actualMapping; //due to grouping, actual mapping is lost. hence storing here
    return slotIdGrouping;
  }

  _renderPDFAtable(data) {
    var pdfaResolveTable = [],resolveTable;
    var pdfaHeader = /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_fixedDataTable.Table, /* istanbul ignore next */Object.assign({
        rowHeight: /* istanbul ignore next */_frontEndConstants.GOR_USER_TABLE_HEADER_HEIGHT,
        rowsCount: 0,
        headerHeight: /* istanbul ignore next */_frontEndConstants.GOR_USER_TABLE_HEADER_HEIGHT,
        width: /* istanbul ignore next */_frontEndConstants.GOR_AUDIT_RESOLVE_WIDTH,
        height: /* istanbul ignore next */_frontEndConstants.GOR_USER_TABLE_HEADER_HEIGHT },
      this.props, { __source: { fileName: _jsxFileName, lineNumber: 170 }, __self: this }),
      /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_fixedDataTable.Column, /* istanbul ignore next */{ header: /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'gorAuditHeader', __source: { fileName: _jsxFileName, lineNumber: 177 }, __self: this },
          /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_reactIntl.FormattedMessage, /* istanbul ignore next */{ id: 'resolveAudit.table.batchID', description: 'batch id Column', defaultMessage: 'BOX ID.', __source: { fileName: _jsxFileName, lineNumber: 178 }, __self: this })),
        width: 220, __source: { fileName: _jsxFileName, lineNumber: 177 }, __self: this }),
      /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_fixedDataTable.Column, /* istanbul ignore next */{ header: /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'gorAuditHeader', __source: { fileName: _jsxFileName, lineNumber: 180 }, __self: this },
          /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_reactIntl.FormattedMessage, /* istanbul ignore next */{ id: 'resolveAudit.table.expectedItems', description: 'expectedItems Column', defaultMessage: 'EXPECTED QUANTITY', __source: { fileName: _jsxFileName, lineNumber: 181 }, __self: this })),
        width: 220, __source: { fileName: _jsxFileName, lineNumber: 180 }, __self: this }),
      /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_fixedDataTable.Column, /* istanbul ignore next */{ header: /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'gorAuditHeader', __source: { fileName: _jsxFileName, lineNumber: 183 }, __self: this },
          /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_reactIntl.FormattedMessage, /* istanbul ignore next */{ id: 'resolveAudit.table.actualQuantity', description: 'actualQuantity Column', defaultMessage: 'ACTUAL QUANTITY', __source: { fileName: _jsxFileName, lineNumber: 184 }, __self: this })),
        width: 220, __source: { fileName: _jsxFileName, lineNumber: 183 }, __self: this }),
      /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_fixedDataTable.Column, /* istanbul ignore next */{ header: /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'gorAuditHeader', __source: { fileName: _jsxFileName, lineNumber: 186 }, __self: this },
          /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_reactIntl.FormattedMessage, /* istanbul ignore next */{ id: 'resolveAudit.table.STATUS', description: 'status Column', defaultMessage: 'STATUS', __source: { fileName: _jsxFileName, lineNumber: 187 }, __self: this })),
        width: 220, __source: { fileName: _jsxFileName, lineNumber: 186 }, __self: this }),
      /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_fixedDataTable.Column, /* istanbul ignore next */{ header: /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'gorAuditHeader', __source: { fileName: _jsxFileName, lineNumber: 189 }, __self: this },
          /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_reactIntl.FormattedMessage, /* istanbul ignore next */{ id: 'resolveAudit.table.resolve', description: 'resolve Column', defaultMessage: 'RESOLVE', __source: { fileName: _jsxFileName, lineNumber: 190 }, __self: this })),
        width: 220, __source: { fileName: _jsxFileName, lineNumber: 189 }, __self: this }));


    pdfaResolveTable.push(pdfaHeader);
    for (var key in data) {
      if (data.hasOwnProperty(key)) {
        var auditDataList = new /* istanbul ignore next */_commonFunctionsDataTable.tableRenderer(data[key].slotIdDataLine ? data[key].slotIdDataLine.length : 0);
        var inSlot = /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_reactIntl.FormattedMessage, /* istanbul ignore next */{ id: 'audit.inSlot.text', defaultMessage: 'In slot ', __source: { fileName: _jsxFileName, lineNumber: 198 }, __self: this });
        var containerHeight = auditDataList.getSize() * /* istanbul ignore next */_frontEndConstants.GOR_USER_TABLE_HEADER_HEIGHT + 2;
        auditDataList.newData = data[key].slotIdDataLine;
        resolveTable = /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ __source: { fileName: _jsxFileName, lineNumber: 201 }, __self: this },
          /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'gor-auditresolve-pdfa-slot-header', __source: { fileName: _jsxFileName, lineNumber: 202 }, __self: this },
            /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'span', /* istanbul ignore next */{ __source: { fileName: _jsxFileName, lineNumber: 203 }, __self: this }, inSlot, /* istanbul ignore next */' '),
            /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'span', /* istanbul ignore next */{ __source: { fileName: _jsxFileName, lineNumber: 204 }, __self: this }, /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'b', /* istanbul ignore next */{ __source: { fileName: _jsxFileName, lineNumber: 204 }, __self: this }, key, /* istanbul ignore next */':'))),

          /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_fixedDataTable.Table, /* istanbul ignore next */Object.assign({
              rowHeight: /* istanbul ignore next */_frontEndConstants.GOR_USER_TABLE_HEADER_HEIGHT,
              rowsCount: auditDataList.getSize(),
              headerHeight: 0,
              width: /* istanbul ignore next */_frontEndConstants.GOR_AUDIT_RESOLVE_WIDTH,
              height: containerHeight },
            this.props, { __source: { fileName: _jsxFileName, lineNumber: 206 }, __self: this }),
            /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_fixedDataTable.Column, /* istanbul ignore next */{ columnKey: 'attributeDetail', cell: /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_commonFunctionsDataTable.TextCell, /* istanbul ignore next */{ data: auditDataList, __source: { fileName: _jsxFileName, lineNumber: 213 }, __self: this }), width: 220, __source: { fileName: _jsxFileName, lineNumber: 213 }, __self: this }),
            /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_fixedDataTable.Column, /* istanbul ignore next */{ columnKey: 'expected_quantity', cell: /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_commonFunctionsDataTable.TextCell, /* istanbul ignore next */{ data: auditDataList, __source: { fileName: _jsxFileName, lineNumber: 214 }, __self: this }), width: 220, __source: { fileName: _jsxFileName, lineNumber: 214 }, __self: this }),
            /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_fixedDataTable.Column, /* istanbul ignore next */{ columnKey: 'actual_quantity', cell: /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_commonFunctionsDataTable.TextCell, /* istanbul ignore next */{ data: auditDataList, setClass: /* istanbul ignore next */_frontEndConstants.GOR_BREACHED_LINES, __source: { fileName: _jsxFileName, lineNumber: 215 }, __self: this }, /* istanbul ignore next */' '), width: 220, __source: { fileName: _jsxFileName, lineNumber: 215 }, __self: this }),
            /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_fixedDataTable.Column, /* istanbul ignore next */{ columnKey: 'status', cell: /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_commonFunctionsDataTable.TextCell, /* istanbul ignore next */{ data: auditDataList, __source: { fileName: _jsxFileName, lineNumber: 216 }, __self: this }, /* istanbul ignore next */' '), width: 220, __source: { fileName: _jsxFileName, lineNumber: 216 }, __self: this }),
            /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_fixedDataTable.Column, /* istanbul ignore next */{ columnKey: 'resolve', cell: /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_commonFunctionsDataTable.ResolveCell, /* istanbul ignore next */{ data: auditDataList, checkStatus: this._checkAuditStatus.bind(this), screenId: this.props.screenId, __source: { fileName: _jsxFileName, lineNumber: 217 }, __self: this }, /* istanbul ignore next */' '), width: 220, __source: { fileName: _jsxFileName, lineNumber: 217 }, __self: this })));


        pdfaResolveTable.push(resolveTable);
      }
    }
    return pdfaResolveTable;

  }

  _renderSkutable() {
    var resolveTable = /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ __source: { fileName: _jsxFileName, lineNumber: 228 }, __self: this }),headerHeight = /* istanbul ignore next */_frontEndConstants.GOR_USER_TABLE_HEADER_HEIGHT,minHeight = /* istanbul ignore next */_frontEndConstants.GOR_AUDIT_RESOLVE_MIN_HEIGHT; /* istanbul ignore next */var
    auditDataList = this.state.auditDataList;
    var missingAudit = auditDataList.getSize();
    var screenId = this.props.screenId;
    var containerHeight = (missingAudit ? missingAudit : 0) * headerHeight + headerHeight > minHeight ? (missingAudit ? missingAudit : 0) * headerHeight + headerHeight : minHeight;
    if (auditDataList.newData.length > 0 && auditDataList.newData[0].k_deep_audit) {
      containerHeight = (missingAudit ? missingAudit : 0) * 3 * headerHeight + headerHeight > minHeight ? (missingAudit ? missingAudit : 0) * 3 * headerHeight + headerHeight : minHeight;
      resolveTable = /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ __source: { fileName: _jsxFileName, lineNumber: 235 }, __self: this },
        /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_fixedDataTable.Table, /* istanbul ignore next */Object.assign({
            rowHeight: 3 * headerHeight,
            rowsCount: auditDataList.getSize(),
            headerHeight: headerHeight,
            onColumnResizeEndCallback: this._onColumnResizeEndCallback,
            isColumnResizing: false,
            width: /* istanbul ignore next */_frontEndConstants.GOR_AUDIT_RESOLVE_WIDTH,
            height: containerHeight },
          this.props, { __source: { fileName: _jsxFileName, lineNumber: 236 }, __self: this }),
          /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_fixedDataTable.Column, /* istanbul ignore next */{
            columnKey: 'slot_id',
            header: /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'gorAuditHeader', __source: { fileName: _jsxFileName, lineNumber: 247 }, __self: this }, /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_reactIntl.FormattedMessage, /* istanbul ignore next */{ id: 'resolveAudit.table.slot',
                description: 'slot id Column',
                defaultMessage: 'SLOT ID', __source: { fileName: _jsxFileName, lineNumber: 247 }, __self: this })),
            cell: /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_commonFunctionsDataTable.AuditPackingSlotIdCell, /* istanbul ignore next */{ data: auditDataList, __source: { fileName: _jsxFileName, lineNumber: 250 }, __self: this }),
            width: 220, __source: { fileName: _jsxFileName, lineNumber: 245 }, __self: this }),

          /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_fixedDataTable.Column, /* istanbul ignore next */{
            columnKey: 'anamoly_info',
            header: /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'gorAuditHeader', __source: { fileName: _jsxFileName, lineNumber: 255 }, __self: this }, /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_reactIntl.FormattedMessage, /* istanbul ignore next */{ id: 'resolveAudit.table.expectedItems',
                description: 'expectedItems Column',
                defaultMessage: 'EXPECTED QUANTITY', __source: { fileName: _jsxFileName, lineNumber: 255 }, __self: this })),

            cell: /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_commonFunctionsDataTable.AuditPackingQuantityCell, /* istanbul ignore next */{ dataKey: 'expected_quantity', data: auditDataList, __source: { fileName: _jsxFileName, lineNumber: 259 }, __self: this }),
            width: 220, __source: { fileName: _jsxFileName, lineNumber: 253 }, __self: this }),

          /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_fixedDataTable.Column, /* istanbul ignore next */{
            columnKey: 'anamoly_info',
            header: /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'gorAuditHeader', __source: { fileName: _jsxFileName, lineNumber: 264 }, __self: this }, /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_reactIntl.FormattedMessage, /* istanbul ignore next */{ id: 'resolveAudit.table.actualQuantity',
                description: 'actualQuantity Column',
                defaultMessage: 'ACTUAL QUANTITY', __source: { fileName: _jsxFileName, lineNumber: 264 }, __self: this })),

            cell: /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_commonFunctionsDataTable.AuditPackingQuantityCell, /* istanbul ignore next */{ dataKey: 'actual_quantity', data: auditDataList, __source: { fileName: _jsxFileName, lineNumber: 268 }, __self: this }),
            width: 220, __source: { fileName: _jsxFileName, lineNumber: 262 }, __self: this }),

          /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_fixedDataTable.Column, /* istanbul ignore next */{
            columnKey: 'status',
            header: /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'gorAuditHeader', __source: { fileName: _jsxFileName, lineNumber: 273 }, __self: this }, /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_reactIntl.FormattedMessage, /* istanbul ignore next */{ id: 'resolveAudit.table.STATUS',
                description: 'status Column',
                defaultMessage: 'STATUS', __source: { fileName: _jsxFileName, lineNumber: 273 }, __self: this })),
            cell: /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_commonFunctionsDataTable.AuditPackingStatusCell, /* istanbul ignore next */{ data: auditDataList, __source: { fileName: _jsxFileName, lineNumber: 276 }, __self: this }),
            width: 220, __source: { fileName: _jsxFileName, lineNumber: 271 }, __self: this }),


          /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_fixedDataTable.Column, /* istanbul ignore next */{
            columnKey: 'resolve',
            header: /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'gorAuditHeader', __source: { fileName: _jsxFileName, lineNumber: 282 }, __self: this }, /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_reactIntl.FormattedMessage, /* istanbul ignore next */{ id: 'resolveAudit.table.resolve',
                description: 'resolve Column',
                defaultMessage: 'RESOLVE', __source: { fileName: _jsxFileName, lineNumber: 282 }, __self: this })),
            cell: /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_commonFunctionsDataTable.AuditPackingResolveCell, /* istanbul ignore next */{ data: auditDataList, __source: { fileName: _jsxFileName, lineNumber: 285 }, __self: this }, /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_commonFunctionsDataTable.ResolveCell, /* istanbul ignore next */{ data: auditDataList,
                checkStatus: this._checkAuditStatus.bind(this),
                screenId: screenId, __source: { fileName: _jsxFileName, lineNumber: 285 }, __self: this })),
            width: 220, __source: { fileName: _jsxFileName, lineNumber: 280 }, __self: this })));




    } else {
      resolveTable = /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ __source: { fileName: _jsxFileName, lineNumber: 294 }, __self: this },
        /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_fixedDataTable.Table, /* istanbul ignore next */Object.assign({
            rowHeight: headerHeight,
            rowsCount: auditDataList.getSize(),
            headerHeight: headerHeight,
            onColumnResizeEndCallback: this._onColumnResizeEndCallback,
            isColumnResizing: false,
            width: /* istanbul ignore next */_frontEndConstants.GOR_AUDIT_RESOLVE_WIDTH,
            height: containerHeight },
          this.props, { __source: { fileName: _jsxFileName, lineNumber: 295 }, __self: this }),
          /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_fixedDataTable.Column, /* istanbul ignore next */{
            columnKey: 'slot_id',
            header: /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'gorAuditHeader', __source: { fileName: _jsxFileName, lineNumber: 306 }, __self: this }, /* istanbul ignore next */' ', /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_reactIntl.FormattedMessage, /* istanbul ignore next */{ id: 'resolveAudit.table.slot', description: 'slot id Column', defaultMessage: 'SLOT ID', __source: { fileName: _jsxFileName, lineNumber: 306 }, __self: this }), /* istanbul ignore next */' '),
            cell: /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_commonFunctionsDataTable.TextCell, /* istanbul ignore next */{ data: auditDataList, __source: { fileName: _jsxFileName, lineNumber: 307 }, __self: this }),
            width: 220, __source: { fileName: _jsxFileName, lineNumber: 304 }, __self: this }),

          /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_fixedDataTable.Column, /* istanbul ignore next */{
            columnKey: 'expected_quantity',
            header: /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'gorAuditHeader', __source: { fileName: _jsxFileName, lineNumber: 312 }, __self: this }, /* istanbul ignore next */' ', /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_reactIntl.FormattedMessage, /* istanbul ignore next */{ id: 'resolveAudit.table.expectedItems', description: 'expectedItems Column', defaultMessage: 'EXPECTED QUANTITY', __source: { fileName: _jsxFileName, lineNumber: 312 }, __self: this }), /* istanbul ignore next */' '),
            cell: /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_commonFunctionsDataTable.TextCell, /* istanbul ignore next */{ data: auditDataList, __source: { fileName: _jsxFileName, lineNumber: 313 }, __self: this }),
            width: 220, __source: { fileName: _jsxFileName, lineNumber: 310 }, __self: this }),

          /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_fixedDataTable.Column, /* istanbul ignore next */{
            columnKey: 'actual_quantity',
            header: /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'gorAuditHeader', __source: { fileName: _jsxFileName, lineNumber: 318 }, __self: this }, /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_reactIntl.FormattedMessage, /* istanbul ignore next */{ id: 'resolveAudit.table.actualQuantity', description: 'actualQuantity Column', defaultMessage: 'ACTUAL QUANTITY', __source: { fileName: _jsxFileName, lineNumber: 318 }, __self: this }), /* istanbul ignore next */' '),

            cell: /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_commonFunctionsDataTable.TextCell, /* istanbul ignore next */{ data: auditDataList, setClass: /* istanbul ignore next */_frontEndConstants.GOR_BREACHED_LINES, __source: { fileName: _jsxFileName, lineNumber: 320 }, __self: this }, /* istanbul ignore next */' '),
            width: 220, __source: { fileName: _jsxFileName, lineNumber: 316 }, __self: this }),

          /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_fixedDataTable.Column, /* istanbul ignore next */{
            columnKey: 'status',
            header: /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'gorAuditHeader', __source: { fileName: _jsxFileName, lineNumber: 325 }, __self: this }, /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_reactIntl.FormattedMessage, /* istanbul ignore next */{ id: 'resolveAudit.table.STATUS', description: 'status Column', defaultMessage: 'STATUS', __source: { fileName: _jsxFileName, lineNumber: 325 }, __self: this }), /* istanbul ignore next */' '),
            cell: /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_commonFunctionsDataTable.TextCell, /* istanbul ignore next */{ data: auditDataList, __source: { fileName: _jsxFileName, lineNumber: 326 }, __self: this }, /* istanbul ignore next */' '),
            width: 220, __source: { fileName: _jsxFileName, lineNumber: 323 }, __self: this }),


          /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_fixedDataTable.Column, /* istanbul ignore next */{
            columnKey: 'resolve',
            header: /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'gorAuditHeader', __source: { fileName: _jsxFileName, lineNumber: 332 }, __self: this }, /* istanbul ignore next */' ', /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_reactIntl.FormattedMessage, /* istanbul ignore next */{ id: 'resolveAudit.table.resolve', description: 'resolve Column', defaultMessage: 'RESOLVE', __source: { fileName: _jsxFileName, lineNumber: 332 }, __self: this }), /* istanbul ignore next */' '),
            cell: /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_commonFunctionsDataTable.ResolveCell, /* istanbul ignore next */{ data: auditDataList, checkStatus: this._checkAuditStatus.bind(this), screenId: screenId, __source: { fileName: _jsxFileName, lineNumber: 333 }, __self: this }, /* istanbul ignore next */' '),
            width: 220, __source: { fileName: _jsxFileName, lineNumber: 330 }, __self: this })));



    }

    return resolveTable;

  }

  render()
  {
    var /* istanbul ignore next */auditDataList = this.state.auditDataList, /* istanbul ignore next */screenId = this.props.screenId, /* istanbul ignore next */auditType = this.props.auditType, /* istanbul ignore next */auditId = this.props.displayId;
    var auditbysku = this.props.auditMethod === "pdfa" ? false : true,resolveTable = /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ __source: { fileName: _jsxFileName, lineNumber: 347 }, __self: this });
    var totalLines = auditDataList.getSize() ? auditDataList.getSize() : 0;
    if (auditbysku) {
      resolveTable = this._renderSkutable();
    } else
    {
      var groupingBySlotId = this._resolveIssueByPdfa();
      resolveTable = this._renderPDFAtable(groupingBySlotId);

    }

    return (
      /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ __source: { fileName: _jsxFileName, lineNumber: 359 }, __self: this },
        /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'gor-modal-content', __source: { fileName: _jsxFileName, lineNumber: 360 }, __self: this },
          /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'gor-modal-head', __source: { fileName: _jsxFileName, lineNumber: 361 }, __self: this },
            /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'gor-audit-resolve', __source: { fileName: _jsxFileName, lineNumber: 362 }, __self: this },
              screenId === /* istanbul ignore next */_frontEndConstants.APPROVE_AUDIT ?
              /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_reactIntl.FormattedMessage, /* istanbul ignore next */{ id: 'audit.resolve.heading', description: 'Heading for resolve audit', defaultMessage: 'Resolve issues', __source: { fileName: _jsxFileName, lineNumber: 364 }, __self: this }) :
              /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_reactIntl.FormattedMessage, /* istanbul ignore next */{ id: 'audit.viewIssues.heading', description: 'Heading for view issues audit', defaultMessage: 'View issues', __source: { fileName: _jsxFileName, lineNumber: 365 }, __self: this }),

              /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'span', /* istanbul ignore next */{ className: 'close', onClick: this._removeThisModal.bind(this), __source: { fileName: _jsxFileName, lineNumber: 367 }, __self: this }, /* istanbul ignore next */'\xD7'))),


          /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'gor-modal-body', __source: { fileName: _jsxFileName, lineNumber: 370 }, __self: this },
            /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_Spinner2.default, /* istanbul ignore next */{ isLoading: this.props.auditResolveSpinner, setSpinner: this.props.setResolveAuditSpinner, __source: { fileName: _jsxFileName, lineNumber: 371 }, __self: this }),
            /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'gor-usr-form', __source: { fileName: _jsxFileName, lineNumber: 372 }, __self: this },
              /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'gor-auditResolve-h1', __source: { fileName: _jsxFileName, lineNumber: 373 }, __self: this },
                /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_reactIntl.FormattedMessage, /* istanbul ignore next */{ id: 'audit.missing.information', description: 'missing information for audit',
                  defaultMessage: 'Audit task #{auditId} - {auditType}',
                  values: { missingAudit: this.state.totalMismatch, auditId: auditId, auditType: auditType }, __source: { fileName: _jsxFileName, lineNumber: 374 }, __self: this })),

              /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'gor-auditResolve-h2', __source: { fileName: _jsxFileName, lineNumber: 378 }, __self: this },
                /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_reactIntl.FormattedMessage, /* istanbul ignore next */{ id: 'audit.missing.auditType', description: 'missing information for audit type',
                  defaultMessage: 'Mismatch found in {totalLines} slot',
                  values: { totalLines: totalLines }, __source: { fileName: _jsxFileName, lineNumber: 379 }, __self: this })),

              /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'gor-audit-detail', __source: { fileName: _jsxFileName, lineNumber: 383 }, __self: this },
                resolveTable,

                screenId === /* istanbul ignore next */_frontEndConstants.APPROVE_AUDIT ?
                /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'gor-auditResolve-btn-wrap', __source: { fileName: _jsxFileName, lineNumber: 387 }, __self: this },
                  /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'gor-auditresolve-btn', __source: { fileName: _jsxFileName, lineNumber: 388 }, __self: this },
                    /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'button', /* istanbul ignore next */{ className: 'gor-refresh-btn', onClick: this._removeThisModal.bind(this), __source: { fileName: _jsxFileName, lineNumber: 389 }, __self: this },
                      /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_reactIntl.FormattedMessage, /* istanbul ignore next */{ id: 'resolveAudit.cancelLabel', description: 'button label for cancel', defaultMessage: 'Cancel', __source: { fileName: _jsxFileName, lineNumber: 390 }, __self: this }))),


                  /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'gor-auditresolve-btn', __source: { fileName: _jsxFileName, lineNumber: 393 }, __self: this },
                    /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'button', /* istanbul ignore next */{ disabled: !this.state.checkedState || this.state.checkedState.length < 1, className: 'gor-add-btn', onClick: this._confirmIssues.bind(this), __source: { fileName: _jsxFileName, lineNumber: 394 }, __self: this },
                      /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_reactIntl.FormattedMessage, /* istanbul ignore next */{ id: 'resolveAudit.confirmLabel', description: 'button label for confirm', defaultMessage: 'Confirm', __source: { fileName: _jsxFileName, lineNumber: 395 }, __self: this })))) :



                /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'gor-auditIssue-btn-wrap', __source: { fileName: _jsxFileName, lineNumber: 399 }, __self: this },
                  /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'button', /* istanbul ignore next */{ className: 'gor-refresh-btn', onClick: this._removeThisModal.bind(this), __source: { fileName: _jsxFileName, lineNumber: 400 }, __self: this },
                    /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_reactIntl.FormattedMessage, /* istanbul ignore next */{ id: 'resolveAudit.closeLabel', description: 'button label for close', defaultMessage: 'Close', __source: { fileName: _jsxFileName, lineNumber: 401 }, __self: this })))))))));









  }}


function mapStateToProps(state, ownProps) {
  return {
    auth_token: state.authLogin.auth_token,
    username: state.authLogin.username,
    auditLines: state.recieveAuditDetail.auditPendingLines || [],
    auditResolveSpinner: state.spinner.auditResolveSpinner || false };

}

var mapDispatchToProps = function mapDispatchToProps(dispatch) {
  return {
    resolveAuditLines: function /* istanbul ignore next */resolveAuditLines(data) {dispatch( /* istanbul ignore next */(0, _auditActions.resolveAuditLines)(data));},
    getAuditOrderLines: function /* istanbul ignore next */getAuditOrderLines(data) {dispatch( /* istanbul ignore next */(0, _auditActions.getAuditOrderLines)(data));},
    setResolveAuditSpinner: function /* istanbul ignore next */setResolveAuditSpinner(data) {dispatch( /* istanbul ignore next */(0, _spinnerAction.setResolveAuditSpinner)(data));} };

};

ResolveAudit.contextTypes = {
  intl: /* istanbul ignore next */_react2.default.PropTypes.object.isRequired }; /* istanbul ignore next */exports.default =



/* istanbul ignore next */(0, _reactRedux.connect)(mapStateToProps, mapDispatchToProps)(ResolveAudit);