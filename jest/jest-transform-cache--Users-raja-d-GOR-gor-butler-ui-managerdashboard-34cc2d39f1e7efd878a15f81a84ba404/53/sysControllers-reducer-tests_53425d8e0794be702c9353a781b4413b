/* istanbul ignore next */'use strict';var /* istanbul ignore next */_sysControllersReducer = require('../../../reducers/sysControllersReducer');
var /* istanbul ignore next */_frontEndConstants = require('../../../constants/frontEndConstants'); /* istanbul ignore next */var CONSTANTS = _interopRequireWildcard(_frontEndConstants); /* istanbul ignore next */function _interopRequireWildcard(obj) {if (obj && obj.__esModule) {return obj;} else {var newObj = {};if (obj != null) {for (var key in obj) {if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];}}newObj.default = obj;return newObj;}}

describe('System Controller reducer', () => {

  it('should handle ZONE_DATA true', () => {
    const data = {
      "complete_data": [{
        "controller_id": "10000",
        "zone_id": "1",
        "status": "connected",
        "ethernet_network": "disconnected",
        "zigbee_network": "disconnected",
        "sensor_activated": "latch_gate",
        "action_triggered": "zone_pause" },

      {
        "controller_id": "20000",
        "zone_id": "2",
        "status": "disconnected",
        "ethernet_network": "disconnected",
        "zigbee_network": "disconnected",
        "sensor_activated": "none",
        "action_triggered": "emergency_stop",
        "sensor": "emergency_pause_button_press" }],


      "resource_type": "controllers" };

    const expectedControllersData = [{
      "controller_id": "10000",
      "zone_id": "1",
      "status": "connected",
      "ethernet_network": "disconnected",
      "zigbee_network": "disconnected",
      "sensor_activated": "latch_gate",
      "action_triggered": "zone_pause" },

    {
      "controller_id": "20000",
      "zone_id": "2",
      "status": "disconnected",
      "ethernet_network": "disconnected",
      "zigbee_network": "disconnected",
      "sensor_activated": "none",
      "action_triggered": "emergency_stop",
      "sensor": "emergency_pause_button_press" }];



    expect(
    /* istanbul ignore next */(0, _sysControllersReducer.sysControllersReducer)({
      "hasDataChanged": true },
    {
      type: CONSTANTS.CONTROLLER_DATA,
      data })).

    toEqual(
    {
      "hasDataChanged": false,
      "controllers": expectedControllersData });


    expect(
    /* istanbul ignore next */(0, _sysControllersReducer.sysControllersReducer)({
      "hasDataChanged": false },
    {
      type: CONSTANTS.CONTROLLER_DATA,
      data })).

    toEqual(
    {
      "hasDataChanged": true,
      "controllers": expectedControllersData });




  });
});