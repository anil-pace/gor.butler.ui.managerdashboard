/* istanbul ignore next */'use strict';Object.defineProperty(exports, "__esModule", { value: true });var _jsxFileName = '/Users/raja.d/GOR/gor.butler.ui.managerdashboard/src/containers/orderTab/waveTab.js';var /* istanbul ignore next */_react = require('react'); /* istanbul ignore next */var _react2 = _interopRequireDefault(_react);
var /* istanbul ignore next */_waveTable = require('./waveTable'); /* istanbul ignore next */var _waveTable2 = _interopRequireDefault(_waveTable);
var /* istanbul ignore next */_reactRedux = require('react-redux');
var /* istanbul ignore next */_reactIntl = require('react-intl');
var /* istanbul ignore next */_Spinner = require('../../components/spinner/Spinner'); /* istanbul ignore next */var _Spinner2 = _interopRequireDefault(_Spinner);
var /* istanbul ignore next */_spinnerAction = require('../../actions/spinnerAction');
var /* istanbul ignore next */_frontEndConstants = require('../../constants/frontEndConstants');
var /* istanbul ignore next */_backEndConstants = require('../../constants/backEndConstants');

var /* istanbul ignore next */_sortHeaderActions = require('../../actions/sortHeaderActions');

var /* istanbul ignore next */_getDaysDiff = require('../../utilities/getDaysDiff');
var /* istanbul ignore next */_filterAction = require('../../actions/filterAction');
var /* istanbul ignore next */_socketActions = require('./../../actions/socketActions');
var /* istanbul ignore next */_initData = require('./../../constants/initData.js');
var /* istanbul ignore next */_orderListActions = require('./../../actions/orderListActions');
var /* istanbul ignore next */_reactRouter = require('react-router');
var /* istanbul ignore next */_waveFilter = require('./waveFilter'); /* istanbul ignore next */var _waveFilter2 = _interopRequireDefault(_waveFilter);
var /* istanbul ignore next */_filterSummary = require('../../components/tableFilter/filterSummary'); /* istanbul ignore next */var _filterSummary2 = _interopRequireDefault(_filterSummary);function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}

//Mesages for internationalization
const messages = /* istanbul ignore next */(0, _reactIntl.defineMessages)({
    wavePrefix: {
        id: "waveDetail.id.prefix",
        defaultMessage: "WAVE-{waveId}" } });






class WaveTab extends /* istanbul ignore next */_react2.default.Component {
    constructor(props) {
        super(props); /* istanbul ignore next */this.











































































































































































        refresh = () => {
            console.log('Refresh');
        };this.state = { query: null };}componentWillMount() {/**
                                                               * It will update the last refreshed property of
                                                               * overview details, so that updated subscription
                                                               * packet can be sent to the server for data
                                                               * update.
                                                               */this.props.wavesRefreshed();}componentWillReceiveProps(nextProps) {if (nextProps.socketAuthorized && nextProps.location.query && (!this.state.query || JSON.stringify(nextProps.location.query) !== JSON.stringify(this.state.query))) {this.setState({ query: nextProps.location.query });this._refreshList(nextProps.location.query);}} /**
                                                                                                                                                                                                                                                                                                                                                                                                            * The method will update the subscription packet
                                                                                                                                                                                                                                                                                                                                                                                                            * and will fetch the data from the socket.
                                                                                                                                                                                                                                                                                                                                                                                                            * @private
                                                                                                                                                                                                                                                                                                                                                                                                            */_refreshList(query) {this.props.setWavesSpinner(true);let filterSubsData = {};if (query.waveId) {filterSubsData["wave_id"] = ['=', query.waveId];}if (query.status) {filterSubsData["status"] = ['in', query.status.constructor === Array ? query.status : [query.status]];}if (Object.keys(query).filter(function (el) {return el !== 'page';}).length !== 0) {this.props.toggleWaveFilter(true);this.props.filterApplied(true);} else {this.props.toggleWaveFilter(false);this.props.filterApplied(false);}let updatedWsSubscription = this.props.wsSubscriptionData;updatedWsSubscription["orders"].data[0].details["filter_params"] = filterSubsData;this.props.initDataSentCall(updatedWsSubscription["orders"]);this.props.updateSubscriptionPacket(updatedWsSubscription);this.props.wavefilterState({ tokenSelected: { "STATUS": query.status ? query.status.constructor === Array ? query.status : [query.status] : ["any"] }, searchQuery: { "WAVE ID": query.waveId || '' } });} /**

clearFilter() {/* istanbul ignore next */_reactRouter.hashHistory.push({ pathname: "/orders/waves", query: {} });}_processWaveData(data, nProps) {var nProps = this,data = nProps.props.waveDetail.waveData;var waveData = [],waveDetail = {};let WAVE, waveId;var status = { "in_progress": "progress", "completed": "completed", "breached": "breached", "wave_pending": "pending" };var priStatus = { "in_progress": 2, "completed": 4, "breached": 1, "pending": 3 };var timeOffset = this.props.timeOffset,alertNum = 0;if (data) {for (var i = data.length - 1; i >= 0; i--) {waveId = data[i].wave_id;WAVE = nProps.context.intl.formatMessage(messages.wavePrefix, { "waveId": waveId });waveDetail = {};waveDetail.id = WAVE;waveDetail.statusClass = status[data[i].status];waveDetail.statusPriority = priStatus[data[i].status];if (nProps.context.intl.formatMessage( /* istanbul ignore next */_backEndConstants.stringConfig[data[i].status])) {waveDetail.status = nProps.context.intl.formatMessage( /* istanbul ignore next */_backEndConstants.stringConfig[data[i].status]);} else {waveDetail.status = data[i].status;}if (!data[i].start_time) {waveDetail.startTime = "--";} else {if ( /* istanbul ignore next */(0, _getDaysDiff.getDaysDiff)(data[i].start_time) < 2) {waveDetail.startTime = nProps.context.intl.formatRelative(data[i].start_time, { timeZone: timeOffset, units: 'day' }) + ", " + nProps.context.intl.formatTime(data[i].start_time, { timeZone: timeOffset, hour: 'numeric', minute: 'numeric', hour12: false });} else {waveDetail.startTime = nProps.context.intl.formatDate(data[i].start_time, { timeZone: timeOffset, year: 'numeric', month: 'short', day: '2-digit', hour: "2-digit", minute: "2-digit", hour12: false });}}if (!data[i].cut_off_time) {waveDetail.cutOffTime = "--";} else {if ( /* istanbul ignore next */(0, _getDaysDiff.getDaysDiff)(data[i].cut_off_time) < 2) {waveDetail.cutOffTime = nProps.context.intl.formatRelative(data[i].cut_off_time, { timeZone: timeOffset, units: 'day' }) + ", " + nProps.context.intl.formatTime(data[i].cut_off_time, { timeZone: timeOffset, hour: 'numeric', minute: 'numeric', hour12: false });} else {waveDetail.cutOffTime = nProps.context.intl.formatDate(data[i].cut_off_time, { timeZone: timeOffset, year: 'numeric', month: 'short', day: '2-digit', hour: "2-digit", minute: "2-digit", hour12: false });}}waveDetail.ordersToFulfill = data[i].orders_to_fulfill;waveDetail.totalOrders = data[i].total_orders;if (waveDetail.totalOrders) {waveDetail.progress = parseInt((waveDetail.totalOrders - waveDetail.ordersToFulfill) / waveDetail.totalOrders * 100);} else {waveDetail.progress = 0;}waveData.push(waveDetail);}}return waveData;}_setFilter() {var newState = !this.props.showFilter;this.props.showTableFilter(newState);}render() {let filterHeight = screen.height - 190 - 50;var updateStatusIntl = "";var itemNumber = 7,waveData = this.props.waveDetail.waveData,waveState = { "pendingWave": "--", "progressWave": "--", "orderRemaining": "--", "completedWaves": "--", "totalOrders": "--" };
        var totalOrders = 0,orderToFulfill = 0,completedWaves = 0,pendingWaves = 0,progressWave = 0,alertNum = 0;

        if (this.props.waveDetail.waveData !== undefined) {
            waveData = this._processWaveData();
            if (waveData && waveData.length) {
                for (var i = waveData.length - 1; i >= 0; i--) {
                    if (waveData[i].totalOrders) {
                        totalOrders = waveData[i].totalOrders + totalOrders;
                    }
                    if (waveData[i].ordersToFulfill) {
                        orderToFulfill = waveData[i].ordersToFulfill + orderToFulfill;
                    }

                    if (waveData[i].progress === 100) {
                        completedWaves++;
                    }
                    if (waveData[i].statusClass === /* istanbul ignore next */_frontEndConstants.GOR_PENDING) {
                        pendingWaves++;
                    }

                    if (waveData[i].statusClass === /* istanbul ignore next */_frontEndConstants.GOR_PROGRESS) {
                        progressWave++;
                    }

                    if (waveData[i].statusClass === /* istanbul ignore next */_frontEndConstants.GOR_BREACHED) {
                        alertNum++;
                    }
                }
                waveState = {
                    "pendingWave": pendingWaves,
                    "progressWave": progressWave,
                    "orderRemaining": orderToFulfill,
                    "completedWaves": completedWaves,
                    "totalOrders": totalOrders,
                    "alertNum": alertNum };

            }
        }
        return (
            /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'gorTesting', __source: { fileName: _jsxFileName, lineNumber: 259 }, __self: this },
                /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_Spinner2.default, /* istanbul ignore next */{ isLoading: this.props.wavesSpinner, setSpinner: this.props.setWavesSpinner, __source: { fileName: _jsxFileName, lineNumber: 260 }, __self: this }),
                waveData ? /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ __source: { fileName: _jsxFileName, lineNumber: 261 }, __self: this },
                    /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'gor-filter-wrap', style: { 'width': this.props.showFilter ? '350px' : '0px', height: filterHeight }, __source: { fileName: _jsxFileName, lineNumber: 262 }, __self: this },
                        /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_waveFilter2.default, /* istanbul ignore next */{ waveData: waveData, responseFlag: this.props.responseFlag, __source: { fileName: _jsxFileName, lineNumber: 263 }, __self: this })),

                    /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'gorToolBar', __source: { fileName: _jsxFileName, lineNumber: 265 }, __self: this },
                        /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'gorToolBarWrap', __source: { fileName: _jsxFileName, lineNumber: 266 }, __self: this },
                            /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'gorToolBarElements', __source: { fileName: _jsxFileName, lineNumber: 267 }, __self: this },
                                /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_reactIntl.FormattedMessage, /* istanbul ignore next */{ id: 'waves.table.heading', description: 'Heading for waves',
                                    defaultMessage: 'Waves', __source: { fileName: _jsxFileName, lineNumber: 268 }, __self: this }))),






                        /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'filterWrapper', __source: { fileName: _jsxFileName, lineNumber: 276 }, __self: this },
                            /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'gorToolBarDropDown', __source: { fileName: _jsxFileName, lineNumber: 277 }, __self: this },
                                /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'gor-button-wrap', __source: { fileName: _jsxFileName, lineNumber: 278 }, __self: this },
                                    /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'gor-button-sub-status', __source: { fileName: _jsxFileName, lineNumber: 279 }, __self: this }, updateStatusIntl, /* istanbul ignore next */' ', updateStatusIntl, /* istanbul ignore next */' '),

                                    /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'button', /* istanbul ignore next */{ className: this.props.waveFilterStatus ? "gor-filterBtn-applied" : "gor-filterBtn-btn", onClick: this._setFilter.bind(this), __source: { fileName: _jsxFileName, lineNumber: 281 }, __self: this },
                                        /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'gor-manage-task', __source: { fileName: _jsxFileName, lineNumber: 282 }, __self: this }),
                                        /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_reactIntl.FormattedMessage, /* istanbul ignore next */{ id: 'gor.filter.filterLabel', description: 'button label for filter',
                                            defaultMessage: 'Filter data', __source: { fileName: _jsxFileName, lineNumber: 283 }, __self: this })))))),









                    /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_filterSummary2.default, /* istanbul ignore next */{ total: waveData.length || 0, isFilterApplied: this.props.isFilterApplied, responseFlag: this.props.responseFlag, filterText: /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_reactIntl.FormattedMessage, /* istanbul ignore next */{ id: 'waveList.filter.search.bar',
                            description: 'total waves for filter search bar',
                            defaultMessage: '{total} Waves found',
                            values: { total: waveData.length || 0 }, __source: { fileName: _jsxFileName, lineNumber: 294 }, __self: this }),
                        refreshList: this._clearFilter.bind(this),
                        refreshText: /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_reactIntl.FormattedMessage, /* istanbul ignore next */{ id: 'waveList.filter.search.bar.showall',
                            description: 'button label for show all',
                            defaultMessage: 'Show all Waves', __source: { fileName: _jsxFileName, lineNumber: 299 }, __self: this }), __source: { fileName: _jsxFileName, lineNumber: 294 }, __self: this })) :
                null,
                /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_waveTable2.default, /* istanbul ignore next */{ items: waveData, itemNumber: itemNumber,
                    waveState: waveState, intlMessg: this.props.intlMessages,
                    sortHeaderState: this.props.waveHeaderSort,
                    sortHeaderOrder: this.props.waveHeaderSortOrder,
                    currentSortState: this.props.waveSortHeader,
                    currentHeaderOrder: this.props.waveSortHeaderState,
                    setWaveFilter: this.props.waveFilterDetail,
                    getWaveFilter: this.props.waveFilter,
                    lastUpdatedText: updateStatusIntl,
                    lastUpdated: updateStatusIntl,
                    refreshOption: this.refresh.bind(this),
                    isFilterApplied: this.props.isFilterApplied,
                    showFilter: this.props.showFilter,
                    setFilter: this.props.showTableFilter,
                    waveFilterStatus: this.props.waveFilterStatus,
                    refreshList: this._clearFilter.bind(this), __source: { fileName: _jsxFileName, lineNumber: 303 }, __self: this })));



    }}



function mapStateToProps(state, ownProps) {
    return {
        waveFilter: state.sortHeaderState.waveFilter || "",
        waveSortHeader: state.sortHeaderState.waveHeaderSort || /* istanbul ignore next */_frontEndConstants.INITIAL_HEADER_SORT,
        waveSortHeaderState: state.sortHeaderState.waveHeaderSortOrder || /* istanbul ignore next */_frontEndConstants.INITIAL_HEADER_ORDER,
        wavesSpinner: state.spinner.wavesSpinner || false,
        filterOptions: state.filterOptions || {},
        waveDetail: state.waveInfo || {},
        intlMessages: state.intl.messages,
        timeOffset: state.authLogin.timeOffset,
        waveFilterStatus: state.filterInfo.waveFilterStatus || false,
        showFilter: state.filterInfo.filterState || false,
        isFilterApplied: state.filterInfo.isFilterApplied || false,
        wsSubscriptionData: state.recieveSocketActions.socketDataSubscriptionPacket || /* istanbul ignore next */_initData.wsOverviewData,
        socketAuthorized: state.recieveSocketActions.socketAuthorized,
        wavesRefreshed: state.ppsInfo.wavesRefreshed };


};

var mapDispatchToProps = function mapDispatchToProps(dispatch) {
    return {
        waveFilterDetail: function /* istanbul ignore next */waveFilterDetail(data) {
            dispatch( /* istanbul ignore next */(0, _sortHeaderActions.waveFilterDetail)(data));
        },
        setWavesSpinner: function /* istanbul ignore next */setWavesSpinner(data) {
            dispatch( /* istanbul ignore next */(0, _spinnerAction.setWavesSpinner)(data));
        },
        waveHeaderSort: function /* istanbul ignore next */waveHeaderSort(data) {
            dispatch( /* istanbul ignore next */(0, _sortHeaderActions.waveHeaderSort)(data));
        },
        waveHeaderSortOrder: function /* istanbul ignore next */waveHeaderSortOrder(data) {
            dispatch( /* istanbul ignore next */(0, _sortHeaderActions.waveHeaderSortOrder)(data));
        },
        showTableFilter: function /* istanbul ignore next */showTableFilter(data) {
            dispatch( /* istanbul ignore next */(0, _filterAction.showTableFilter)(data));
        },
        filterApplied: function /* istanbul ignore next */filterApplied(data) {
            dispatch( /* istanbul ignore next */(0, _filterAction.filterApplied)(data));
        },
        updateSubscriptionPacket: function /* istanbul ignore next */updateSubscriptionPacket(data) {
            dispatch( /* istanbul ignore next */(0, _socketActions.updateSubscriptionPacket)(data));
        },
        toggleWaveFilter: function /* istanbul ignore next */toggleWaveFilter(data) {
            dispatch( /* istanbul ignore next */(0, _filterAction.toggleWaveFilter)(data));
        },
        wavefilterState: function /* istanbul ignore next */wavefilterState(data) {
            dispatch( /* istanbul ignore next */(0, _filterAction.wavefilterState)(data));

        },
        initDataSentCall: function /* istanbul ignore next */initDataSentCall(data) {dispatch( /* istanbul ignore next */(0, _socketActions.setWsAction)({ type: /* istanbul ignore next */_frontEndConstants.WS_ONSEND, data: data }));},
        wavesRefreshed: function /* istanbul ignore next */wavesRefreshed(data) {dispatch( /* istanbul ignore next */(0, _orderListActions.wavesRefreshed)(data));} };

};

WaveTab.contextTypes = {
    intl: /* istanbul ignore next */_react2.default.PropTypes.object.isRequired };


WaveTab.PropTypes = {
    waveSortHeaderState: /* istanbul ignore next */_react2.default.PropTypes.string,
    wavesSpinner: /* istanbul ignore next */_react2.default.PropTypes.bool,
    filterOptions: /* istanbul ignore next */_react2.default.PropTypes.object,
    waveDetail: /* istanbul ignore next */_react2.default.PropTypes.object,
    intlMessages: /* istanbul ignore next */_react2.default.PropTypes.string,
    waveFilterState: /* istanbul ignore next */_react2.default.PropTypes.bool,
    showFilter: /* istanbul ignore next */_react2.default.PropTypes.bool,
    waveFilterDetail: /* istanbul ignore next */_react2.default.PropTypes.func,
    setWavesSpinner: /* istanbul ignore next */_react2.default.PropTypes.func,
    waveHeaderSort: /* istanbul ignore next */_react2.default.PropTypes.func,
    waveHeaderSortOrder: /* istanbul ignore next */_react2.default.PropTypes.func,
    showTableFilter: /* istanbul ignore next */_react2.default.PropTypes.func,
    wsSubscriptionData: /* istanbul ignore next */_react2.default.PropTypes.object }; /* istanbul ignore next */exports.default =


/* istanbul ignore next */(0, _reactRedux.connect)(mapStateToProps, mapDispatchToProps)(WaveTab);