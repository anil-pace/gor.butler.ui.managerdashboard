/* istanbul ignore next */'use strict';Object.defineProperty(exports, "__esModule", { value: true });var _jsxFileName = '/Users/raja.d/GOR/gor.butler.ui.managerdashboard/src/containers/reportsTab/downloadReportTab.js'; /**
                                                                                                                                                                                                                            * Container for Inventory tab
                                                                                                                                                                                                                            * This will be switched based on tab click
                                                                                                                                                                                                                            */
var /* istanbul ignore next */_react = require('react'); /* istanbul ignore next */var _react2 = _interopRequireDefault(_react);
var /* istanbul ignore next */_reactIntl = require('react-intl');
var /* istanbul ignore next */_reactRedux = require('react-redux');
var /* istanbul ignore next */_initData = require('../../constants/initData.js');
var /* istanbul ignore next */_reactDimensions = require('react-dimensions'); /* istanbul ignore next */var _reactDimensions2 = _interopRequireDefault(_reactDimensions);
var /* istanbul ignore next */_reactRouter = require('react-router');
var /* istanbul ignore next */_socketActions = require('../../actions/socketActions');
var /* istanbul ignore next */_operationsLogsActions = require('../../actions/operationsLogsActions');
var /* istanbul ignore next */_frontEndConstants = require('../../constants/frontEndConstants');
var /* istanbul ignore next */_gorPaginateV = require('../../components/gorPaginate/gorPaginateV2'); /* istanbul ignore next */var _gorPaginateV2 = _interopRequireDefault(_gorPaginateV);
var /* istanbul ignore next */_Spinner = require('../../components/spinner/Spinner'); /* istanbul ignore next */var _Spinner2 = _interopRequireDefault(_Spinner);
var /* istanbul ignore next */_fixedDataTable = require('fixed-data-table');
var /* istanbul ignore next */_commonFunctionsDataTable = require('../../components/commonFunctionsDataTable');



var /* istanbul ignore next */_dropdown = require('../../components/gor-dropdown-component/dropdown'); /* istanbul ignore next */var _dropdown2 = _interopRequireDefault(_dropdown);
var /* istanbul ignore next */_configConstants = require('../../constants/configConstants');
var /* istanbul ignore next */_ajaxActions = require('../../actions/ajaxActions');
var /* istanbul ignore next */_downloadReportsActions = require('../../actions/downloadReportsActions'); /* istanbul ignore next */function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}


const pageSize = [{ value: "25", disabled: false, label: /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_reactIntl.FormattedMessage, /* istanbul ignore next */{ id: 'operationLog.page.twentyfive', description: 'Page size 25',
        defaultMessage: '25', __source: { fileName: _jsxFileName, lineNumber: 27 }, __self: undefined }) },
{ value: "50", disabled: false, label: /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_reactIntl.FormattedMessage, /* istanbul ignore next */{ id: 'operationLog.page.fifty', description: 'Page size 50',
        defaultMessage: '50', __source: { fileName: _jsxFileName, lineNumber: 29 }, __self: undefined }) },
{ value: "100", disabled: false, label: /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_reactIntl.FormattedMessage, /* istanbul ignore next */{ id: 'operationLog.page.hundred', description: 'Page size 100',
        defaultMessage: '100', __source: { fileName: _jsxFileName, lineNumber: 31 }, __self: undefined }) }];

class DownloadReportTab extends /* istanbul ignore next */_react2.default.Component {
    constructor(props, context) {
        super(props, context);
        this.state = this._getInitialState();
        this._refreshList = this._refreshList.bind(this);
        this._handlePageChange = this._handlePageChange.bind(this);
        this._subscribeData = this._subscribeData.bind(this);
        this._rowClassNameGetter = this._rowClassNameGetter.bind(this);

    }

    _getInitialState() {
        var data = this._processData(this.props.reportsData);
        var dataList = new /* istanbul ignore next */_commonFunctionsDataTable.tableRenderer(data.length);
        dataList.newData = data;
        return {
            columnWidths: {
                reportName: this.props.containerWidth * 0.2,
                reportType: this.props.containerWidth * 0.15,
                requestedBy: this.props.containerWidth * 0.15,
                completionTime: this.props.containerWidth * 0.15,
                status: this.props.containerWidth * 0.2 },

            dataList: dataList,
            query: this.props.location.query,
            subscribed: false,
            pageSize: this.props.location.query.pageSize || /* istanbul ignore next */_frontEndConstants.DEFAULT_PAGE_SIZE_OL,
            dataFetchedOnLoad: false };

    }

    _processData(data) {
        var processedData = [],
        datalen = data.length,
        _this = this,
        timeZone = _this.props.timeOffset;

        if (datalen) {
            for (let i = 0; i < datalen; i++) {
                let dataTuple = Object.assign({}, data[i]);
                if (dataTuple.type === "OPERATOR_LOGS") {
                    dataTuple.typeText = /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_reactIntl.FormattedMessage, /* istanbul ignore next */{ id: 'downloadReport.type.operationsLog', description: 'Heading for PPS',
                        defaultMessage: 'Operations Logs', __source: { fileName: _jsxFileName, lineNumber: 75 }, __self: this });
                } else
                {
                    dataTuple.typeText = dataTuple.type;
                }

                if (dataTuple.completionTime) {
                    dataTuple.formattedCompletionDate = /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_reactIntl.FormattedDate, /* istanbul ignore next */{
                        value: new Date(dataTuple.completionTime),
                        year: 'numeric',
                        month: 'long',
                        day: '2-digit',
                        hour: '2-digit',
                        minute: '2-digit',
                        timeZone: timeZone, __source: { fileName: _jsxFileName, lineNumber: 83 }, __self: this });

                } else
                {
                    dataTuple.formattedCompletionDate = "--";
                }
                if (dataTuple.status === "PENDING") {
                    dataTuple.statusText = /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_reactIntl.FormattedMessage, /* istanbul ignore next */{ id: 'downloadReport.status.pending', description: 'Heading for PPS',
                        defaultMessage: 'Generating report...', __source: { fileName: _jsxFileName, lineNumber: 97 }, __self: this });
                } else
                if (dataTuple.status === "FAILED") {
                    dataTuple.statusText = /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_reactIntl.FormattedMessage, /* istanbul ignore next */{ id: 'downloadReport.status.failed', description: 'Heading for PPS',
                        defaultMessage: 'Report failed!', __source: { fileName: _jsxFileName, lineNumber: 101 }, __self: this });
                } else
                if (dataTuple.status === "COMPLETED") {
                    dataTuple.statusText = /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'button', /* istanbul ignore next */{ className: 'gor-rpt-dwnld', onClick: () => {_this._downloadReport(dataTuple.id);}, __source: { fileName: _jsxFileName, lineNumber: 105 }, __self: this },
                        /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'span', /* istanbul ignore next */{ className: 'ico-wrap', __source: { fileName: _jsxFileName, lineNumber: 106 }, __self: this }, /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'i', /* istanbul ignore next */{ className: 'dwnload-rpt-ico', __source: { fileName: _jsxFileName, lineNumber: 106 }, __self: this })),
                        /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'span', /* istanbul ignore next */{ className: 'ico-txt-wrp', __source: { fileName: _jsxFileName, lineNumber: 107 }, __self: this },
                            /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_reactIntl.FormattedMessage, /* istanbul ignore next */{ id: 'downloadReport.status.completed',
                                description: 'button label for download report',
                                defaultMessage: 'DOWNLOAD', __source: { fileName: _jsxFileName, lineNumber: 108 }, __self: this })));


                }
                processedData.push(dataTuple);
            }
        }
        return processedData;
    }
    shouldComponentUpdate(nextProps, nextState) {
        var shouldUpdate = nextProps.hasDataChanged !== this.props.hasDataChanged;
        return shouldUpdate;
    }
    componentWillReceiveProps(nextProps) {
        if (nextProps.socketAuthorized && !this.state.subscribed) {
            this.setState({ subscribed: true }, function () {
                this._subscribeData();
                this._getReportsData(nextProps);
            });

        }
        if (this.props.hasDataChanged !== nextProps.hasDataChanged) {
            let rawData = nextProps.reportsData.slice(0);
            let data = this._processData(rawData);
            let dataList = new /* istanbul ignore next */_commonFunctionsDataTable.tableRenderer(data.length);
            dataList.newData = data;
            this.setState({
                dataList });

        }
    }
    componentDidMount() {
        if (this.props.socketAuthorized && !this.state.subscribed) {
            this.setState({ subscribed: true }, function () {
                this._subscribeData();
                this._getReportsData(this.props);
            });

        }
    }
    _downloadReport(id) {


        var params = {
            'url': /* istanbul ignore next */_configConstants.DOWNLOAD_REPORT + id,
            'method': /* istanbul ignore next */_frontEndConstants.GET,
            'responseType': "arraybuffer",
            'accept': "text/csv",
            'cause': /* istanbul ignore next */_frontEndConstants.GET_REPORT };

        this.props.setDownloadReportSpinner(true);
        this.props.makeAjaxCall(params);
    }
    _getReportsData(props) {
        var _props = props || this.props;
        var query = _props.location.query;
        var pageSize = query.pageSize || 25;
        var page = query.page || 1;

        var params = {
            'url': /* istanbul ignore next */_configConstants.REPORTS_URL + "?page=" + (parseInt(page) - 1) + "&size=" + pageSize,
            'method': /* istanbul ignore next */_frontEndConstants.GET,
            'contentType': /* istanbul ignore next */_frontEndConstants.APP_JSON,
            'accept': /* istanbul ignore next */_frontEndConstants.APP_JSON,
            'cause': /* istanbul ignore next */_frontEndConstants.REPORTS_FETCH };

        _props.makeAjaxCall(params);

    }

    _subscribeData() {
        this.props.initDataSentCall( /* istanbul ignore next */_initData.wsOverviewData["default"]);
    }

    _refreshList() {
        this._getReportsData();
    }

    _handlePageChange(e) {
        var _query = Object.assign({}, this.props.location.query);
        _query.pageSize = e.value;
        _query.page = _query.page || 1;
        this.props.router.push({ pathname: "/reports/downloadReport", query: _query });
    }
    _rowClassNameGetter(index) {/* istanbul ignore next */var
        dataList = this.state.dataList;
        if (dataList.newData[index].lastDownloaded) {
            return "public_fixedDataTableRow_downloaded";
        }
        return "";
    }

    render() {/* istanbul ignore next */var
        dataList = this.state.dataList;
        var _this = this;
        var dataSize = dataList.getSize();
        var noData = !dataSize;

        return (
            /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'gorTesting wrapper gor-download-rpts', __source: { fileName: _jsxFileName, lineNumber: 209 }, __self: this },
                /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_Spinner2.default, /* istanbul ignore next */{ isLoading: this.props.downloadReportsSpinner, setSpinner: this.props.setDownloadReportSpinner, __source: { fileName: _jsxFileName, lineNumber: 210 }, __self: this }),

                /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'gorToolBar', __source: { fileName: _jsxFileName, lineNumber: 212 }, __self: this },
                    /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'gorToolBarWrap', __source: { fileName: _jsxFileName, lineNumber: 213 }, __self: this },
                        /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'gorToolBarElements', __source: { fileName: _jsxFileName, lineNumber: 214 }, __self: this },
                            /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_reactIntl.FormattedMessage, /* istanbul ignore next */{ id: 'downloadReport.table.heading', description: 'Heading for PPS',
                                defaultMessage: 'Download Report', __source: { fileName: _jsxFileName, lineNumber: 215 }, __self: this }))),



                    /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'filterWrapper', __source: { fileName: _jsxFileName, lineNumber: 220 }, __self: this },

                        /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'gorToolBarDropDown', __source: { fileName: _jsxFileName, lineNumber: 222 }, __self: this },
                            /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'gor-button-wrap', __source: { fileName: _jsxFileName, lineNumber: 223 }, __self: this },
                                /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'button', /* istanbul ignore next */{ className: 'gor-filterBtn-btn', onClick: this._refreshList, __source: { fileName: _jsxFileName, lineNumber: 224 }, __self: this },
                                    /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'span', /* istanbul ignore next */{ className: 'ico-wrap', __source: { fileName: _jsxFileName, lineNumber: 225 }, __self: this }, /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'i', /* istanbul ignore next */{ className: 'gor-refresh-icon', __source: { fileName: _jsxFileName, lineNumber: 225 }, __self: this })),
                                    /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'span', /* istanbul ignore next */{ className: 'ico-txt-wrp', __source: { fileName: _jsxFileName, lineNumber: 226 }, __self: this },
                                        /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_reactIntl.FormattedMessage, /* istanbul ignore next */{ id: 'downloadReport.table.refresh',
                                            description: 'button label for download report',
                                            defaultMessage: 'Refresh', __source: { fileName: _jsxFileName, lineNumber: 227 }, __self: this }))))))),









                /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_fixedDataTable.Table, /* istanbul ignore next */Object.assign({
                        rowHeight: 80,
                        rowsCount: dataList.getSize(),
                        headerHeight: 70,
                        isColumnResizing: false,
                        rowClassNameGetter: this._rowClassNameGetter,
                        width: this.props.containerWidth,
                        height: dataSize ? document.documentElement.clientHeight * 0.5 : 71 },
                    this.props, { __source: { fileName: _jsxFileName, lineNumber: 239 }, __self: this }),
                    /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_fixedDataTable.Column, /* istanbul ignore next */{
                        columnKey: 'fileName',
                        header:


                        /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_fixedDataTable.Cell, /* istanbul ignore next */{ __source: { fileName: _jsxFileName, lineNumber: 253 }, __self: this },
                            /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'gorToolHeaderEl', __source: { fileName: _jsxFileName, lineNumber: 254 }, __self: this },
                                /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_reactIntl.FormattedMessage, /* istanbul ignore next */{ id: 'downloadReport.table.reportName',
                                    description: 'REPORT NAME',
                                    defaultMessage: 'REPORT NAME', __source: { fileName: _jsxFileName, lineNumber: 255 }, __self: this }))),






                        cell: /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_commonFunctionsDataTable.TextCell, /* istanbul ignore next */{ data: dataList, classKey: "fileName", __source: { fileName: _jsxFileName, lineNumber: 264 }, __self: this }),
                        fixed: true,
                        width: this.state.columnWidths.reportName,
                        isResizable: true, __source: { fileName: _jsxFileName, lineNumber: 248 }, __self: this }),

                    /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_fixedDataTable.Column, /* istanbul ignore next */{
                        columnKey: 'typeText',
                        header:
                        /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_fixedDataTable.Cell, /* istanbul ignore next */{ __source: { fileName: _jsxFileName, lineNumber: 272 }, __self: this },

                            /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'gorToolHeaderEl', __source: { fileName: _jsxFileName, lineNumber: 274 }, __self: this },

                                /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_reactIntl.FormattedMessage, /* istanbul ignore next */{ id: 'downloadReport.table.reportType', description: 'REPORT TYPE',
                                    defaultMessage: 'REPORT TYPE', __source: { fileName: _jsxFileName, lineNumber: 276 }, __self: this }))),





                        cell: /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_commonFunctionsDataTable.TextCell, /* istanbul ignore next */{ data: dataList, setClass: "type", __source: { fileName: _jsxFileName, lineNumber: 283 }, __self: this }),
                        fixed: true,
                        width: this.state.columnWidths.reportType,
                        isResizable: true, __source: { fileName: _jsxFileName, lineNumber: 269 }, __self: this }),

                    /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_fixedDataTable.Column, /* istanbul ignore next */{
                        columnKey: 'requestedBy',
                        header:
                        /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_fixedDataTable.Cell, /* istanbul ignore next */{ __source: { fileName: _jsxFileName, lineNumber: 291 }, __self: this },
                            /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'gorToolHeaderEl', __source: { fileName: _jsxFileName, lineNumber: 292 }, __self: this },

                                /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_reactIntl.FormattedMessage, /* istanbul ignore next */{ id: 'downloadReport.table.requestedBy', description: 'Request ID',
                                    defaultMessage: 'REQUESTED BY', __source: { fileName: _jsxFileName, lineNumber: 294 }, __self: this }))),



                        cell: /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_commonFunctionsDataTable.TextCell, /* istanbul ignore next */{ data: dataList, setClass: "requestedBy", __source: { fileName: _jsxFileName, lineNumber: 299 }, __self: this }),
                        fixed: true,
                        width: this.state.columnWidths.requestedBy,
                        isResizable: true, __source: { fileName: _jsxFileName, lineNumber: 288 }, __self: this }),

                    /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_fixedDataTable.Column, /* istanbul ignore next */{
                        columnKey: 'formattedCompletionDate',

                        header:
                        /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_fixedDataTable.Cell, /* istanbul ignore next */{ __source: { fileName: _jsxFileName, lineNumber: 308 }, __self: this },
                            /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'gorToolHeaderEl', __source: { fileName: _jsxFileName, lineNumber: 309 }, __self: this },

                                /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_reactIntl.FormattedMessage, /* istanbul ignore next */{ id: 'downloadReport.table.completionTime', description: 'Status for PPS',
                                    defaultMessage: 'COMPLETION TIME', __source: { fileName: _jsxFileName, lineNumber: 311 }, __self: this }))),



                        cell: /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_commonFunctionsDataTable.TextCell, /* istanbul ignore next */{ data: dataList, setClass: "completionTime", __source: { fileName: _jsxFileName, lineNumber: 316 }, __self: this }),
                        fixed: true,
                        width: this.state.columnWidths.completionTime,
                        isResizable: true, __source: { fileName: _jsxFileName, lineNumber: 304 }, __self: this }),

                    /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_fixedDataTable.Column, /* istanbul ignore next */{
                        columnKey: 'statusText',
                        header:
                        /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_fixedDataTable.Cell, /* istanbul ignore next */{ __source: { fileName: _jsxFileName, lineNumber: 324 }, __self: this },
                            /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'gorToolHeaderEl', __source: { fileName: _jsxFileName, lineNumber: 325 }, __self: this },

                                /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_reactIntl.FormattedMessage, /* istanbul ignore next */{ id: 'downloadReport.table.status', description: 'Status for PPS',
                                    defaultMessage: 'GENERATION PROGRESS', __source: { fileName: _jsxFileName, lineNumber: 327 }, __self: this }))),





                        cell: /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_commonFunctionsDataTable.TextCell, /* istanbul ignore next */{ data: dataList, setClass: "status", __source: { fileName: _jsxFileName, lineNumber: 334 }, __self: this }),
                        fixed: true,
                        width: this.state.columnWidths.status,
                        isResizable: true, __source: { fileName: _jsxFileName, lineNumber: 321 }, __self: this })),




                !dataSize ? /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'gor-no-data', __source: { fileName: _jsxFileName, lineNumber: 342 }, __self: this }, /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_reactIntl.FormattedMessage, /* istanbul ignore next */{ id: 'operationsLog.table.noData',
                        description: 'No data message for operations logs',
                        defaultMessage: 'No Data Found', __source: { fileName: _jsxFileName, lineNumber: 342 }, __self: this })) : "",
                /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'gor-ol-paginate-wrap', __source: { fileName: _jsxFileName, lineNumber: 345 }, __self: this },
                    /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'gor-ol-paginate-left', __source: { fileName: _jsxFileName, lineNumber: 346 }, __self: this },
                        /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_dropdown2.default, /* istanbul ignore next */{
                            options: pageSize,
                            onSelectHandler: e => this._handlePageChange(e),
                            disabled: false,
                            selectedOption: /* istanbul ignore next */_frontEndConstants.DEFAULT_PAGE_SIZE_OL, __source: { fileName: _jsxFileName, lineNumber: 347 }, __self: this })),

                    /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'gor-ol-paginate-right', __source: { fileName: _jsxFileName, lineNumber: 353 }, __self: this },
                        /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_gorPaginateV2.default, /* istanbul ignore next */{ disabled: false, location: this.props.location, currentPage: this.state.query.page || 1, totalPage: 10, __source: { fileName: _jsxFileName, lineNumber: 354 }, __self: this })))));




    }}
;

DownloadReportTab.propTypes = {
    reportsData: /* istanbul ignore next */_react2.default.PropTypes.array,
    hasDataChanged: /* istanbul ignore next */_react2.default.PropTypes.bool,
    socketAuthorized: /* istanbul ignore next */_react2.default.PropTypes.bool };


DownloadReportTab.defaultProps = {
    reportsData: [],
    socketAuthorized: false,
    hasDataChanged: false,
    timeOffset: "",
    downloadReportsSpinner: true };


function mapStateToProps(state, ownProps) {
    return {
        socketAuthorized: state.recieveSocketActions.socketAuthorized,
        reportsData: state.downloadReportsReducer.reportsData,
        hasDataChanged: state.downloadReportsReducer.hasDataChanged,
        timeOffset: state.authLogin.timeOffset,
        downloadReportsSpinner: state.downloadReportsReducer.downloadReportsSpinner };


}
function mapDispatchToProps(dispatch) {
    return {
        initDataSentCall: function /* istanbul ignore next */initDataSentCall(data) {dispatch( /* istanbul ignore next */(0, _socketActions.setWsAction)({ type: /* istanbul ignore next */_frontEndConstants.WS_ONSEND, data: data }));},
        makeAjaxCall: function /* istanbul ignore next */makeAjaxCall(params) {dispatch( /* istanbul ignore next */(0, _ajaxActions.makeAjaxCall)(params));},
        setDownloadReportSpinner: function /* istanbul ignore next */setDownloadReportSpinner(data) {dispatch( /* istanbul ignore next */(0, _downloadReportsActions.setDownloadReportSpinner)(data));} };

}; /* istanbul ignore next */exports.default =


/* istanbul ignore next */(0, _reactRedux.connect)(mapStateToProps, mapDispatchToProps)( /* istanbul ignore next */(0, _reactDimensions2.default)()( /* istanbul ignore next */(0, _reactRouter.withRouter)(DownloadReportTab)));