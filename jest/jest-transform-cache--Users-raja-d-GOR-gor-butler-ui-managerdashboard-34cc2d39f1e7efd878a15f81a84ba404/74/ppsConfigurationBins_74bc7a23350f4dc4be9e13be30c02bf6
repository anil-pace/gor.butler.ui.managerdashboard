/* istanbul ignore next */'use strict';Object.defineProperty(exports, "__esModule", { value: true });var _jsxFileName = '/Users/raja.d/GOR/gor.butler.ui.managerdashboard/src/containers/systemTabs/ppsConfigurationBins.js'; /**
                                                                                                                                                                                                                               * Created by gaurav.m on 6/22/17.
                                                                                                                                                                                                                               */
/**
                                                                                                                                                                                                                                   * Created by gaurav.m on 6/21/17.
                                                                                                                                                                                                                                   */
var /* istanbul ignore next */_react = require('react'); /* istanbul ignore next */var _react2 = _interopRequireDefault(_react);
var /* istanbul ignore next */_reactRedux = require('react-redux');
var /* istanbul ignore next */_ppsConfigurationActions = require('./../../actions/ppsConfigurationActions');





var /* istanbul ignore next */_reactIntl = require('react-intl');
var /* istanbul ignore next */_ajaxActions = require('./../../actions/ajaxActions'); /* istanbul ignore next */function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}

class Bins extends /* istanbul ignore next */_react2.default.Component {
    constructor(props) {
        super(props);
        this.state = {};

    }


    componentWillReceiveProps(nextProps) {
        if (nextProps.selectedProfile && nextProps.selectedProfile !== this.props.selectedProfile) {
            /**
                                                                                                     * Profile changed from left hand side pane
                                                                                                     */

            if (nextProps.selectedProfile && nextProps.selectedProfile.pps_bin_details.filter(function (bin) {
                return bin.direction !== 'center';
            }).length !== 0 && !this.state.currentBinDirection) {
                this.setBinDirection('left');
            } else if (this.state.currentBinDirection) {
                this.setBinDirection(this.state.currentBinDirection);
            } else {
                this.setBinDirection();
            }
        }
    }

    /**
       * The method will select the bin to
       * add/remove tags
       * @param bin
       */
    selectBin(bin, currentView) {
        this.props.selectPPSBin({ bin, currentView });


    }

    /**
       * The method will unselect the PPS Bin
       * @param bin
       * @param currentView
       */
    clearSelectionPPSBin(bin, currentView) {
        this.props.clearSelectionPPSBin({ bin, currentView });
    }

    /**
       * The method will toggle the
       * PPS Bin enable disable status
       */
    changePPSBinStatus(bin, status) {
        this.props.changePPSBinStatus({ bin, currentView: 'bins', enabled: status });
    }


    /**
       * The method will update the status of selected group
       * @param status
       */
    changePPSBinGroupStatus(status) {
        this.props.changePPSBinGroupStatus({ enabled: status });
    }

    /**
       * The method will select the pps bin group
       * that would lead to highlighten the
       * selected group
       * @param bin_group_id
       */
    selectPPSBinGroup(bin_group_id) {
        let group = this.props.selectedProfile.bin_group_details.filter(function (group) {
            return group.bin_group_id === bin_group_id;
        })[0];
        if (this.props.selectedPPSBinGroup && this.props.selectedPPSBinGroup.bin_group_id === bin_group_id) {
            group = null;
        }
        this.props.selectPPSBinGroup({ group: group });
    }

    /**
       * The method would check whether
       * a particular group is disabled or not.
       * @param bin_group_id
       * @returns {boolean}
       */
    isDisabledGroup(bin_group_id) {
        let groups = this.props.selectedProfile.bin_group_details.filter(function (bin) {
            return bin.bin_group_id === bin_group_id;
        });
        if (groups.length > 0 && !groups[0].enabled) {
            return true;
        }
        return false;
    }

    /**
       * Displays the bins for
       * a particular direction i.e, left/center/right
       * @param dir
       */
    setBinDirection(dir) {
        this.clearSelectionPPSBin({ bin: this.props.selectedPPSBin, currentView: this.props.currentView });
        this.setState({ currentBinDirection: dir || null });
    }

    render() {
        /**
               * As soon as PPS selection or the profile
               * selection get changed.
               * Re-render the PPS Bins
               */
        let self = this;
        if (!self.props.selectedPPS) {
            return false;
        }
        /**
           * Finding the sorted array of x and y co-ordinates
           */

        let x_array = self.props.selectedProfile.pps_bin_details.filter(function (bin) {
            return !self.state.currentBinDirection || bin.direction === self.state.currentBinDirection;
        }).map(function (bin) {
            return bin.orig_cordinates ? bin.orig_cordinates[0] + bin.length : 0;
        }).sort(function (a, b) {
            return a - b;
        });
        let y_array = self.props.selectedProfile.pps_bin_details.filter(function (bin) {
            return !self.state.currentBinDirection || bin.direction === self.state.currentBinDirection;
        }).map(function (bin) {
            return bin.orig_cordinates ? bin.orig_cordinates[1] + bin.breadth : 0;
        }).sort(function (a, b) {
            return a - b;
        });

        /**
             * Finding the maximum of x and y co-ordinate to calculate boundaries
             */
        let max_x = x_array[x_array.length - 1];
        let max_y = y_array[y_array.length - 1];

        /**
                                                  *Total virtual width of the container will include the padding with each bin
                                                  * so calculating the total width by considering a set of x distinct co-ordinates.
                                                  */

        let total_x = new Set(x_array).size * 10 + max_x;
        let total_y = new Set(y_array).size * 10 + max_y;
        let container = { x: 900, y: 500 //Container is 900*500
        };
        return (/* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{
                    className: ["pps-bins-container", this.props.currentView === 'tags' ? 'include-tags' : null].join(" "), __source: { fileName: _jsxFileName, lineNumber: 167 }, __self: this },
                this.props.currentView === 'tags' &&
                /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ style: { padding: '2% 4%', color: '#666', overflow: 'auto', clear: 'both' }, __source: { fileName: _jsxFileName, lineNumber: 170 }, __self: this },
                    /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ style: { width: '65%', float: 'left' }, __source: { fileName: _jsxFileName, lineNumber: 171 }, __self: this },
                        /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_reactIntl.FormattedMessage, /* istanbul ignore next */{ id: 'pps.configuration.bins.selection.label',
                            description: 'Select a bin to manage tags',
                            defaultMessage: 'Select a bin to manage tags', __source: { fileName: _jsxFileName, lineNumber: 172 }, __self: this })),

                    self.state.currentBinDirection && /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ style: { width: '35%', 'float': 'right', fontSize: '14' }, __source: { fileName: _jsxFileName, lineNumber: 176 }, __self: this },
                        /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'span', /* istanbul ignore next */{ style: { padding: '5px 10px', color: "#666" }, __source: { fileName: _jsxFileName, lineNumber: 177 }, __self: this }, /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_reactIntl.FormattedMessage, /* istanbul ignore next */{
                                id: 'pps.configuration.bins.direction.label',
                                description: 'Bin Direction',
                                defaultMessage: 'Current PPS Selection', __source: { fileName: _jsxFileName, lineNumber: 177 }, __self: this })),
                        /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'span', /* istanbul ignore next */{ className: 'currentBinDirection', style: { padding: '5px 10px', border: '1px solid #ccc', borderRadius: 20 }, __source: { fileName: _jsxFileName, lineNumber: 181 }, __self: this },
                            /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'span', /* istanbul ignore next */{ className: self.state.currentBinDirection === 'left' ? 'active' : null,
                                    onClick: self.setBinDirection.bind(this, 'left'),
                                    style: { padding: '5px 10px', cursor: 'pointer' }, __source: { fileName: _jsxFileName, lineNumber: 182 }, __self: this }, /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_reactIntl.FormattedMessage, /* istanbul ignore next */{
                                    id: 'pps.configuration.bins.direction.left',
                                    description: 'Bin Direction LEFT',
                                    defaultMessage: 'LEFT', __source: { fileName: _jsxFileName, lineNumber: 184 }, __self: this })),
                            /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'span', /* istanbul ignore next */{ className: self.state.currentBinDirection === 'right' ? 'active' : null,
                                    onClick: self.setBinDirection.bind(this, 'right'),
                                    style: { padding: '5px 10px', cursor: 'pointer' }, __source: { fileName: _jsxFileName, lineNumber: 188 }, __self: this }, /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_reactIntl.FormattedMessage, /* istanbul ignore next */{
                                    id: 'pps.configuration.bins.direction.right',
                                    description: 'Bin Direction RIGHT',
                                    defaultMessage: 'RIGHT', __source: { fileName: _jsxFileName, lineNumber: 190 }, __self: this }))))),






                this.props.currentView === 'bins' &&
                /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ style: { padding: '2% 4%', color: '#666', overflow: 'auto', clear: 'both' }, __source: { fileName: _jsxFileName, lineNumber: 201 }, __self: this },
                    /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ style: { width: '65%', float: 'left' }, __source: { fileName: _jsxFileName, lineNumber: 202 }, __self: this },
                        /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_reactIntl.FormattedMessage, /* istanbul ignore next */{ id: 'pps.configuration.bins.selection.count',
                            description: 'total users for filter search bar',
                            defaultMessage: 'Select a bin to activate or deactivate ({deactivated}/{total} bins deactivated)',
                            values: {
                                deactivated: self.props.selectedProfile.pps_bin_details.filter(function (bin) {
                                    return !bin.enabled;
                                }).length.toString(),
                                total: self.props.selectedProfile.pps_bin_details.length }, __source: { fileName: _jsxFileName, lineNumber: 203 }, __self: this })),




                    self.state.currentBinDirection && /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ style: { width: '35%', 'float': 'right', fontSize: '14' }, __source: { fileName: _jsxFileName, lineNumber: 215 }, __self: this },
                        /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'span', /* istanbul ignore next */{ style: { padding: '5px 10px', color: "#666" }, __source: { fileName: _jsxFileName, lineNumber: 216 }, __self: this }, /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_reactIntl.FormattedMessage, /* istanbul ignore next */{
                                id: 'pps.configuration.bins.direction.label',
                                description: 'Bin Direction',
                                defaultMessage: 'Current PPS Selection', __source: { fileName: _jsxFileName, lineNumber: 216 }, __self: this })),
                        /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'span', /* istanbul ignore next */{ className: 'currentBinDirection', style: { padding: '5px 10px', border: '1px solid #ccc', borderRadius: 20 }, __source: { fileName: _jsxFileName, lineNumber: 220 }, __self: this },
                            /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'span', /* istanbul ignore next */{ className: self.state.currentBinDirection === 'left' ? 'active' : null,
                                    onClick: self.setBinDirection.bind(this, 'left'),
                                    style: { padding: '5px 10px', cursor: 'pointer' }, __source: { fileName: _jsxFileName, lineNumber: 221 }, __self: this }, /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_reactIntl.FormattedMessage, /* istanbul ignore next */{
                                    id: 'pps.configuration.bins.direction.left',
                                    description: 'Bin Direction LEFT',
                                    defaultMessage: 'LEFT', __source: { fileName: _jsxFileName, lineNumber: 223 }, __self: this })),
                            /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'span', /* istanbul ignore next */{ className: self.state.currentBinDirection === 'right' ? 'active' : null,
                                    onClick: self.setBinDirection.bind(this, 'right'),
                                    style: { padding: '5px 10px', cursor: 'pointer' }, __source: { fileName: _jsxFileName, lineNumber: 227 }, __self: this }, /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_reactIntl.FormattedMessage, /* istanbul ignore next */{
                                    id: 'pps.configuration.bins.direction.right',
                                    description: 'Bin Direction RIGHT',
                                    defaultMessage: 'RIGHT', __source: { fileName: _jsxFileName, lineNumber: 229 }, __self: this }))))),





                this.props.currentView === 'groups' &&
                /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ style: { padding: '2% 4%', color: '#666', overflow: 'auto', clear: 'both' }, __source: { fileName: _jsxFileName, lineNumber: 239 }, __self: this },

                    /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ style: { width: '65%', float: 'left' }, __source: { fileName: _jsxFileName, lineNumber: 241 }, __self: this },
                        /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_reactIntl.FormattedMessage, /* istanbul ignore next */{
                            id: 'pps.configuration.bins.group.selection.count',
                            description: 'total users for filter search bar',
                            defaultMessage: 'Select a bin group to enable or disable ({disabled}/{total} groups disabled)',
                            values: {
                                disabled: self.props.selectedProfile.bin_group_details.filter(function (group) {
                                    return !group.enabled;
                                }).length.toString(), total: self.props.selectedProfile.bin_group_details.length }, __source: { fileName: _jsxFileName, lineNumber: 242 }, __self: this })),



                    self.state.currentBinDirection && /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ style: { width: '35%', 'float': 'right', fontSize: '14' }, __source: { fileName: _jsxFileName, lineNumber: 253 }, __self: this },
                        /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'span', /* istanbul ignore next */{ style: { padding: '5px 10px', color: "#666" }, __source: { fileName: _jsxFileName, lineNumber: 254 }, __self: this }, /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_reactIntl.FormattedMessage, /* istanbul ignore next */{
                                id: 'pps.configuration.bins.direction.label',
                                description: 'Bin Direction',
                                defaultMessage: 'Current PPS Selection', __source: { fileName: _jsxFileName, lineNumber: 254 }, __self: this })),
                        /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'span', /* istanbul ignore next */{ className: 'currentBinDirection', style: { padding: '5px 10px', border: '1px solid #ccc', borderRadius: 20 }, __source: { fileName: _jsxFileName, lineNumber: 258 }, __self: this },
                            /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'span', /* istanbul ignore next */{ className: self.state.currentBinDirection === 'left' ? 'active' : null,
                                    onClick: self.setBinDirection.bind(this, 'left'),
                                    style: { padding: '5px 10px', cursor: 'pointer' }, __source: { fileName: _jsxFileName, lineNumber: 259 }, __self: this }, /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_reactIntl.FormattedMessage, /* istanbul ignore next */{
                                    id: 'pps.configuration.bins.direction.left',
                                    description: 'Bin Direction LEFT',
                                    defaultMessage: 'LEFT', __source: { fileName: _jsxFileName, lineNumber: 261 }, __self: this })),
                            /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'span', /* istanbul ignore next */{ className: self.state.currentBinDirection === 'right' ? 'active' : null,
                                    onClick: self.setBinDirection.bind(this, 'right'),
                                    style: { padding: '5px 10px', cursor: 'pointer' }, __source: { fileName: _jsxFileName, lineNumber: 265 }, __self: this }, /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_reactIntl.FormattedMessage, /* istanbul ignore next */{
                                    id: 'pps.configuration.bins.direction.right',
                                    description: 'Bin Direction RIGHT',
                                    defaultMessage: 'RIGHT', __source: { fileName: _jsxFileName, lineNumber: 267 }, __self: this }))))),






                /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ style: {
                            width: container.x,
                            margin: 'auto',
                            height: container.y,
                            maxWidth: container.x,
                            overflow: 'scroll',
                            maxHeight: container.y,
                            position: 'relative' }, __source: { fileName: _jsxFileName, lineNumber: 277 }, __self: this },



                    self.props.selectedProfile.pps_bin_details.filter(function (bin) {
                        return !self.state.currentBinDirection || bin.direction === self.state.currentBinDirection;
                    }).map(function (bin, index) {
                        let bin_id = [self.props.selectedPPS.pps_id, bin.pps_bin_id].join("-");
                        let selected_bin = self.props.selectedPPSBin && self.props.selectedPPSBin[self.props.currentView] && self.props.selectedPPSBin[self.props.currentView].id === bin_id;
                        return (/* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ key: bin.pps_bin_id, style: {
                                        display: 'inline-block',
                                        position: 'absolute',
                                        left: bin.orig_cordinates[0] * container.x / total_x,
                                        top: bin.orig_cordinates[1] * container.y / total_y,
                                        width: bin.length * container.x / total_x,
                                        height: bin.breadth * container.y / total_y }, __source: { fileName: _jsxFileName, lineNumber: 293 }, __self: this },


                                self.props.currentView === 'tags' && /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{
                                        onClick: selected_bin ? self.clearSelectionPPSBin.bind(self, bin, self.props.currentView) : self.selectBin.bind(self, bin, self.props.currentView),
                                        className: [selected_bin ? 'selected' : null].join(" "),
                                        key: bin.pps_bin_id,

                                        style: {
                                            height: '100%',
                                            boxSizing: 'border-box',
                                            width: '100%',
                                            border: '10px solid white' }, __source: { fileName: _jsxFileName, lineNumber: 302 }, __self: this },

                                    /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'span', /* istanbul ignore next */{ className: ["pps-bin"].join(" "), __source: { fileName: _jsxFileName, lineNumber: 313 }, __self: this },
                                        /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'span', /* istanbul ignore next */{ className: 'pps-bin-tag-info', __source: { fileName: _jsxFileName, lineNumber: 314 }, __self: this },
                                            /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'span', /* istanbul ignore next */{ className: 'gor-tag-icon-grey', __source: { fileName: _jsxFileName, lineNumber: 315 }, __self: this }), bin.bin_tags.length, /* istanbul ignore next */' ', /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_reactIntl.FormattedMessage, /* istanbul ignore next */{
                                                id: 'pps.configuration.bins.tagCount.text',
                                                description: 'Tag',
                                                defaultMessage: 'Tag', __source: { fileName: _jsxFileName, lineNumber: 315 }, __self: this })),
                                        /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'span', /* istanbul ignore next */{ className: 'pps-bin-info', __source: { fileName: _jsxFileName, lineNumber: 319 }, __self: this }, bin.pps_bin_id))),



                                self.props.currentView === 'bins' && /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{
                                        onClick: selected_bin ? self.clearSelectionPPSBin.bind(self, bin, self.props.currentView) : self.selectBin.bind(self, bin, self.props.currentView),
                                        className: [selected_bin ? 'selected' : null].join(" "),
                                        key: bin.pps_bin_id,

                                        style: {
                                            height: '100%',
                                            boxSizing: 'border-box',
                                            width: '100%',
                                            border: '10px solid white' }, __source: { fileName: _jsxFileName, lineNumber: 323 }, __self: this },

                                    /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'span', /* istanbul ignore next */{ className: ["pps-bin", !bin.enabled ? 'disabled' : ''].join(" "), __source: { fileName: _jsxFileName, lineNumber: 334 }, __self: this },
                                        /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'span', /* istanbul ignore next */{ className: 'pps-bin-tag-info', __source: { fileName: _jsxFileName, lineNumber: 335 }, __self: this },
                                            /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'span', /* istanbul ignore next */{ style: { display: 'inline-block', width: 16, height: 16 }, __source: { fileName: _jsxFileName, lineNumber: 336 }, __self: this }), /* istanbul ignore next */' '),
                                        /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'span', /* istanbul ignore next */{ className: 'pps-bin-info', __source: { fileName: _jsxFileName, lineNumber: 337 }, __self: this }, bin.pps_bin_id))),



                                self.props.currentView === 'groups' && /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{
                                        key: bin.pps_bin_id,
                                        onClick: self.selectPPSBinGroup.bind(self, bin.bin_group_id),
                                        className: ["pps-bin-group", "pps-bin-group-" + bin.bin_group_id, self.props.selectedPPSBinGroup.bin_group_id === bin.bin_group_id ? 'highlight' : null, self.isDisabledGroup.call(self, bin.bin_group_id) ? 'disabled' : ''].join(" "),
                                        style: {
                                            height: '100%',
                                            boxSizing: 'border-box',
                                            width: '100%' }, __source: { fileName: _jsxFileName, lineNumber: 341 }, __self: this },

                                    /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'span', /* istanbul ignore next */{ className: ["pps-bin", !bin.enabled ? 'disabled' : ''].join(" "), __source: { fileName: _jsxFileName, lineNumber: 350 }, __self: this },
                                        /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'span', /* istanbul ignore next */{ className: 'pps-bin-tag-info', __source: { fileName: _jsxFileName, lineNumber: 351 }, __self: this },
                                            /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'span', /* istanbul ignore next */{ style: { display: 'inline-block', width: 16, height: 16 }, __source: { fileName: _jsxFileName, lineNumber: 352 }, __self: this }), /* istanbul ignore next */' '),
                                        /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'span', /* istanbul ignore next */{ className: 'pps-bin-info', __source: { fileName: _jsxFileName, lineNumber: 353 }, __self: this }, bin.pps_bin_id)))));



                    })),



                self.props.currentView === 'bins' &&
                /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'pps-bin-actions pps-bin-row', style: { textAlign: 'center' }, __source: { fileName: _jsxFileName, lineNumber: 362 }, __self: this },
                    self.props.selectedPPSBin && self.props.selectedPPSBin['bins'] ?
                    /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'button', /* istanbul ignore next */{
                            disabled: self.props.selectedPPSBin['bins'].enabled,
                            className: 'pps-bin-action-button',
                            onClick: self.changePPSBinStatus.bind(self, self.props.selectedPPSBin['bins'], true), __source: { fileName: _jsxFileName, lineNumber: 364 }, __self: this },
                        /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_reactIntl.FormattedMessage, /* istanbul ignore next */{ id: 'pps.configuration.bins.activation.button.text',
                            description: 'ACTIVATE',
                            defaultMessage: 'ACTIVATE', __source: { fileName: _jsxFileName, lineNumber: 368 }, __self: this })) :
                    /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'button', /* istanbul ignore next */{
                            disabled: true,
                            className: 'pps-bin-action-button', __source: { fileName: _jsxFileName, lineNumber: 371 }, __self: this },
                        /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_reactIntl.FormattedMessage, /* istanbul ignore next */{ id: 'pps.configuration.bins.activation.button.text',
                            description: 'ACTIVATE',
                            defaultMessage: 'ACTIVATE', __source: { fileName: _jsxFileName, lineNumber: 374 }, __self: this })),


                    self.props.currentView === 'bins' && self.props.selectedPPSBin && self.props.selectedPPSBin['bins'] ?
                    /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'button', /* istanbul ignore next */{
                            disabled: !self.props.selectedPPSBin['bins'].enabled,
                            className: 'pps-bin-action-button',
                            onClick: self.changePPSBinStatus.bind(self, self.props.selectedPPSBin['bins'], false), __source: { fileName: _jsxFileName, lineNumber: 380 }, __self: this },
                        /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_reactIntl.FormattedMessage, /* istanbul ignore next */{ id: 'pps.configuration.bins.deactivation.button.text',
                            description: 'DEACTIVATE',
                            defaultMessage: 'DEACTIVATE', __source: { fileName: _jsxFileName, lineNumber: 384 }, __self: this })) :
                    /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'button', /* istanbul ignore next */{ disabled: true,
                            className: 'pps-bin-action-button', __source: { fileName: _jsxFileName, lineNumber: 387 }, __self: this },
                        /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_reactIntl.FormattedMessage, /* istanbul ignore next */{ id: 'pps.configuration.bins.deactivation.button.text',
                            description: 'DEACTIVATE',
                            defaultMessage: 'DEACTIVATE', __source: { fileName: _jsxFileName, lineNumber: 389 }, __self: this }))),




                self.props.currentView === 'groups' &&
                /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'pps-bin-actions pps-bin-row', style: { textAlign: 'center' }, __source: { fileName: _jsxFileName, lineNumber: 397 }, __self: this },
                    self.props.selectedPPSBinGroup.bin_group_id ?
                    /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'button', /* istanbul ignore next */{
                            disabled: self.props.selectedPPSBinGroup.enabled,
                            className: 'pps-bin-action-button',
                            onClick: self.changePPSBinGroupStatus.bind(self, true), __source: { fileName: _jsxFileName, lineNumber: 399 }, __self: this },
                        /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_reactIntl.FormattedMessage, /* istanbul ignore next */{ id: 'pps.configuration.bins.group.enable.button.text',
                            description: 'ENABLE',
                            defaultMessage: 'ENABLE', __source: { fileName: _jsxFileName, lineNumber: 403 }, __self: this })) :
                    /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'button', /* istanbul ignore next */{
                            disabled: true,
                            className: 'pps-bin-action-button', __source: { fileName: _jsxFileName, lineNumber: 406 }, __self: this },
                        /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_reactIntl.FormattedMessage, /* istanbul ignore next */{ id: 'pps.configuration.bins.group.enable.button.text',
                            description: 'ENABLE',
                            defaultMessage: 'ENABLE', __source: { fileName: _jsxFileName, lineNumber: 409 }, __self: this })),


                    self.props.selectedPPSBinGroup.bin_group_id ?
                    /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'button', /* istanbul ignore next */{
                            disabled: !self.props.selectedPPSBinGroup.enabled,
                            className: 'pps-bin-action-button',
                            onClick: self.changePPSBinGroupStatus.bind(self, false), __source: { fileName: _jsxFileName, lineNumber: 415 }, __self: this },
                        /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_reactIntl.FormattedMessage, /* istanbul ignore next */{ id: 'pps.configuration.bins.group.disable.button.text',
                            description: 'DISABLE',
                            defaultMessage: 'DISABLE', __source: { fileName: _jsxFileName, lineNumber: 419 }, __self: this })) :
                    /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'button', /* istanbul ignore next */{ disabled: true,
                            className: 'pps-bin-action-button', __source: { fileName: _jsxFileName, lineNumber: 422 }, __self: this },
                        /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_reactIntl.FormattedMessage, /* istanbul ignore next */{ id: 'pps.configuration.bins.group.disable.button.text',
                            description: 'DISABLE',
                            defaultMessage: 'DISABLE', __source: { fileName: _jsxFileName, lineNumber: 424 }, __self: this })))));





    }}

function mapStateToProps(state, ownProps) {
    return {
        selectedProfile: state.ppsConfiguration.selectedProfile,
        selectedPPS: state.ppsConfiguration.selectedPPS,
        selectedPPSBin: state.ppsConfiguration.selectedPPSBin,
        ppsList: state.ppsConfiguration.ppsList,
        selectedPPSBinGroup: state.ppsConfiguration.selectedPPSBinGroup || {} };

}

var mapDispatchToProps = function mapDispatchToProps(dispatch) {
    return {
        selectPPSBin: function /* istanbul ignore next */selectPPSBin(data) {
            dispatch( /* istanbul ignore next */(0, _ppsConfigurationActions.selectPPSBin)(data));
        },
        clearSelectionPPSBin: function /* istanbul ignore next */clearSelectionPPSBin(data) {
            dispatch( /* istanbul ignore next */(0, _ppsConfigurationActions.clearSelectionPPSBin)(data));
        },
        changePPSBinStatus: function /* istanbul ignore next */changePPSBinStatus(data) {
            dispatch( /* istanbul ignore next */(0, _ppsConfigurationActions.changePPSBinStatus)(data));
        },
        selectPPSBinGroup: function /* istanbul ignore next */selectPPSBinGroup(data) {
            dispatch( /* istanbul ignore next */(0, _ppsConfigurationActions.selectPPSBinGroup)(data));
        },
        changePPSBinGroupStatus: function /* istanbul ignore next */changePPSBinGroupStatus(data) {
            dispatch( /* istanbul ignore next */(0, _ppsConfigurationActions.changePPSBinGroupStatus)(data));
        } };


}; /* istanbul ignore next */exports.default =

/* istanbul ignore next */(0, _reactRedux.connect)(mapStateToProps, mapDispatchToProps)(Bins);