/* istanbul ignore next */'use strict';var _jsxFileName = '/Users/raja.d/GOR/gor.butler.ui.managerdashboard/src/__tests__/components/zoning/sysOverview-container-tests.js';var /* istanbul ignore next */_react = require('react'); /* istanbul ignore next */var _react2 = _interopRequireDefault(_react);
var /* istanbul ignore next */_reactRedux = require('react-redux');
var /* istanbul ignore next */_sysOverview = require('../../../containers/systemTabs/sysOverview.js'); /* istanbul ignore next */var _sysOverview2 = _interopRequireDefault(_sysOverview);
var /* istanbul ignore next */_zoneTile = require('../../../components/systemOverview/zoneTile.js'); /* istanbul ignore next */var _zoneTile2 = _interopRequireDefault(_zoneTile);
var /* istanbul ignore next */_mockIntlJson = require('../../../../mock/mock-intl-json.js');
var /* istanbul ignore next */_reactIntlRedux = require('react-intl-redux');
var /* istanbul ignore next */_enzyme = require('enzyme');
var /* istanbul ignore next */_reactTestRenderer = require('react-test-renderer'); /* istanbul ignore next */var _reactTestRenderer2 = _interopRequireDefault(_reactTestRenderer);
var /* istanbul ignore next */_reduxMockStore = require('redux-mock-store'); /* istanbul ignore next */var _reduxMockStore2 = _interopRequireDefault(_reduxMockStore);function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}

const intl_messages = /* istanbul ignore next */_mockIntlJson.messages;


describe('REACT-REDUX (Deep + passing the {store} using provider)', () => {
  const initialState = {
    subscribed: false,
    recieveSocketActions: {
      socketAuthorized: true },

    sysOverviewReducer: {
      hasDataChanged: true,
      zones: {
        "zones_data": {
          "1": {
            "zone_status": "operation_normal" },

          "2": {
            "zone_status": "emergency_pause" },

          "3": {
            "zone_status": "emergency_stop" },

          "4": {
            "zone_status": "zone_pause_activated" },

          "5": {
            "zone_status": "zone_clear_initiated" },

          "6": {
            "zone_status": "zone_pause_initiated" },

          "7": {
            "zone_status": "zone_clear_activated" },

          "8": {
            "zone_status": "zone_clear_deactivated" } },


        "emergency_data": {
          "emergency_on": false,
          "emergency_type": "stop" } },


      zoneSubscriptionInitiated: true },


    zoningReducer: {
      zoneHeader: {} },

    intl: {
      locale: "en-US" } };


  const mockStore = /* istanbul ignore next */(0, _reduxMockStore2.default)();
  let store, container;

  beforeEach(() => {
    store = mockStore(initialState);
    container = /* istanbul ignore next */(0, _enzyme.mount)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_reactRedux.Provider, /* istanbul ignore next */{ store: store, __source: { fileName: _jsxFileName, lineNumber: 69 }, __self: undefined },
      /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_reactIntlRedux.IntlProvider, /* istanbul ignore next */{ messages: intl_messages, locale: "en-US", __source: { fileName: _jsxFileName, lineNumber: 70 }, __self: undefined },
        /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_sysOverview2.default, /* istanbul ignore next */{ __source: { fileName: _jsxFileName, lineNumber: 71 }, __self: undefined }))));

    //shallow(<SystemOverview store={store} /> )  
  });

  it('+++ render the connected(SMART) component', () => {
    expect(container.find( /* istanbul ignore next */_sysOverview2.default).length).toEqual(1);
  });

  it('+++ Checking count of zone tiles', () => {
    expect(container.find( /* istanbul ignore next */_zoneTile2.default).length).toEqual(8);
  });


});