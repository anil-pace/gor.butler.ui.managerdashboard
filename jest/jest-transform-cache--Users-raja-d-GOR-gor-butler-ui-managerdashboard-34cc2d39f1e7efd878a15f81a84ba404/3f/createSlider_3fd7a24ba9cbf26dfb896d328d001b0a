/* istanbul ignore next */'use strict';Object.defineProperty(exports, "__esModule", { value: true });var _jsxFileName = '/Users/raja.d/GOR/gor.butler.ui.managerdashboard/src/components/rangeSlider/common/createSlider.js';
//import addEventListener from 'rc-util/lib/Dom/addEventListener';
exports.default =








createSlider;var /* istanbul ignore next */_react = require('react'); /* istanbul ignore next */var _react2 = _interopRequireDefault(_react);var /* istanbul ignore next */_classnames = require('classnames'); /* istanbul ignore next */var _classnames2 = _interopRequireDefault(_classnames);var /* istanbul ignore next */_warning = require('warning'); /* istanbul ignore next */var _warning2 = _interopRequireDefault(_warning);var /* istanbul ignore next */_steps = require('./steps'); /* istanbul ignore next */var _steps2 = _interopRequireDefault(_steps);var /* istanbul ignore next */_marks = require('./marks'); /* istanbul ignore next */var _marks2 = _interopRequireDefault(_marks);var /* istanbul ignore next */_handle = require('../handle'); /* istanbul ignore next */var _handle2 = _interopRequireDefault(_handle);var /* istanbul ignore next */_utils = require('../utils'); /* istanbul ignore next */var utils = _interopRequireWildcard(_utils); /* istanbul ignore next */function _interopRequireWildcard(obj) {if (obj && obj.__esModule) {return obj;} else {var newObj = {};if (obj != null) {for (var key in obj) {if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];}}newObj.default = obj;return newObj;}}function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}function _objectWithoutProperties(obj, keys) {var target = {};for (var i in obj) {if (keys.indexOf(i) >= 0) continue;if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;target[i] = obj[i];}return target;}function noop() {}function createSlider(Component) {/* istanbul ignore next */var _class, _temp;
  return (/* istanbul ignore next */_temp = _class = class ComponentEnhancer extends Component {











































      constructor(props) {
        super(props); /* istanbul ignore next */this.



















        onMouseDown = e => {
          if (e.button !== 0) {return;}

          const isVertical = this.props.vertical;
          let position = utils.getMousePosition(isVertical, e);
          if (!utils.isEventFromHandle(e, this.handlesRefs)) {
            this.dragOffset = 0;
          } else {
            const handlePosition = utils.getHandleCenterPosition(isVertical, e.target);
            this.dragOffset = position - handlePosition;
            position = handlePosition;
          }
          this.onStart(position);
          this.addDocumentMouseEvents();
          utils.pauseEvent(e);
        }; /* istanbul ignore next */this.

        onTouchStart = e => {
          if (utils.isNotTouchEvent(e)) return;

          const isVertical = this.props.vertical;
          let position = utils.getTouchPosition(isVertical, e);
          if (!utils.isEventFromHandle(e, this.handlesRefs)) {
            this.dragOffset = 0;
          } else {
            const handlePosition = utils.getHandleCenterPosition(isVertical, e.target);
            this.dragOffset = position - handlePosition;
            position = handlePosition;
          }
          this.onStart(position);
          this.addDocumentTouchEvents();
          utils.pauseEvent(e);
        }; /* istanbul ignore next */this.






















        onMouseMove = e => {
          if (!this.sliderRef) {
            this.onEnd();
            return;
          }
          const position = utils.getMousePosition(this.props.vertical, e);
          this.onMove(e, position - this.dragOffset);
        }; /* istanbul ignore next */this.

        onTouchMove = e => {
          if (utils.isNotTouchEvent(e) || !this.sliderRef) {
            this.onEnd();
            return;
          }

          const position = utils.getTouchPosition(this.props.vertical, e);
          this.onMove(e, position - this.dragOffset);
        }; /* istanbul ignore next */this.





































        saveSlider = slider => {
          this.sliderRef = slider;
        };if (process.env.NODE_ENV !== 'production') {/* istanbul ignore next */const step = props.step,max = props.max,min = props.min; /* istanbul ignore next */(0, _warning2.default)(step && Math.floor(step) === step ? (max - min) % step === 0 : true, 'Slider[max] - Slider[min] (%s) should be a multiple of Slider[step] (%s)', max - min, step);}this.handlesRefs = {};}componentWillUnmount() {if (super.componentWillUnmount) super.componentWillUnmount();this.removeDocumentEvents();}addDocumentTouchEvents() {// just work for Chrome iOS Safari and Android Browser
        this.onTouchMoveListener = document.addEventListener('touchmove', this.onTouchMove);this.onTouchUpListener = document.addEventListener('touchend', this.onEnd);}addDocumentMouseEvents() {this.onMouseMoveListener = document.addEventListener('mousemove', this.onMouseMove);this.onMouseUpListener = document.addEventListener('mouseup', this.onEnd);}removeDocumentEvents() {/* eslint-disable no-unused-expressions */this.onTouchMoveListener && this.onTouchMoveListener.remove();this.onTouchUpListener && this.onTouchUpListener.remove();this.onMouseMoveListener && this.onMouseMoveListener.remove();this.onMouseUpListener && this.onMouseUpListener.remove(); /* eslint-enable no-unused-expressions */}getSliderStart() {const slider = this.sliderRef;const rect = slider.getBoundingClientRect();return this.props.vertical ? rect.top : rect.left;}getSliderLength() {const slider = this.sliderRef;if (!slider) {return 0;}return this.props.vertical ? slider.clientHeight : slider.clientWidth;}calcValue(offset) {/* istanbul ignore next */var _props = this.props; /* istanbul ignore next */const vertical = _props.vertical,min = _props.min,max = _props.max;const ratio = Math.abs(Math.max(offset, 0) / this.getSliderLength());const value = vertical ? (1 - ratio) * (max - min) + min : ratio * (max - min) + min;return value;}calcValueByPos(position) {const pixelOffset = position - this.getSliderStart();const nextValue = this.trimAlignValue(this.calcValue(pixelOffset));return nextValue;}calcOffset(value) {/* istanbul ignore next */var _props2 = this.props; /* istanbul ignore next */const min = _props2.min,max = _props2.max;const ratio = (value - min) / (max - min);return ratio * 100;}
      saveHandle(index, handle) {
        this.handlesRefs[index] = handle;
      }

      render() {/* istanbul ignore next */var _props3 =













        this.props; /* istanbul ignore next */const prefixCls = _props3.prefixCls,className = _props3.className,marks = _props3.marks,dots = _props3.dots,step = _props3.step,included = _props3.included,disabled = _props3.disabled,vertical = _props3.vertical,min = _props3.min,max = _props3.max,children = _props3.children,style = _props3.style; /* istanbul ignore next */var _render =
        super.render(); /* istanbul ignore next */const tracks = _render.tracks,handles = _render.handles;

        const sliderClassName = /* istanbul ignore next */(0, _classnames2.default)({
          [prefixCls]: true,
          [`${prefixCls}-with-marks`]: Object.keys(marks).length,
          [`${prefixCls}-disabled`]: disabled,
          [`${prefixCls}-vertical`]: vertical,
          [className]: className });

        return (
          /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{
              ref: this.saveSlider,
              className: sliderClassName,
              onTouchStart: disabled ? noop : this.onTouchStart,
              onMouseDown: disabled ? noop : this.onMouseDown,
              style: style, __source: { fileName: _jsxFileName, lineNumber: 221 }, __self: this },

            /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: `${prefixCls}-rail`, __source: { fileName: _jsxFileName, lineNumber: 228 }, __self: this }),
            tracks,
            /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_steps2.default, /* istanbul ignore next */{
              prefixCls: prefixCls,
              vertical: vertical,
              marks: marks,
              dots: dots,
              step: step,
              included: included,
              lowerBound: this.getLowerBound(),
              upperBound: this.getUpperBound(),
              max: max,
              min: min, __source: { fileName: _jsxFileName, lineNumber: 230 }, __self: this }),

            handles,
            /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_marks2.default, /* istanbul ignore next */{
              className: `${prefixCls}-mark`,
              vertical: vertical,
              marks: marks,
              included: included,
              lowerBound: this.getLowerBound(),
              upperBound: this.getUpperBound(),
              max: max,
              min: min, __source: { fileName: _jsxFileName, lineNumber: 243 }, __self: this }),

            children));


      }}, _class.displayName = `ComponentEnhancer(${Component.displayName})`, _class.propTypes = Object.assign({}, Component.propTypes, { min: /* istanbul ignore next */_react.PropTypes.number, max: /* istanbul ignore next */_react.PropTypes.number, step: /* istanbul ignore next */_react.PropTypes.number, marks: /* istanbul ignore next */_react.PropTypes.object, included: /* istanbul ignore next */_react.PropTypes.bool, className: /* istanbul ignore next */_react.PropTypes.string, prefixCls: /* istanbul ignore next */_react.PropTypes.string, disabled: /* istanbul ignore next */_react.PropTypes.bool, children: /* istanbul ignore next */_react.PropTypes.any, onBeforeChange: /* istanbul ignore next */_react.PropTypes.func, onChange: /* istanbul ignore next */_react.PropTypes.func, onAfterChange: /* istanbul ignore next */_react.PropTypes.func, handle: /* istanbul ignore next */_react.PropTypes.func, dots: /* istanbul ignore next */_react.PropTypes.bool, vertical: /* istanbul ignore next */_react.PropTypes.bool, style: /* istanbul ignore next */_react.PropTypes.object }), _class.defaultProps = Object.assign({}, Component.defaultProps, { prefixCls: 'rc-slider', className: '', min: 0, max: 100, step: 1, marks: {}, handle( /* istanbul ignore next */_ref) {/* istanbul ignore next */let index = _ref.index,restProps = _objectWithoutProperties(_ref, ['index']);delete restProps.dragging;delete restProps.value;return (/* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_handle2.default, /* istanbul ignore next */Object.assign({}, restProps, { key: index, __source: { fileName: _jsxFileName, lineNumber: 46 }, __self: this })));}, onBeforeChange: noop, onChange: noop, onAfterChange: noop, included: true, disabled: false, dots: false, vertical: false }), _temp);

}