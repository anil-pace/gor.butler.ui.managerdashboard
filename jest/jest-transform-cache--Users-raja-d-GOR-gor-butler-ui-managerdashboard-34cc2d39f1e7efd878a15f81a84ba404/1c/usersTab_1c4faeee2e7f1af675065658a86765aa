/* istanbul ignore next */'use strict';Object.defineProperty(exports, "__esModule", { value: true });var _jsxFileName = '/Users/raja.d/GOR/gor.butler.ui.managerdashboard/src/containers/userTab/usersTab.js';var /* istanbul ignore next */_react = require('react'); /* istanbul ignore next */var _react2 = _interopRequireDefault(_react);
var /* istanbul ignore next */_userTabTable = require('./userTabTable'); /* istanbul ignore next */var _userTabTable2 = _interopRequireDefault(_userTabTable);
var /* istanbul ignore next */_reactRedux = require('react-redux');
var /* istanbul ignore next */_reactIntl = require('react-intl');
var /* istanbul ignore next */_userActions = require('../../actions/userActions');
var /* istanbul ignore next */_backEndConstants = require('../../constants/backEndConstants');
var /* istanbul ignore next */_sortHeaderActions = require('../../actions/sortHeaderActions');
var /* istanbul ignore next */_frontEndConstants = require('../../constants/frontEndConstants');
var /* istanbul ignore next */_filterAction = require('../../actions/filterAction');
var /* istanbul ignore next */_configConstants = require('../../constants/configConstants');
var /* istanbul ignore next */_socketActions = require('./../../actions/socketActions');
var /* istanbul ignore next */_initData = require('./../../constants/initData.js');
var /* istanbul ignore next */_reactRouter = require('react-router');
var /* istanbul ignore next */_spinnerAction = require('../../actions/spinnerAction');
var /* istanbul ignore next */_reactReduxModal = require('react-redux-modal');
var /* istanbul ignore next */_addNewUser = require('./addNewUser'); /* istanbul ignore next */var _addNewUser2 = _interopRequireDefault(_addNewUser);
var /* istanbul ignore next */_userFilter = require('./userFilter'); /* istanbul ignore next */var _userFilter2 = _interopRequireDefault(_userFilter);

var /* istanbul ignore next */_filterSummary = require('../../components/tableFilter/filterSummary'); /* istanbul ignore next */var _filterSummary2 = _interopRequireDefault(_filterSummary);function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}
//Mesages for internationalization
const messages = /* istanbul ignore next */(0, _reactIntl.defineMessages)({
    userOperator: {
        id: "userDetails.operator",
        defaultMessage: "Operator" },

    userManager: {
        id: "userDetails.manager",
        defaultMessage: "Manager" },

    userPick: {
        id: "userDetails.pick.status",
        defaultMessage: "Pick" },

    auditCompletedStatus: {
        id: "auditdetail.completed.status",
        defaultMessage: "Audited" },

    userPut: {
        id: "userDetails.put.status",
        defaultMessage: "Put" },

    userAudit: {
        id: "userDetails.audit.status",
        defaultMessage: "Audit" },

    userFront: {
        id: "userDetails.front.status",
        defaultMessage: "Front" },

    userBack: {
        id: "userDetails.back.status",
        defaultMessage: "Back" },

    userOnline: {
        id: "userDetails.online.status",
        defaultMessage: "Online" },

    userOffline: {
        id: "userDetails.offline.status",
        defaultMessage: "Offline" },

    userLocation: {
        id: "userDetails.location",
        defaultMessage: "PPS {ppsId}" } });






class UsersTab extends /* istanbul ignore next */_react2.default.Component {
    constructor(props) {
        super(props);
        this.state = { query: null };
    }

    componentDidMount() {
        let userData = {
            'url': /* istanbul ignore next */_configConstants.ROLE_URL,
            'method': /* istanbul ignore next */_frontEndConstants.GET,
            'cause': /* istanbul ignore next */_frontEndConstants.GET_ROLES,
            'contentType': /* istanbul ignore next */_frontEndConstants.APP_JSON,
            'accept': /* istanbul ignore next */_frontEndConstants.APP_JSON,
            'token': this.props.auth_token };

        this.props.userRequest(userData);
    }

    componentWillReceiveProps(nextProps) {
        if (nextProps.socketAuthorized && nextProps.location.query && (!this.state.query || JSON.stringify(nextProps.location.query) !== JSON.stringify(this.state.query))) {
            this.setState({ query: nextProps.location.query });
            this._refreshList(nextProps.location.query);
        }
    }
    _processUserDetails() {
        var nProps = this,
        data = nProps.props.userdetails;
        let operator = nProps.context.intl.formatMessage(messages.userOperator);
        let manager = nProps.context.intl.formatMessage(messages.userManager);
        let pick = nProps.context.intl.formatMessage( /* istanbul ignore next */_backEndConstants.stringConfig.pick);
        let put = nProps.context.intl.formatMessage( /* istanbul ignore next */_backEndConstants.stringConfig.put);
        let audit = nProps.context.intl.formatMessage( /* istanbul ignore next */_backEndConstants.stringConfig.audit);
        let front = nProps.context.intl.formatMessage(messages.userFront);
        let back = nProps.context.intl.formatMessage(messages.userBack);
        let online = nProps.context.intl.formatMessage( /* istanbul ignore next */_backEndConstants.stringConfig.online);
        let offline = nProps.context.intl.formatMessage( /* istanbul ignore next */_backEndConstants.stringConfig.offline);
        var role = { "butler_ui": operator, "butler_supervisor": manager };
        var work_mode = { "pick": pick, "put": put, "audit": audit };
        var work_place = { "front": front, "back": back };


        var userDetails = [],userData = {};
        for (var i = data.length - 1; i >= 0; i--) {

            userData.id = (data[i].first_name || "--") + " " + (data[i].last_name || "--");
            if (data[i].logged_in) {
                userData.status = online;
                userData.statusClass = "online";
                if (data[i].pps.pps_mode && data[i].pps.seat_type) {
                    userData.workMode = work_mode[data[i].pps.pps_mode] + " " + work_place[data[i].pps.seat_type];
                } else

                if (data[i].pps.pps_mode) {
                    userData.workMode = work_mode[data[i].pps.pps_mode];
                }

                userData.location = nProps.context.intl.formatMessage(messages.userLocation, { "ppsId": data[i].pps.pps_id });
                userData.logInTime = nProps.context.intl.formatTime(data[i].login_time, {
                    hour: 'numeric',
                    minute: 'numeric',
                    hour12: false }) +

                " (" + nProps.context.intl.formatRelative(data[i].login_time) + ")";
                ;

            } else

            {
                userData.status = offline;
                userData.statusClass = "offline";
                userData.workMode = "--";
                userData.location = "--";
                userData.logInTime = "--";
            }


            userData.uid = data[i].user_id;
            userData.userName = data[i].user_name;
            userData.first = data[i].first_name;
            userData.last = data[i].last_name;
            userData.roleId = data[i].role;
            if (role.hasOwnProperty(data[i].role)) {
                userData.role = role[data[i].role];
            } else
            {
                userData.role = data[i].role;
            }
            userDetails.push(userData);
            userData = {};
        }

        return userDetails;
    }

    /**
       * The method will update the subscription packet
       * and will fetch the data from the socket.
       * @private
       */
    _refreshList(query) {
        this.props.userFilterApplySpinner(true);
        let filterSubsData = {};
        if (query.username) {
            let name_query = query.username.split(" ");
            name_query = name_query.filter(function (word) {
                return !!word;
            });
            filterSubsData["username"] = name_query.length > 1 ? name_query : name_query.join("").trim();
        }
        if (query.status) {
            query.status = query.status.constructor === Array ? query.status : [query.status];
            if (query.status.length !== 2) {
                filterSubsData["logged_in"] = ['is', query.status[0] === 'online' ? 'true' : 'false'];
            }

        }
        if (query.role) {
            query.role = query.role.constructor === Array ? query.role : [query.role];
            filterSubsData["role"] = ['in', query.role.constructor === Array ? query.role : [query.role]];
        }
        if (query.mode) {
            let pps_list = [];
            query.mode = query.mode.constructor === Array ? query.mode : [query.mode];
            query.mode.forEach(function (mode) {
                pps_list.push(mode.split("__").length > 1 ? {
                    pps_mode: mode.split("__")[0],
                    seat_type: mode.split("__")[1] } :
                { pps_mode: mode.split("__")[0] });
            });
            filterSubsData["pps"] = ['in', pps_list];
        }
        if (Object.keys(query).filter(function (el) {return el !== 'page';}).length !== 0) {
            this.props.toggleUserFilter(true);
            this.props.filterApplied(true);
        } else {
            this.props.toggleUserFilter(false);
            this.props.filterApplied(false);
        }
        let updatedWsSubscription = this.props.wsSubscriptionData;
        updatedWsSubscription["users"].data[0].details["filter_params"] = filterSubsData;
        this.props.initDataSentCall(updatedWsSubscription["users"]);
        this.props.updateSubscriptionPacket(updatedWsSubscription);
        this.props.userfilterState({
            tokenSelected: {
                "STATUS": query.status || ["all"],
                "ROLE": query.role || ['all'],
                "WORK MODE": query.mode || ['all'],
                "LOCATION": ["all"] },
            searchQuery: { "USER NAME": query.username || null },
            defaultToken: { "STATUS": ["all"], "ROLE": ["all"], "WORK MODE": ["all"], "LOCATION": ["all"] } });

    }

    /**
       * The method will update and send the subscription packet
       * to fetch the default list of users
       * @private
       */
    _clearFilter() {
        /* istanbul ignore next */_reactRouter.hashHistory.push({ pathname: "/users", query: {} });
    }

    addModal() {
        /* istanbul ignore next */_reactReduxModal.modal.add( /* istanbul ignore next */_addNewUser2.default, {
            title: '',
            size: 'large', // large, medium or small,
            closeOnOutsideClick: true, // (optional) Switch to true if you want to close the modal by clicking outside of it,
            hideCloseButton: true // (optional) if you don't wanna show the top right close button
            //.. all what you put in here you will get access in the modal props ;),
        });
    }

    _setFilter() {
        var newState = !this.props.showFilter;
        this.props.setFilter(newState);
    }

    render() {
        let filterHeight = screen.height - 190 - 50;
        let updateStatusIntl = "";
        var itemNumber = 7,userData;
        if (this.props.userdetails !== undefined) {
            userData = this._processUserDetails();
        }
        return (
            /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ __source: { fileName: _jsxFileName, lineNumber: 256 }, __self: this },
                /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ __source: { fileName: _jsxFileName, lineNumber: 257 }, __self: this },
                    /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'gor-User-Table', __source: { fileName: _jsxFileName, lineNumber: 258 }, __self: this },
                        /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'gor-filter-wrap',
                                style: { 'width': this.props.showFilter ? '350px' : '0px', height: filterHeight }, __source: { fileName: _jsxFileName, lineNumber: 259 }, __self: this },
                            /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_userFilter2.default, /* istanbul ignore next */{ userData: this.props.userdetails, responseFlag: this.props.responseFlag, __source: { fileName: _jsxFileName, lineNumber: 261 }, __self: this })),


                        /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'gorToolBar', __source: { fileName: _jsxFileName, lineNumber: 264 }, __self: this },
                            /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'gorToolBarWrap', __source: { fileName: _jsxFileName, lineNumber: 265 }, __self: this },
                                /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'gorToolBarElements', __source: { fileName: _jsxFileName, lineNumber: 266 }, __self: this },
                                    /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_reactIntl.FormattedMessage, /* istanbul ignore next */{ id: 'user.table.heading', description: 'Heading for users table',
                                        defaultMessage: 'Users', __source: { fileName: _jsxFileName, lineNumber: 267 }, __self: this })),

                                /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'gorToolBarElements', __source: { fileName: _jsxFileName, lineNumber: 270 }, __self: this },
                                    /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'gor-user-add-wrap', __source: { fileName: _jsxFileName, lineNumber: 271 }, __self: this },
                                        /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'button', /* istanbul ignore next */{ className: 'gor-add-btn', onClick: this.addModal.bind(this), __source: { fileName: _jsxFileName, lineNumber: 272 }, __self: this },
                                            /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_reactIntl.FormattedMessage, /* istanbul ignore next */{ id: 'user.button.heading',
                                                description: 'button heading for users table',
                                                defaultMessage: 'Add new user', __source: { fileName: _jsxFileName, lineNumber: 273 }, __self: this }))))),






                            /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'filterWrapper', __source: { fileName: _jsxFileName, lineNumber: 282 }, __self: this },
                                /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'gorToolBarDropDown', __source: { fileName: _jsxFileName, lineNumber: 283 }, __self: this },
                                    /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'gor-button-wrap', __source: { fileName: _jsxFileName, lineNumber: 284 }, __self: this },
                                        /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{
                                                className: 'gor-button-sub-status', __source: { fileName: _jsxFileName, lineNumber: 285 }, __self: this }, updateStatusIntl, /* istanbul ignore next */' ', updateStatusIntl, /* istanbul ignore next */' '),
                                        /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'button', /* istanbul ignore next */{
                                                className: this.props.userFilterStatus ? "gor-filterBtn-applied" : "gor-filterBtn-btn",
                                                onClick: this.props.showTableFilter.bind(this), __source: { fileName: _jsxFileName, lineNumber: 287 }, __self: this },
                                            /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'gor-manage-task', __source: { fileName: _jsxFileName, lineNumber: 290 }, __self: this }),
                                            /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_reactIntl.FormattedMessage, /* istanbul ignore next */{ id: 'gor.filter.filterLabel', description: 'button label for filter',
                                                defaultMessage: 'Filter data', __source: { fileName: _jsxFileName, lineNumber: 291 }, __self: this })))))),








                        /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_filterSummary2.default, /* istanbul ignore next */{ total: userData.length || 0, isFilterApplied: this.props.isFilterApplied, responseFlag: this.props.responseFlag,
                            filterText: /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_reactIntl.FormattedMessage, /* istanbul ignore next */{ id: 'userList.filter.search.bar',
                                description: 'total users for filter search bar',
                                defaultMessage: '{totalUsers} Users found',
                                values: { totalUsers: userData.length || 0 }, __source: { fileName: _jsxFileName, lineNumber: 302 }, __self: this }),
                            refreshList: this._clearFilter.bind(this),
                            refreshText: /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_reactIntl.FormattedMessage, /* istanbul ignore next */{ id: 'userList.filter.search.bar.showall',
                                description: 'button label for show all',
                                defaultMessage: 'Show all Users', __source: { fileName: _jsxFileName, lineNumber: 307 }, __self: this }), __source: { fileName: _jsxFileName, lineNumber: 301 }, __self: this }),

                        /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_userTabTable2.default, /* istanbul ignore next */{ items: userData, itemNumber: itemNumber, intlMessg: this.props.intlMessages,
                            mid: this.props.manager.users ? this.props.manager.users[0].id : '',
                            sortHeaderState: this.props.userHeaderSort,
                            sortHeaderOrder: this.props.userHeaderSortOrder,
                            currentSortState: this.props.userSortHeader,
                            currentHeaderOrder: this.props.userSortHeaderState,
                            setUserFilter: this.props.userFilterDetail,
                            getUserFilter: this.props.userFilter,
                            refreshList: this._clearFilter.bind(this),
                            userFilterStatus: this.props.userFilterStatus,
                            isFilterApplied: this.props.isFilterApplied,
                            lastUpdatedText: updateStatusIntl,
                            lastUpdated: updateStatusIntl,
                            showFilter: this.props.showFilter,
                            setFilter: this.props.showTableFilter, noResultFound: this.props.noResultFound, __source: { fileName: _jsxFileName, lineNumber: 311 }, __self: this })))));




    }}

;


function mapStateToProps(state, ownProps) {

    return {
        userFilter: state.sortHeaderState.userFilter || "",
        userdetails: state.userDetails.userDetails || [],
        noResultFound: state.userDetails.noResultFound,
        intlMessages: state.intl.messages,
        manager: state.headerData.headerInfo || [],
        userSortHeader: state.sortHeaderState.userHeaderSort || "role",
        userSortHeaderState: state.sortHeaderState.userHeaderSortOrder || /* istanbul ignore next */_frontEndConstants.INITIAL_HEADER_ORDER,
        showFilter: state.filterInfo.filterState || false,
        isFilterApplied: state.filterInfo.isFilterApplied || false,
        userFilterStatus: state.filterInfo.userFilterStatus || false,
        roleList: state.appInfo.roleList || null,
        auth_token: state.authLogin.auth_token,
        wsSubscriptionData: state.recieveSocketActions.socketDataSubscriptionPacket || /* istanbul ignore next */_initData.wsOverviewData,
        socketAuthorized: state.recieveSocketActions.socketAuthorized };


}

var mapDispatchToProps = function mapDispatchToProps(dispatch) {
    return {
        userRequest: function /* istanbul ignore next */userRequest(data) {
            dispatch( /* istanbul ignore next */(0, _userActions.userRequest)(data));
        },
        userFilterDetail: function /* istanbul ignore next */userFilterDetail(data) {
            dispatch( /* istanbul ignore next */(0, _sortHeaderActions.userFilterDetail)(data));
        },
        userHeaderSort: function /* istanbul ignore next */userHeaderSort(data) {
            dispatch( /* istanbul ignore next */(0, _sortHeaderActions.userHeaderSort)(data));
        },
        userHeaderSortOrder: function /* istanbul ignore next */userHeaderSortOrder(data) {
            dispatch( /* istanbul ignore next */(0, _sortHeaderActions.userHeaderSortOrder)(data));
        },
        showTableFilter: function /* istanbul ignore next */showTableFilter(data) {
            dispatch( /* istanbul ignore next */(0, _filterAction.showTableFilter)(data));
        },
        filterApplied: function /* istanbul ignore next */filterApplied(data) {
            dispatch( /* istanbul ignore next */(0, _filterAction.filterApplied)(data));
        },
        updateSubscriptionPacket: function /* istanbul ignore next */updateSubscriptionPacket(data) {
            dispatch( /* istanbul ignore next */(0, _socketActions.updateSubscriptionPacket)(data));
        },
        userfilterState: function /* istanbul ignore next */userfilterState(data) {dispatch( /* istanbul ignore next */(0, _filterAction.userfilterState)(data));},
        toggleUserFilter: function /* istanbul ignore next */toggleUserFilter(data) {dispatch( /* istanbul ignore next */(0, _filterAction.toggleUserFilter)(data));},
        userFilterApplySpinner: function /* istanbul ignore next */userFilterApplySpinner(data) {dispatch( /* istanbul ignore next */(0, _spinnerAction.userFilterApplySpinner)(data));},
        initDataSentCall: function /* istanbul ignore next */initDataSentCall(data) {dispatch( /* istanbul ignore next */(0, _socketActions.setWsAction)({ type: /* istanbul ignore next */_frontEndConstants.WS_ONSEND, data: data }));} };

};

UsersTab.contextTypes = {
    intl: /* istanbul ignore next */_react2.default.PropTypes.object.isRequired };

UsersTab.PropTypes = {
    userFilter: /* istanbul ignore next */_react2.default.PropTypes.string,
    userdetails: /* istanbul ignore next */_react2.default.PropTypes.array,
    manager: /* istanbul ignore next */_react2.default.PropTypes.array,
    userSortHeader: /* istanbul ignore next */_react2.default.PropTypes.string,
    userSortHeaderState: /* istanbul ignore next */_react2.default.PropTypes.string,
    showFilter: /* istanbul ignore next */_react2.default.PropTypes.bool,
    isFilterApplied: /* istanbul ignore next */_react2.default.PropTypes.bool,
    userFilterStatus: /* istanbul ignore next */_react2.default.PropTypes.bool,
    auth_token: /* istanbul ignore next */_react2.default.PropTypes.object,
    userRequest: /* istanbul ignore next */_react2.default.PropTypes.func,
    userFilterDetail: /* istanbul ignore next */_react2.default.PropTypes.func,
    userHeaderSort: /* istanbul ignore next */_react2.default.PropTypes.func,
    userHeaderSortOrder: /* istanbul ignore next */_react2.default.PropTypes.func,
    showTableFilter: /* istanbul ignore next */_react2.default.PropTypes.func,
    filterApplied: /* istanbul ignore next */_react2.default.PropTypes.func,
    wsSubscriptionData: /* istanbul ignore next */_react2.default.PropTypes.object }; /* istanbul ignore next */exports.default =



/* istanbul ignore next */(0, _reactRedux.connect)(mapStateToProps, mapDispatchToProps)(UsersTab);