/* istanbul ignore next */'use strict';Object.defineProperty(exports, "__esModule", { value: true });var _jsxFileName = '/Users/raja.d/GOR/gor.butler.ui.managerdashboard/src/containers/performanceWidget.js';var /* istanbul ignore next */_react = require('react'); /* istanbul ignore next */var _react2 = _interopRequireDefault(_react);
var /* istanbul ignore next */_healthTabs = require('../components/health/healthTabs.js'); /* istanbul ignore next */var _healthTabs2 = _interopRequireDefault(_healthTabs);
var /* istanbul ignore next */_dropdown = require('../components/dropdown/dropdown.js'); /* istanbul ignore next */var _dropdown2 = _interopRequireDefault(_dropdown);
var /* istanbul ignore next */_graph_horizontal = require('../components/graphd3/graph_horizontal'); /* istanbul ignore next */var _graph_horizontal2 = _interopRequireDefault(_graph_horizontal);
var /* istanbul ignore next */_reactRedux = require('react-redux');
var /* istanbul ignore next */_performanceWidgetActions = require('../actions/performanceWidgetActions');
var /* istanbul ignore next */_reactIntl = require('react-intl');
var /* istanbul ignore next */_frontEndConstants = require('../constants/frontEndConstants'); /* istanbul ignore next */function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}


const messages = /* istanbul ignore next */(0, _reactIntl.defineMessages)({
	performanceParam: {
		id: 'performanceParam.graph',
		description: 'Performance param graph',
		defaultMessage: "items/hr" } });



function _getPPSdata(link) {

	let Component = /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_reactIntl.FormattedMessage, /* istanbul ignore next */{ id: 'health.pps', description: 'pps health',
		defaultMessage: 'PPS', __source: { fileName: _jsxFileName, lineNumber: 21 }, __self: this });
	let ppsOn = 0,ppsOff = 0,ppsTotal = 0;
	var pps_data = [
	{ component: { componentNumber: ppsTotal, componentType: Component }, states: { offState: ppsOff, onState: ppsOn } }];

	if (link.ppsPerformance) {
		link = link.ppsPerformance.aggregate_data;
		if (link !== undefined) {
			for (var i = link.length - 1; i >= 0; i--) {
				if (link[i].active === false) {
					ppsOff++;
				} else

				{
					ppsOn++;
				}
			}
		}
		ppsTotal = ppsOn + ppsOff;
		pps_data = [
		{ component: { componentNumber: ppsTotal, componentType: Component }, states: { offState: ppsOff, onState: ppsOn } }];

	}
	return pps_data;
}


function _getButlerdata(link) {

	let Component = /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_reactIntl.FormattedMessage, /* istanbul ignore next */{ id: 'health.Butler', description: 'Butler bots health',
		defaultMessage: 'Butler bots', __source: { fileName: _jsxFileName, lineNumber: 51 }, __self: this });
	let butlerTotal = 0,butlerOn = 0,butlerOff = 0;
	var butler_data = [
	{ component: { componentNumber: butlerTotal, componentType: Component }, states: { offState: butlerOff, onState: butlerOn } }];


	if (link.butlersData) {
		if (link.butlersData.active !== undefined && link.butlersData.inactive !== null) {
			butlerOn = link.butlersData.active;
		}

		if (link.butlersData.active !== undefined && link.butlersData.inactive !== null) {
			butlerOff = link.butlersData.inactive;
		}
		butlerTotal = butlerOn + butlerOff;
		butler_data = [
		{ component: { componentNumber: butlerTotal, componentType: Component }, states: { offState: butlerOff, onState: butlerOn } }];

	}

	return butler_data;
}

function _getChargingdata(link) {
	let Component = /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_reactIntl.FormattedMessage, /* istanbul ignore next */{ id: 'health.ChargingStation', description: 'Charging Stations health',
		defaultMessage: 'Charging Stations', __source: { fileName: _jsxFileName, lineNumber: 76 }, __self: this });

	let connected = 0,disconnected = 0,totalChargers = 0;

	var charging_data = [
	{ component: { componentNumber: totalChargers, componentType: Component }, states: { offState: disconnected, onState: connected } }];

	if (link.chargersData) {
		if (link.chargersData.Connected !== undefined && link.chargersData.Connected !== null) {
			connected = link.chargersData.Connected;
		}

		if (link.chargersData.Disconnected !== undefined && link.chargersData.Disconnected !== null) {
			disconnected = link.chargersData.Disconnected;
		}
		totalChargers = connected + disconnected;
		charging_data = [
		{ component: { componentNumber: totalChargers, componentType: Component }, states: { offState: disconnected, onState: connected } }];

	}

	return charging_data;
}

class PerformanceWidget extends /* istanbul ignore next */_react2.default.Component {


	componentWillReceiveProps(nextProps) {
		this.setState({ renderState: nextProps.widget });
	}

	render() {
		let systemHealth = /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_reactIntl.FormattedMessage, /* istanbul ignore next */{ id: 'systemHealth.dropdown', description: 'systemHealth dropdown label',
			defaultMessage: 'System Health', __source: { fileName: _jsxFileName, lineNumber: 109 }, __self: this });

		let pickPerformance = /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_reactIntl.FormattedMessage, /* istanbul ignore next */{ id: 'PPSpickPerformance.dropdown', description: 'PPSpickPerformance dropdown label',
			defaultMessage: 'PPS Pick Performance', __source: { fileName: _jsxFileName, lineNumber: 112 }, __self: this });

		let putPerformance = /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_reactIntl.FormattedMessage, /* istanbul ignore next */{ id: 'PPSputPerformance.dropdown', description: 'PPSputPerformance dropdown label',
			defaultMessage: 'PPS Put Performance', __source: { fileName: _jsxFileName, lineNumber: 115 }, __self: this });

		let auditPerformance = /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_reactIntl.FormattedMessage, /* istanbul ignore next */{ id: 'PPSauditPerformance.dropdown', description: 'PPSauditPerformance dropdown label',
			defaultMessage: 'PPS Audit Performance', __source: { fileName: _jsxFileName, lineNumber: 118 }, __self: this });

		const item = [
		{ value: 'RENDER_SYSTEM_HEALTH', label: systemHealth },
		{ value: 'PICK_PPS_PERFORMANCE', label: pickPerformance },
		{ value: 'PUT_PPS_PERFORMANCE', label: putPerformance },
		{ value: 'AUDIT_PPS_PERFORMANCE', label: auditPerformance }];

		var currentState = item[0],index = 0;
		if (this.props.widget !== undefined || this.props.widget !== null) {
			for (var i = 0; i < item.length; i++) {
				if (item[i].value === this.props.widget) {
					index = i;
				}
			}
		}
		var link = this;
		var pps_data = _getPPSdata(this.props.ppsPerformance);
		var butler_data = _getButlerdata(this.props.butlersData);
		var charging_data = _getChargingdata(this.props.chargersData);

		var itemRender;

		var noData = /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_reactIntl.FormattedMessage, /* istanbul ignore next */{ id: 'health.noData', description: 'pps graph nodata', defaultMessage: 'No Data', __source: { fileName: _jsxFileName, lineNumber: 142 }, __self: this });
		if (this.props.widget === /* istanbul ignore next */_frontEndConstants.PICK_PPS_PERFORMANCE) {
			if (this.props.ppsPerformance.ppsPerformance !== undefined && this.props.ppsPerformance.ppsPerformance.aggregate_data !== undefined) {
				itemRender = /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_graph_horizontal2.default, /* istanbul ignore next */{ data: this.props.ppsPerformance, type: /* istanbul ignore next */_frontEndConstants.GOR_ORDER_PICKED, performanceParam: this.context.intl.formatMessage(messages.performanceParam), __source: { fileName: _jsxFileName, lineNumber: 145 }, __self: this });
			} else

			{
				itemRender = /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'gor-performance-noData', __source: { fileName: _jsxFileName, lineNumber: 149 }, __self: this }, /* istanbul ignore next */' ', noData, /* istanbul ignore next */' ');
			}
		} else

		if (this.props.widget === /* istanbul ignore next */_frontEndConstants.PUT_PPS_PERFORMANCE) {

			if (this.props.ppsPerformance.ppsPerformance !== undefined && this.props.ppsPerformance.ppsPerformance.aggregate_data !== undefined) {
				itemRender = /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_graph_horizontal2.default, /* istanbul ignore next */{ data: this.props.ppsPerformance, type: /* istanbul ignore next */_frontEndConstants.GOR_ITEMS_PUT, performanceParam: this.context.intl.formatMessage(messages.performanceParam), __source: { fileName: _jsxFileName, lineNumber: 156 }, __self: this });
			} else

			{
				itemRender = /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'gor-performance-noData', __source: { fileName: _jsxFileName, lineNumber: 160 }, __self: this }, /* istanbul ignore next */' ', noData, /* istanbul ignore next */' ');
			}
		} else

		if (this.props.widget === /* istanbul ignore next */_frontEndConstants.AUDIT_PPS_PERFORMANCE) {
			if (this.props.ppsPerformance.ppsPerformance !== undefined && this.props.ppsPerformance.ppsPerformance.aggregate_data !== undefined) {
				itemRender = /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_graph_horizontal2.default, /* istanbul ignore next */{ data: this.props.ppsPerformance, type: /* istanbul ignore next */_frontEndConstants.GOR_ITEMS_AUDITED, performanceParam: this.context.intl.formatMessage(messages.performanceParam), __source: { fileName: _jsxFileName, lineNumber: 166 }, __self: this });
			} else

			{
				itemRender = /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'gor-performance-noData', __source: { fileName: _jsxFileName, lineNumber: 170 }, __self: this }, /* istanbul ignore next */' ', noData, /* istanbul ignore next */' ');
			}

		} else
		{
			itemRender = /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_healthTabs2.default, /* istanbul ignore next */{ ppsData: pps_data, butlerData: butler_data, chargingData: charging_data, __source: { fileName: _jsxFileName, lineNumber: 175 }, __self: this });
		}

		return (
			/* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'gorPerformanceWidget', __source: { fileName: _jsxFileName, lineNumber: 179 }, __self: this },
				/* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'gorDrop Performance-Widget-Drop', __source: { fileName: _jsxFileName, lineNumber: 180 }, __self: this },
					/* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_dropdown2.default, /* istanbul ignore next */{ optionDispatch: this.props.renderPerformanceWidget, items: item, styleClass: 'ddown', currentState: item[index], __source: { fileName: _jsxFileName, lineNumber: 181 }, __self: this })),


				/* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ id: 'performanceGraph', __source: { fileName: _jsxFileName, lineNumber: 184 }, __self: this },
					itemRender)));





	}}
;

function mapStateToProps(state, ownProps) {
	return {
		widget: state.performanceWidget.widget || {},
		ppsData: state.recieveSocketActions.ppsData || {},
		butlersData: state.butlersInfo || {},
		chargersData: state.chargerInfo || {},
		ppsPerformance: state.PPSperformance || {} };

}

var mapDispatchToProps = function mapDispatchToProps(dispatch) {
	return {
		renderPerformanceWidget: function /* istanbul ignore next */renderPerformanceWidget(data) {dispatch( /* istanbul ignore next */(0, _performanceWidgetActions.renderPerformanceWidget)(data));} };

};

PerformanceWidget.contextTypes = {
	intl: /* istanbul ignore next */_react2.default.PropTypes.object.isRequired }; /* istanbul ignore next */exports.default =


/* istanbul ignore next */(0, _reactRedux.connect)(mapStateToProps, mapDispatchToProps)(PerformanceWidget);