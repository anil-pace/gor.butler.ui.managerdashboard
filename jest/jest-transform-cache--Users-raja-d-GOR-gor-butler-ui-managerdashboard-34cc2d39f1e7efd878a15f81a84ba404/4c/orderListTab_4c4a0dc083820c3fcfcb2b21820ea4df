/* istanbul ignore next */'use strict';Object.defineProperty(exports, "__esModule", { value: true });var _jsxFileName = '/Users/raja.d/GOR/gor.butler.ui.managerdashboard/src/containers/orderTab/orderListTab.js';var /* istanbul ignore next */_react = require('react'); /* istanbul ignore next */var _react2 = _interopRequireDefault(_react);
var /* istanbul ignore next */_reactRedux = require('react-redux');
var /* istanbul ignore next */_paginationAction = require('../../actions/paginationAction');







var /* istanbul ignore next */_frontEndConstants = require('../../constants/frontEndConstants');









var /* istanbul ignore next */_configConstants = require('../../constants/configConstants');











var /* istanbul ignore next */_orderListTable = require('./orderListTable'); /* istanbul ignore next */var _orderListTable2 = _interopRequireDefault(_orderListTable);
var /* istanbul ignore next */_dropdown = require('../../components/dropdown/dropdown'); /* istanbul ignore next */var _dropdown2 = _interopRequireDefault(_dropdown);
var /* istanbul ignore next */_reactIntl = require('react-intl');
var /* istanbul ignore next */_Spinner = require('../../components/spinner/Spinner'); /* istanbul ignore next */var _Spinner2 = _interopRequireDefault(_Spinner);
var /* istanbul ignore next */_orderListActions = require('../../actions/orderListActions');
var /* istanbul ignore next */_backEndConstants = require('../../constants/backEndConstants');
var /* istanbul ignore next */_sortHeaderActions = require('../../actions/sortHeaderActions');
var /* istanbul ignore next */_getDaysDiff = require('../../utilities/getDaysDiff');
var /* istanbul ignore next */_gorPaginateV = require('../../components/gorPaginate/gorPaginateV2'); /* istanbul ignore next */var _gorPaginateV2 = _interopRequireDefault(_gorPaginateV);
var /* istanbul ignore next */_filterAction = require('../../actions/filterAction');
var /* istanbul ignore next */_reactRouter = require('react-router');
var /* istanbul ignore next */_socketActions = require('./../../actions/socketActions');
var /* istanbul ignore next */_initData = require('./../../constants/initData.js');
var /* istanbul ignore next */_orderFilter = require('./orderFilter'); /* istanbul ignore next */var _orderFilter2 = _interopRequireDefault(_orderFilter);
var /* istanbul ignore next */_filterSummary = require('../../components/tableFilter/filterSummary'); /* istanbul ignore next */var _filterSummary2 = _interopRequireDefault(_filterSummary);function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}
const messages = /* istanbul ignore next */(0, _reactIntl.defineMessages)({
    inProgressStatus: {
        id: 'orderList.progress.status',
        description: "In 'progress message' for orders",
        defaultMessage: "In Progress" },


    completedStatus: {
        id: "orderList.completed.status",
        description: " 'Completed' status",
        defaultMessage: "Completed" },


    exceptionStatus: {
        id: "orderList.exception.status",
        description: " 'Exception' status",
        defaultMessage: "Exception" },


    unfulfillableStatus: {
        id: "orderList.Unfulfillable.status",
        description: " 'Unfulfillable' status",
        defaultMessage: "Unfulfillable" },

    orderListRefreshedat: {
        id: 'orderlist.Refreshed.at',
        description: " 'Refreshed' status",
        defaultMessage: 'Last Updated ' } });




class OrderListTab extends /* istanbul ignore next */_react2.default.Component {
    constructor(props) {
        super(props); /* istanbul ignore next */this.



































































































































































































































































































        handlePageClick = data => {
            var url;
            if (data.url === undefined) {
                url = /* istanbul ignore next */_configConstants.API_URL + /* istanbul ignore next */_configConstants.ORDERS_URL + /* istanbul ignore next */_configConstants.ORDER_PAGE + data.selected + "&PAGE_SIZE=25";
            } else

            {
                url = data.url;
            }

            let paginationData = {

                'url': url,
                'method': 'GET',
                'cause': /* istanbul ignore next */_frontEndConstants.ORDERS_RETRIEVE,
                'token': this.props.auth_token,
                'contentType': 'application/json' };

            this.props.setOrderListSpinner(true);
            this.props.currentPage(data.selected);
            this.props.getPageData(paginationData);
        }; /* istanbul ignore next */this.



        refresh = (data, pageSize) => {
            var locationQuery = this.props.orderData.successQuery;
            if (locationQuery && Object.keys(locationQuery).length)
            {
                if (this.props.orderData.noResultFound) {
                    /* istanbul ignore next */_reactRouter.hashHistory.push({ pathname: "/orders/orderlist", query: locationQuery });
                } else {
                    this._refreshList(locationQuery, data);
                }

            } else

            {
                var convertTime = {
                    "oneHourOrders": 1,
                    "twoHourOrders": 2,
                    "sixHourOrders": 6,
                    "twelveHourOrders": 12,
                    "oneDayOrders": 24 };

                var prevTime, currentTime;
                var appendStatusUrl = "",appendTimeUrl = "",appendPageSize = "",appendSortUrl = "",appendTextFilterUrl = "";
                var filterApplied = false;
                if (!data) {
                    data = {};
                    data.selected = 1;
                    data.url = "";
                    /**
                                    * After clearing the applied filter,
                                    * It'll set the default state to the filters.
                                    */
                    this.props.orderfilterState({
                        tokenSelected: { "STATUS": ["all"], "TIME PERIOD": ["allOrders"] },
                        searchQuery: {} });

                    this.props.toggleOrderFilter(false);
                    this.props.showTableFilter(false);

                }
                //for backend sorting
                if (data.columnKey && data.sortDir) {
                    appendSortUrl = /* istanbul ignore next */_frontEndConstants.sortOrderHead[data.columnKey] + /* istanbul ignore next */_frontEndConstants.sortOrder[data.sortDir];
                } else
                if (this.props.orderSortHeaderState && this.props.orderSortHeader && this.props.orderSortHeaderState.colSortDirs) {
                    appendSortUrl = /* istanbul ignore next */_frontEndConstants.sortOrderHead[this.props.orderSortHeader] + /* istanbul ignore next */_frontEndConstants.sortOrder[this.props.orderSortHeaderState.colSortDirs[this.props.orderSortHeader]];
                }

                //for search via text filter
                if (data.searchQuery && data.searchQuery["ORDER ID"]) {
                    appendTextFilterUrl = /* istanbul ignore next */_configConstants.FILTER_ORDER_ID + data.searchQuery["ORDER ID"];
                    data.selected = 1;
                    filterApplied = true;
                }

                //appending filter for status
                if (data.tokenSelected && data.tokenSelected["STATUS"] && data.tokenSelected["STATUS"].length) {
                    let statusToken = data.tokenSelected["STATUS"].slice(0);
                    let index = statusToken.indexOf('breached');
                    index != -1 ? statusToken.splice(index, 1) : "";
                    let status = statusToken.length > 0 ? statusToken.join("','") : statusToken;
                    let breachedtext = index != -1 ? /* istanbul ignore next */_frontEndConstants.BREACHED : "";
                    if (status === undefined || status === "all") {
                        appendStatusUrl = "";
                    } else

                    if (status === "exception") {
                        appendStatusUrl = /* istanbul ignore next */_configConstants.EXCEPTION_TRUE;
                    } else
                    {
                        appendStatusUrl = status.length !== 0 ? /* istanbul ignore next */_configConstants.WAREHOUSE_STATUS + "['" + status + "']" + breachedtext : breachedtext;
                    }
                    data.selected = 1;
                    filterApplied = true;
                }

                //appending filter for orders by time
                if (data.tokenSelected && data.tokenSelected["TIME PERIOD"] && data.tokenSelected["TIME PERIOD"].length && data.tokenSelected["TIME PERIOD"][0] !== "allOrders") {
                    var timeOut = data.tokenSelected["TIME PERIOD"][0];
                    currentTime = new Date();
                    prevTime = new Date();
                    prevTime = new Date(prevTime.setHours(prevTime.getHours() - convertTime[timeOut]));
                    prevTime = prevTime.toISOString();
                    currentTime = currentTime.toISOString();
                    appendTimeUrl = /* istanbul ignore next */_configConstants.UPDATE_TIME_LOW + currentTime + /* istanbul ignore next */_configConstants.UPDATE_TIME_HIGH + prevTime;
                    data.selected = 1;
                    filterApplied = true;
                }

                //generating api url by pagination page no.
                data.url = "";
                data.url = /* istanbul ignore next */_configConstants.API_URL + /* istanbul ignore next */_configConstants.ORDERS_URL + /* istanbul ignore next */_configConstants.ORDER_PAGE + (data.selected ? data.selected : 1);

                //appending page size filter
                if (!pageSize) {
                    if (this.props.filterOptions.pageSize === undefined) {
                        appendPageSize = /* istanbul ignore next */_configConstants.PAGE_SIZE_URL + "25";
                    } else

                    {
                        appendPageSize = /* istanbul ignore next */_configConstants.PAGE_SIZE_URL + this.props.filterOptions.pageSize;
                    }
                } else
                {
                    appendPageSize = /* istanbul ignore next */_configConstants.PAGE_SIZE_URL + pageSize;
                }


                //combining all the filters
                data.url = data.url + appendStatusUrl + appendTimeUrl + appendPageSize + appendSortUrl + appendTextFilterUrl;
                this.props.lastRefreshTime(new Date());
                this.props.filterApplied(filterApplied);
                this.handlePageClick(data);
            }
        };this.state = { selected_page: 1, query: null, orderListRefreshed: null };}componentWillMount() {/**
                                                                                                           * It will update the last refreshed property of
                                                                                                           * overview details, so that updated subscription
                                                                                                           * packet can be sent to the server for data
                                                                                                           * update.
                                                                                                           */this.props.orderListRefreshed();}componentWillReceiveProps(nextProps) {if (nextProps.socketAuthorized && nextProps.orderListRefreshed && nextProps.location.query && (!this.state.query || JSON.stringify(nextProps.location.query) !== JSON.stringify(this.state.query))) {this.setState({ query: nextProps.location.query });this.setState({ orderListRefreshed: nextProps.orderListRefreshed });this._subscribeData();this._refreshList(nextProps.location.query, nextProps.orderSortHeaderState.colSortDirs);}}_subscribeData() {let updatedWsSubscription = this.props.wsSubscriptionData;this.props.initDataSentCall(updatedWsSubscription["default"]);this.props.updateSubscriptionPacket(updatedWsSubscription);}_handleClickRefreshButton() {this._refreshList(this.state.query, this.props.orderSortHeaderState ? this.props.orderSortHeaderState.colSortDirs : null);} /**
he method will update the subscription packet
and will fetch the data from the socket.
private
refreshList(query, orderbyParam) {var orderbyUrl;this.props.setOrderListSpinner(true);let _query_params = [],convertTime = { "oneHourOrders": 1, "twoHourOrders": 2, "sixHourOrders": 6, "twelveHourOrders": 12, "oneDayOrders": 24 };if (query.orderId) {_query_params.push([/* istanbul ignore next */_configConstants.ORDER_ID_FILTER_PARAM, query.orderId].join("~="));} //appending filter for status
        if (query.status) {let statusList = query.status.constructor === Array ? query.status.slice() : [query.status];let indexOfBreached = statusList.indexOf('breached');let indexOfException = statusList.indexOf('exception');if (indexOfBreached > -1) {_query_params.push([/* istanbul ignore next */_frontEndConstants.BREACHED, "True"].join("="));statusList.splice(indexOfBreached, 1);}if (indexOfException > -1) {indexOfBreached > -1 ? statusList.splice(indexOfException - 1, 1) : statusList.splice(indexOfException, 1);_query_params.push([/* istanbul ignore next */_configConstants.EXCEPTION_TRUE, "true"].join("="));}if (statusList.length > 0) {let _flattened_statuses = [];statusList = statusList.constructor === Array ? statusList : [statusList];statusList.forEach(function (status) {_flattened_statuses.push(status.split("__"));});statusList = [].concat.apply([], _flattened_statuses);_query_params.push([/* istanbul ignore next */_configConstants.WAREHOUSE_STATUS, "['" + statusList.join("','") + "']"].join("="));}} //appending filter for orders by time
        if (query.period) {let timeOut = query.period.constructor === Array ? query.period[0] : query.period;let currentTime = new Date();let prevTime = new Date();prevTime = new Date(prevTime.setHours(prevTime.getHours() - convertTime[timeOut]));prevTime = prevTime.toISOString();currentTime = currentTime.toISOString();_query_params.push([/* istanbul ignore next */_configConstants.UPDATE_TIME, currentTime].join("<="));_query_params.push([/* istanbul ignore next */_configConstants.UPDATE_TIME, prevTime].join(">="));}let url = /* istanbul ignore next */_configConstants.API_URL + /* istanbul ignore next */_configConstants.ORDERS_URL;_query_params.push([/* istanbul ignore next */_configConstants.GIVEN_PAGE, query.page || 1].join("="));_query_params.push([/* istanbul ignore next */_configConstants.GIVEN_PAGE_SIZE, this.props.filterOptions.pageSize || 25].join("="));if (orderbyParam && orderbyParam.sortDir) {orderbyParam ? _query_params.push(['order', /* istanbul ignore next */(0, _frontEndConstants.toggleOrder)(orderbyParam.sortDir)].join("=")) : "";orderbyUrl = orderbyParam ? /* istanbul ignore next */_frontEndConstants.sortOrderHead[orderbyParam["columnKey"]] : "";} else {orderbyParam ? _query_params.push(['order', /* istanbul ignore next */(0, _frontEndConstants.toggleOrder)(orderbyParam[Object.keys(orderbyParam)])].join("=")) : "";orderbyUrl = orderbyParam ? /* istanbul ignore next */_frontEndConstants.sortOrderHead[Object.keys(orderbyParam)[0]] : "";}url = [url, _query_params.join("&")].join("?");url += orderbyUrl;let paginationData = { 'url': url, 'method': 'GET', 'cause': /* istanbul ignore next */_frontEndConstants.ORDERS_RETRIEVE, 'token': this.props.auth_token, 'contentType': 'application/json' };if (Object.keys(query).filter(function (el) {return el !== 'page';}).length !== 0) {this.props.toggleOrderFilter(true);this.props.filterApplied(true);} else {this.props.toggleOrderFilter(false);this.props.filterApplied(false);}this.props.currentPage(1);this.props.orderfilterState({ tokenSelected: { "STATUS": query.status ? query.status.constructor === Array ? query.status : [query.status] : ['all'], "TIME PERIOD": query.period ? query.period.constructor === Array ? query.period[0] : query.period : ['allOrders'] }, searchQuery: { "ORDER ID": query.orderId || '' }, "PAGE": query.page || 1 });this.props.setOrderQuery({ query: query });this.props.getPageData(paginationData);} /**

clearFilter() {/* istanbul ignore next */_reactRouter.hashHistory.push({ pathname: "/orders/orderlist", query: {} });}processOrders(data, nProps) {var nProps = this;var data = nProps.props.orderData.ordersDetail;let progress = nProps.context.intl.formatMessage(messages.inProgressStatus);let completed = nProps.context.intl.formatMessage(messages.completedStatus);let exception = nProps.context.intl.formatMessage(messages.exceptionStatus);let unfulfillable = nProps.context.intl.formatMessage(messages.unfulfillableStatus);var renderOrderData = [],orderData = {};var timeOffset = nProps.props.timeOffset,alertStatesNum = 0,orderDataPacket = {};if (!data.length) {orderDataPacket = { "renderOrderData": renderOrderData, "alertStatesNum": alertStatesNum };return orderDataPacket;}for (var i = 0; i < data.length; i++) {orderData.id = data[i].order_id;if (data[i].breached === true) {orderData.status = nProps.context.intl.formatMessage( /* istanbul ignore next */_backEndConstants.stringConfig[data[i].status]);orderData.statusClass = /* istanbul ignore next */_frontEndConstants.GOR_BREACHED;alertStatesNum++;} else if (data[i].exception === true) {orderData.status = nProps.context.intl.formatMessage( /* istanbul ignore next */_backEndConstants.stringConfig[data[i].status]);orderData.statusClass = /* istanbul ignore next */_frontEndConstants.GOR_EXCEPTION;alertStatesNum++;} else {if (nProps.context.intl.formatMessage( /* istanbul ignore next */_backEndConstants.stringConfig[data[i].status])) {orderData.status = nProps.context.intl.formatMessage( /* istanbul ignore next */_backEndConstants.stringConfig[data[i].status]);} else {orderData.status = data[i].status;}orderData.statusClass = data[i].status;}if (!data[i].create_time) {orderData.recievedTime = "--";} else {if ( /* istanbul ignore next */(0, _getDaysDiff.getDaysDiff)(data[i].create_time) < 2) {orderData.recievedTime = nProps.context.intl.formatRelative(data[i].create_time, { timeZone: timeOffset, units: 'day' }) + ", " + nProps.context.intl.formatTime(data[i].create_time, { timeZone: timeOffset, hour: 'numeric', minute: 'numeric', hour12: false });} else {orderData.recievedTime = nProps.context.intl.formatDate(data[i].create_time, { timeZone: timeOffset, year: 'numeric', month: 'short', day: '2-digit', hour: "2-digit", minute: "2-digit", hour12: false });}}if (!data[i].pick_before_time) {orderData.pickBy = "--";} else {if ( /* istanbul ignore next */(0, _getDaysDiff.getDaysDiff)(data[i].pick_before_time) < 2) {orderData.pickBy = nProps.context.intl.formatRelative(data[i].pick_before_time, { timeZone: timeOffset, units: 'day' }) + ", " + nProps.context.intl.formatTime(data[i].pick_before_time, { timeZone: timeOffset, hour: 'numeric', minute: 'numeric', hour12: false });} else {orderData.pickBy = nProps.context.intl.formatDate(data[i].pick_before_time, { timeZone: timeOffset, year: 'numeric', month: 'short', day: '2-digit', hour: "2-digit", minute: "2-digit", hour12: false });}}if (data[i].completed_orderlines === data[i].total_orderlines) {orderData.orderLine = data[i].total_orderlines;} else {orderData.orderLine = data[i].completed_orderlines + "/" + data[i].total_orderlines;}if (data[i].status === "completed") {if ( /* istanbul ignore next */(0, _getDaysDiff.getDaysDiff)(data[i].update_time) < 2) {orderData.completedTime = nProps.context.intl.formatRelative(data[i].update_time, { timeZone: timeOffset, units: 'day' }) + ", " + nProps.context.intl.formatTime(data[i].update_time, { timeZone: timeOffset, hour: 'numeric', minute: 'numeric', hour12: false });} else {orderData.completedTime = nProps.context.intl.formatDate(data[i].update_time, { timeZone: timeOffset, year: 'numeric', month: 'short', day: '2-digit', hour: "2-digit", minute: "2-digit", hour12: false });}} else {orderData.completedTime = "--";}renderOrderData.push(orderData);orderData = {};}orderDataPacket = { "renderOrderData": renderOrderData, "alertStatesNum": alertStatesNum };return orderDataPacket;} //To check where the object is empty or not
    _setFilter() {var newState = !this.props.showFilter;this.props.showTableFilter(newState);}onPageSizeChange(arg) {this.refresh(null, arg);}render() {var filterHeight = screen.height - 190 - 50;var updateStatus, timeOffset, headerTimeZone;
        let updateStatusIntl, updateStatusText;
        if (this.props.filterOptions.lastUpdatedOn) {
            updateStatusText =
            /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_reactIntl.FormattedMessage, /* istanbul ignore next */{ id: 'orderlistTab.orderListRefreshedat', description: 'Refresh Status text',
                defaultMessage: 'Last Updated ', __source: { fileName: _jsxFileName, lineNumber: 530 }, __self: this });
            updateStatusIntl = /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_reactIntl.FormattedRelative, /* istanbul ignore next */{ updateInterval: 10000, value: Date.now(), __source: { fileName: _jsxFileName, lineNumber: 532 }, __self: this });
        }
        var itemNumber = 6,table,pages;
        const ordersByStatus = [
        { value: '25', label: '25' },
        { value: '50', label: '50' },
        { value: '100', label: '100' },
        { value: '250', label: '250' },
        { value: '500', label: '500' },
        { value: '1000', label: '1000' }];

        var currentPage = this.props.filterOptions.currentPage,totalPage = this.props.orderData.totalPage;
        var orderDetail,alertNum = 0,orderInfo;
        if (this.props.orderData.ordersDetail !== undefined) {
            orderInfo = this.processOrders(this.props.orderData.ordersDetail, this);
            orderDetail = orderInfo.renderOrderData;
            alertNum = orderInfo.alertStatesNum;
        }
        timeOffset = this.props.timeOffset || "",
        headerTimeZone = this.context.intl.formatDate(Date.now(),
        {
            timeZone: timeOffset,
            year: 'numeric',
            timeZoneName: 'long' });


        /*Extracting Time zone string for the specified time zone*/
        headerTimeZone = headerTimeZone.substr(5, headerTimeZone.length);
        return (
            /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ __source: { fileName: _jsxFileName, lineNumber: 561 }, __self: this },
                /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'gor-Orderlist-table', __source: { fileName: _jsxFileName, lineNumber: 562 }, __self: this },

                    !this.props.showFilter ? /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_Spinner2.default, /* istanbul ignore next */{ isLoading: this.props.orderListSpinner,
                        setSpinner: this.props.setOrderListSpinner, __source: { fileName: _jsxFileName, lineNumber: 564 }, __self: this }) : "",
                    orderDetail ? /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ __source: { fileName: _jsxFileName, lineNumber: 566 }, __self: this },
                        /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'gor-filter-wrap', style: {
                                    'width': '350px',
                                    'display': this.props.showFilter ? 'block' : 'none',
                                    height: filterHeight }, __source: { fileName: _jsxFileName, lineNumber: 567 }, __self: this },

                            /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_orderFilter2.default, /* istanbul ignore next */{ ordersDetail: orderDetail, responseFlag: this.props.responseFlag, __source: { fileName: _jsxFileName, lineNumber: 572 }, __self: this })),

                        /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'gorToolBar', __source: { fileName: _jsxFileName, lineNumber: 574 }, __self: this },
                            /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'gorToolBarWrap', __source: { fileName: _jsxFileName, lineNumber: 575 }, __self: this },
                                /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'gorToolBarElements', __source: { fileName: _jsxFileName, lineNumber: 576 }, __self: this },
                                    /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_reactIntl.FormattedMessage, /* istanbul ignore next */{ id: 'order.table.heading', description: 'Heading for order list',
                                        defaultMessage: 'OrderList', __source: { fileName: _jsxFileName, lineNumber: 577 }, __self: this })),

                                /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'gor-button-wrap', __source: { fileName: _jsxFileName, lineNumber: 580 }, __self: this })),



                            /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'filterWrapper', __source: { fileName: _jsxFileName, lineNumber: 584 }, __self: this },
                                /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'gorToolBarDropDown', __source: { fileName: _jsxFileName, lineNumber: 585 }, __self: this },
                                    /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'gor-button-wrap', __source: { fileName: _jsxFileName, lineNumber: 586 }, __self: this },
                                        /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{
                                                className: 'gor-button-sub-status', __source: { fileName: _jsxFileName, lineNumber: 587 }, __self: this }, this.props.lastUpdatedText, /* istanbul ignore next */' ', this.props.lastUpdated, /* istanbul ignore next */' '),
                                        /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'button', /* istanbul ignore next */{ className: 'gor-filterBtn-btn',
                                                onClick: this._handleClickRefreshButton.bind(this), __source: { fileName: _jsxFileName, lineNumber: 589 }, __self: this },
                                            /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'gor-refresh-icon', __source: { fileName: _jsxFileName, lineNumber: 591 }, __self: this }),
                                            /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_reactIntl.FormattedMessage, /* istanbul ignore next */{ id: 'order.table.buttonLable',
                                                description: 'button label for refresh',
                                                defaultMessage: 'Refresh Data', __source: { fileName: _jsxFileName, lineNumber: 592 }, __self: this })),

                                        /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'button', /* istanbul ignore next */{
                                                className: this.props.orderFilterStatus ? "gor-filterBtn-applied" : "gor-filterBtn-btn",
                                                onClick: this._setFilter.bind(this), __source: { fileName: _jsxFileName, lineNumber: 596 }, __self: this },
                                            /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'gor-manage-task', __source: { fileName: _jsxFileName, lineNumber: 599 }, __self: this }),
                                            /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_reactIntl.FormattedMessage, /* istanbul ignore next */{ id: 'gor.filter.filterLabel',
                                                description: 'button label for filter',
                                                defaultMessage: 'Filter data', __source: { fileName: _jsxFileName, lineNumber: 600 }, __self: this })))))),






                        /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_filterSummary2.default, /* istanbul ignore next */{ total: orderDetail.length || 0, isFilterApplied: this.props.isFilterApplied,
                            responseFlag: this.props.responseFlag,
                            filterText: /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_reactIntl.FormattedMessage, /* istanbul ignore next */{ id: 'orderlist.filter.search.bar',
                                description: 'total order for filter search bar',
                                defaultMessage: '{total} Orders found',
                                values: { total: orderDetail ? orderDetail.length : '0' }, __source: { fileName: _jsxFileName, lineNumber: 611 }, __self: this }),
                            refreshList: this._clearFilter.bind(this),
                            refreshText: /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_reactIntl.FormattedMessage, /* istanbul ignore next */{ id: 'orderlist.filter.search.bar.showall',
                                description: 'button label for show all',
                                defaultMessage: 'Show all orders', __source: { fileName: _jsxFileName, lineNumber: 616 }, __self: this }), __source: { fileName: _jsxFileName, lineNumber: 609 }, __self: this })) :

                    null,


                    /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_orderListTable2.default, /* istanbul ignore next */{ items: orderDetail, timeZoneString: headerTimeZone, itemNumber: itemNumber,
                        statusFilter: this.props.getStatusFilter, timeFilter: this.props.getTimeFilter,
                        refreshOption: this._clearFilter.bind(this), lastUpdatedText: updateStatusText,
                        lastUpdated: updateStatusIntl,
                        intlMessg: this.props.intlMessages, alertNum: alertNum,
                        totalOrders: this.props.orderData.totalOrders,
                        itemsPerOrder: this.props.orderData.itemsPerOrder,
                        totalCompletedOrder: this.props.orderData.totalCompletedOrder,
                        totalPendingOrder: this.props.orderData.totalPendingOrder,
                        sortHeaderState: this.props.orderHeaderSort,
                        currentSortState: this.props.orderSortHeader,
                        sortHeaderOrder: this.props.orderHeaderSortOrder,
                        currentHeaderOrder: this.props.orderSortHeaderState,
                        setOrderFilter: this.props.orderFilterDetail,
                        getOrderFilter: this.props.orderFilter, setFilter: this.props.showTableFilter,
                        showFilter: this.props.showFilter, responseFlag: this.props.orderListSpinner,
                        isFilterApplied: this.props.isFilterApplied,
                        orderFilterStatus: this.props.orderFilterStatus,
                        onSortChange: this.refresh.bind(this),
                        pageNumber: this.props.pageNumber, __source: { fileName: _jsxFileName, lineNumber: 623 }, __self: this }),


                    /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'gor-pageNum', __source: { fileName: _jsxFileName, lineNumber: 645 }, __self: this },
                        /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_dropdown2.default, /* istanbul ignore next */{ styleClass: 'gor-Page-Drop', items: ordersByStatus, currentState: ordersByStatus[0],
                            optionDispatch: this.props.getPageSizeOrders, refreshList: this.onPageSizeChange.bind(this), __source: { fileName: _jsxFileName, lineNumber: 646 }, __self: this })),

                    /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'gor-paginate', __source: { fileName: _jsxFileName, lineNumber: 649 }, __self: this },
                        this.state.query ?
                        /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_gorPaginateV2.default, /* istanbul ignore next */{ location: this.props.location, currentPage: this.state.query.page || 1,
                            totalPage: this.props.orderData.totalPage, __source: { fileName: _jsxFileName, lineNumber: 651 }, __self: this }) : null))));





    }}


function mapStateToProps(state, ownProps) {
    return {
        orderFilter: state.sortHeaderState.orderFilter || "",
        orderSortHeader: state.sortHeaderState.orderHeaderSort || /* istanbul ignore next */_frontEndConstants.INITIAL_HEADER_SORT,
        orderSortHeaderState: state.sortHeaderState.orderHeaderSortOrder || [],
        orderListSpinner: state.spinner.orderListSpinner || false,
        filterOptions: state.filterOptions || {},
        orderData: state.getOrderDetail || {},
        statusFilter: state.filterOptions.statusFilter || null,
        intlMessages: state.intl.messages,
        timeOffset: state.authLogin.timeOffset,
        auth_token: state.authLogin.auth_token,
        showFilter: state.filterInfo.filterState || false,
        isFilterApplied: state.filterInfo.isFilterApplied || false,
        orderFilterStatus: state.filterInfo.orderFilterStatus,
        orderFilterState: state.filterInfo.orderFilterState || {},
        wsSubscriptionData: state.recieveSocketActions.socketDataSubscriptionPacket || /* istanbul ignore next */_initData.wsOverviewData,
        socketAuthorized: state.recieveSocketActions.socketAuthorized,
        orderListRefreshed: state.ordersInfo.orderListRefreshed,
        pageNumber: state.filterInfo.orderFilterState ? state.filterInfo.orderFilterState.PAGE : 1 };

}

var mapDispatchToProps = function mapDispatchToProps(dispatch) {
    return {
        orderFilterDetail: function /* istanbul ignore next */orderFilterDetail(data) {
            dispatch( /* istanbul ignore next */(0, _sortHeaderActions.orderFilterDetail)(data));
        },
        orderHeaderSort: function /* istanbul ignore next */orderHeaderSort(data) {
            dispatch( /* istanbul ignore next */(0, _sortHeaderActions.orderHeaderSort)(data));
        },
        orderHeaderSortOrder: function /* istanbul ignore next */orderHeaderSortOrder(data) {
            dispatch( /* istanbul ignore next */(0, _sortHeaderActions.orderHeaderSortOrder)(data));
        },
        getPageData: function /* istanbul ignore next */getPageData(data) {
            dispatch( /* istanbul ignore next */(0, _paginationAction.getPageData)(data));
        },
        getStatusFilter: function /* istanbul ignore next */getStatusFilter(data) {
            dispatch( /* istanbul ignore next */(0, _paginationAction.getStatusFilter)(data));
        },
        getTimeFilter: function /* istanbul ignore next */getTimeFilter(data) {
            dispatch( /* istanbul ignore next */(0, _paginationAction.getTimeFilter)(data));
        },
        getPageSizeOrders: function /* istanbul ignore next */getPageSizeOrders(data) {
            dispatch( /* istanbul ignore next */(0, _paginationAction.getPageSizeOrders)(data));
        },
        currentPage: function /* istanbul ignore next */currentPage(data) {
            dispatch( /* istanbul ignore next */(0, _paginationAction.currentPageOrders)(data));
        },
        lastRefreshTime: function /* istanbul ignore next */lastRefreshTime(data) {
            dispatch( /* istanbul ignore next */(0, _paginationAction.lastRefreshTime)(data));
        },
        setOrderListSpinner: function /* istanbul ignore next */setOrderListSpinner(data) {
            dispatch( /* istanbul ignore next */(0, _orderListActions.setOrderListSpinner)(data));
        },

        showTableFilter: function /* istanbul ignore next */showTableFilter(data) {
            dispatch( /* istanbul ignore next */(0, _filterAction.showTableFilter)(data));
        },
        filterApplied: function /* istanbul ignore next */filterApplied(data) {
            dispatch( /* istanbul ignore next */(0, _filterAction.filterApplied)(data));
        },
        orderfilterState: function /* istanbul ignore next */orderfilterState(data) {
            dispatch( /* istanbul ignore next */(0, _filterAction.orderfilterState)(data));
        },
        toggleOrderFilter: function /* istanbul ignore next */toggleOrderFilter(data) {
            dispatch( /* istanbul ignore next */(0, _filterAction.toggleOrderFilter)(data));
        },
        orderListRefreshed: function /* istanbul ignore next */orderListRefreshed(data) {
            dispatch( /* istanbul ignore next */(0, _orderListActions.orderListRefreshed)(data));
        },
        updateSubscriptionPacket: function /* istanbul ignore next */updateSubscriptionPacket(data) {
            dispatch( /* istanbul ignore next */(0, _socketActions.updateSubscriptionPacket)(data));
        },
        initDataSentCall: function /* istanbul ignore next */initDataSentCall(data) {
            dispatch( /* istanbul ignore next */(0, _socketActions.setWsAction)({ type: /* istanbul ignore next */_frontEndConstants.WS_ONSEND, data: data }));
        },
        setOrderQuery: function /* istanbul ignore next */setOrderQuery(data) {
            dispatch( /* istanbul ignore next */(0, _orderListActions.setOrderQuery)(data));
        } };



};

OrderListTab.contextTypes = {
    intl: /* istanbul ignore next */_react2.default.PropTypes.object.isRequired };


OrderListTab.PropTypes = {
    orderFilter: /* istanbul ignore next */_react2.default.PropTypes.string,
    orderSortHeader: /* istanbul ignore next */_react2.default.PropTypes.string,
    orderSortHeaderState: /* istanbul ignore next */_react2.default.PropTypes.array,
    orderListSpinner: /* istanbul ignore next */_react2.default.PropTypes.bool,
    filterOptions: /* istanbul ignore next */_react2.default.PropTypes.object,
    orderData: /* istanbul ignore next */_react2.default.PropTypes.object,
    statusFilter: /* istanbul ignore next */_react2.default.PropTypes.bool,
    timeOffset: /* istanbul ignore next */_react2.default.PropTypes.number,
    auth_token: /* istanbul ignore next */_react2.default.PropTypes.object,
    showFilter: /* istanbul ignore next */_react2.default.PropTypes.bool,
    isFilterApplied: /* istanbul ignore next */_react2.default.PropTypes.bool,
    orderFilterDetail: /* istanbul ignore next */_react2.default.PropTypes.func,
    orderHeaderSort: /* istanbul ignore next */_react2.default.PropTypes.func,
    orderHeaderSortOrder: /* istanbul ignore next */_react2.default.PropTypes.func,
    getPageData: /* istanbul ignore next */_react2.default.PropTypes.func,
    getStatusFilter: /* istanbul ignore next */_react2.default.PropTypes.func,
    getTimeFilter: /* istanbul ignore next */_react2.default.PropTypes.func,
    getPageSizeOrders: /* istanbul ignore next */_react2.default.PropTypes.func,
    currentPage: /* istanbul ignore next */_react2.default.PropTypes.func,
    lastRefreshTime: /* istanbul ignore next */_react2.default.PropTypes.func,
    setOrderListSpinner: /* istanbul ignore next */_react2.default.PropTypes.func,
    showTableFilter: /* istanbul ignore next */_react2.default.PropTypes.func,
    filterApplied: /* istanbul ignore next */_react2.default.PropTypes.func,
    orderFilterStatus: /* istanbul ignore next */_react2.default.PropTypes.bool,
    orderFilterState: /* istanbul ignore next */_react2.default.PropTypes.object }; /* istanbul ignore next */exports.default =


/* istanbul ignore next */(0, _reactRedux.connect)(mapStateToProps, mapDispatchToProps)(OrderListTab);