/* istanbul ignore next */"use strict";Object.defineProperty(exports, "__esModule", { value: true });exports.























































































































































AjaxParse = AjaxParse;var /* istanbul ignore next */_loginAction = require("../actions/loginAction");var /* istanbul ignore next */_paginationAction = require("../actions/paginationAction");var /* istanbul ignore next */_auditActions = require("../actions/auditActions");var /* istanbul ignore next */_userActions = require("../actions/userActions");var /* istanbul ignore next */_headerAction = require("../actions/headerAction");var /* istanbul ignore next */_codeToString = require("./codeToString");var /* istanbul ignore next */_orderListActions = require("../actions/orderListActions");var /* istanbul ignore next */_validationActions = require("../actions/validationActions");var /* istanbul ignore next */_frontEndConstants = require("../constants/frontEndConstants");var /* istanbul ignore next */_backEndConstants = require("../constants/backEndConstants");var /* istanbul ignore next */_messageConstants = require("../constants/messageConstants");var /* istanbul ignore next */_showError = require("./showError");var /* istanbul ignore next */_endSession = require("./endSession");var /* istanbul ignore next */_spinnerAction = require("../actions/spinnerAction");var /* istanbul ignore next */_statusToString = require("./statusToString");var /* istanbul ignore next */_utilityActions = require("../actions/utilityActions");var /* istanbul ignore next */_ppsModeChangeAction = require("../actions/ppsModeChangeAction");var /* istanbul ignore next */_getFormattedMessages = require("../utilities/getFormattedMessages");var /* istanbul ignore next */_notificationAction = require("../actions/notificationAction");var /* istanbul ignore next */_ppsConfigurationActions = require("./../actions/ppsConfigurationActions");var /* istanbul ignore next */_operationsLogsActions = require("./../actions/operationsLogsActions");var /* istanbul ignore next */_downloadReportsActions = require("./../actions/downloadReportsActions");function AjaxParse(store, res, cause, status, saltParams) {
    let stringInfo = {};
    switch (cause) {
        case /* istanbul ignore next */_frontEndConstants.AUTH_LOGIN:
            if (res.auth_token) {
                store.dispatch( /* istanbul ignore next */(0, _loginAction.receiveAuthData)(res));
            } else {
                store.dispatch( /* istanbul ignore next */(0, _validationActions.loginError)( /* istanbul ignore next */_messageConstants.WRONG_CRED));
            }
            store.dispatch( /* istanbul ignore next */(0, _loginAction.setLoginSpinner)(false));
            break;
        case /* istanbul ignore next */_frontEndConstants.ORDERS_RETRIEVE:
            store.dispatch( /* istanbul ignore next */(0, _paginationAction.recieveOrdersData)(res));
            store.dispatch( /* istanbul ignore next */(0, _orderListActions.setOrderListSpinner)(false));
            break;
        case /* istanbul ignore next */_frontEndConstants.AUDIT_RETRIEVE:
            store.dispatch( /* istanbul ignore next */(0, _auditActions.recieveAuditData)(res));
            store.dispatch( /* istanbul ignore next */(0, _auditActions.setAuditSpinner)(false));
            break;
        case /* istanbul ignore next */_frontEndConstants.GET_ROLES:
            let rolesArr = [];
            if (res.roles) {
                rolesArr = res.roles;
            }
            store.dispatch( /* istanbul ignore next */(0, _userActions.assignRole)(rolesArr));
            break;
        case /* istanbul ignore next */_frontEndConstants.CHECK_ID:
            let idExist;
            if (res.users.length) {
                idExist = {
                    type: /* istanbul ignore next */_frontEndConstants.ERROR,
                    msg: /* istanbul ignore next */_messageConstants.UE002 };

            } else {
                idExist = {
                    type: /* istanbul ignore next */_frontEndConstants.SUCCESS,
                    msg: /* istanbul ignore next */_messageConstants.TYPE_SUCCESS };

            }
            store.dispatch( /* istanbul ignore next */(0, _validationActions.validateID)(idExist));
            break;
        case /* istanbul ignore next */_frontEndConstants.PPS_MODE_CHANGE:
            var successCount = res.successful.length,
            unsuccessfulCount = Object.keys(res.unsuccessful).length,
            values = {
                unsuccessful: unsuccessfulCount,
                totalCount: successCount + unsuccessfulCount },

            msg = /* istanbul ignore next */(0, _getFormattedMessages.getFormattedMessages)("mode", values);
            store.dispatch( /* istanbul ignore next */(0, _validationActions.notifySuccess)(msg));
            store.dispatch( /* istanbul ignore next */(0, _ppsModeChangeAction.resetCheckedPPSList)(res.successful));
            break;
        case /* istanbul ignore next */_frontEndConstants.ADD_USER:
        case /* istanbul ignore next */_frontEndConstants.DELETE_USER:
        case /* istanbul ignore next */_frontEndConstants.EDIT_USER:
            stringInfo = /* istanbul ignore next */(0, _codeToString.codeToString)(res.alert_data[0]);
            if (stringInfo.type) {
                store.dispatch( /* istanbul ignore next */(0, _validationActions.notifySuccess)(stringInfo.msg));
            } else {
                store.dispatch( /* istanbul ignore next */(0, _validationActions.notifyFail)(stringInfo.msg));
            }
            break;
        case /* istanbul ignore next */_frontEndConstants.CREATE_AUDIT:
            if (res.alert_data) {
                if (res.alert_data[0].code === /* istanbul ignore next */_backEndConstants.CODE_E027) {
                    var skuInfo = { type: /* istanbul ignore next */_frontEndConstants.ERROR, msg: /* istanbul ignore next */_messageConstants.INVALID_SKUID };
                    store.dispatch( /* istanbul ignore next */(0, _validationActions.validateSKU)(skuInfo));
                } else {
                    stringInfo = /* istanbul ignore next */(0, _codeToString.codeToString)(res.alert_data[0]);
                    store.dispatch( /* istanbul ignore next */(0, _validationActions.notifyFail)(stringInfo.msg));
                    store.dispatch( /* istanbul ignore next */(0, _auditActions.setAuditRefresh)(false)); //reset refresh flag
                }
            } else {
                store.dispatch( /* istanbul ignore next */(0, _validationActions.notifySuccess)( /* istanbul ignore next */_messageConstants.AS001));
                store.dispatch( /* istanbul ignore next */(0, _auditActions.setAuditRefresh)(true)); //set refresh flag
            }
            break;
        case /* istanbul ignore next */_frontEndConstants.DELETE_AUDIT:
            stringInfo = /* istanbul ignore next */(0, _codeToString.codeToString)(res.alert_data[0]);
            if (stringInfo.type) {
                store.dispatch( /* istanbul ignore next */(0, _validationActions.notifyDelete)(stringInfo.msg));
                store.dispatch( /* istanbul ignore next */(0, _auditActions.setAuditRefresh)(true)); //set refresh flag
            } else {
                store.dispatch( /* istanbul ignore next */(0, _validationActions.notifyFail)(stringInfo.msg));
                store.dispatch( /* istanbul ignore next */(0, _auditActions.setAuditRefresh)(false)); //reset refresh flag
            }
            break;
        case /* istanbul ignore next */_frontEndConstants.CANCEL_AUDIT:
            if (res.alert_data && res.alert_data.length > 0) {
                //ERROR
                switch (res.alert_data[0].code) {
                    case "g020":
                        store.dispatch( /* istanbul ignore next */(0, _validationActions.notifySuccess)( /* istanbul ignore next */_messageConstants.g020));
                        break;

                    case "g021":
                        store.dispatch( /* istanbul ignore next */(0, _validationActions.notifySuccess)( /* istanbul ignore next */_messageConstants.g021));
                        break;

                    case "g023":
                        store.dispatch( /* istanbul ignore next */(0, _validationActions.notifySuccess)( /* istanbul ignore next */_messageConstants.g023));
                        break;

                    case "g024":
                        store.dispatch( /* istanbul ignore next */(0, _validationActions.notifySuccess)( /* istanbul ignore next */_messageConstants.g024));
                        break;

                    default:
                        store.dispatch(
                        /* istanbul ignore next */(0, _validationActions.notifySuccess)(res.alert_data[0].description));

                        break;}

            } else {
                //SUCCESS
                store.dispatch( /* istanbul ignore next */(0, _validationActions.notifySuccess)(res.data));
            }
            store.dispatch( /* istanbul ignore next */(0, _auditActions.setAuditSpinner)(false));
            store.dispatch( /* istanbul ignore next */(0, _auditActions.setAuditRefresh)(true));
            break;
        case /* istanbul ignore next */_frontEndConstants.GET_PPSLIST:
            let auditpps = [];
            if (res.data.audit) {
                auditpps = res.data.audit;
            }
            store.dispatch( /* istanbul ignore next */(0, _auditActions.getPPSAudit)(auditpps));
            break;
        case /* istanbul ignore next */_frontEndConstants.START_AUDIT:
            if (res.successful.length) {
                store.dispatch( /* istanbul ignore next */(0, _validationActions.notifySuccess)( /* istanbul ignore next */_messageConstants.AS00A));
                store.dispatch( /* istanbul ignore next */(0, _auditActions.setAuditRefresh)(true)); //set refresh flag
            } else {
                stringInfo = /* istanbul ignore next */(0, _codeToString.codeToString)(res.unsuccessful[0].alert_data[0]);
                store.dispatch( /* istanbul ignore next */(0, _validationActions.notifyFail)(stringInfo.msg));
                store.dispatch( /* istanbul ignore next */(0, _auditActions.setAuditRefresh)(false)); //reset refresh flag
            }
            break;
        case /* istanbul ignore next */_frontEndConstants.RECIEVE_HEADER:
            if (res.users[0].roles[0] == /* istanbul ignore next */_backEndConstants.BUTLER_UI) {
                /* istanbul ignore next */(0, _endSession.endSession)(store);
            }
            store.dispatch( /* istanbul ignore next */(0, _headerAction.recieveHeaderInfo)(res));
            break;
        case /* istanbul ignore next */_frontEndConstants.RECEIVE_SHIFT_START_TIME:
            store.dispatch( /* istanbul ignore next */(0, _headerAction.recieveShiftStartTime)(res));
            break;
        case /* istanbul ignore next */_frontEndConstants.RECIEVE_TIME_OFFSET:
            store.dispatch( /* istanbul ignore next */(0, _loginAction.setTimeOffSetData)(res));
            break;

        case /* istanbul ignore next */_frontEndConstants.AUDIT_RESOLVE_LINES:
            store.dispatch( /* istanbul ignore next */(0, _spinnerAction.setResolveAuditSpinner)(false));
            store.dispatch( /* istanbul ignore next */(0, _auditActions.setPendingAuditLines)(res));
            break;

        case /* istanbul ignore next */_frontEndConstants.AUDIT_RESOLVE_CONFIRMED:
            if (res.successful.status) {
                stringInfo = /* istanbul ignore next */(0, _statusToString.statusToString)(res.successful);
                store.dispatch( /* istanbul ignore next */(0, _validationActions.notifySuccess)(stringInfo.msg));
            } else {
                /* istanbul ignore next */(0, _showError.ShowError)(store, cause, status);
            }
            break;

        case /* istanbul ignore next */_frontEndConstants.VALIDATE_SKU_ID:
            if (res.sku && res.audit_attributes_values) {
                store.dispatch( /* istanbul ignore next */(0, _auditActions.auditValidatedAttributes)(res));
            }
            store.dispatch( /* istanbul ignore next */(0, _validationActions.validateSKUcodeSpinner)(false));
            break;

        case /* istanbul ignore next */_frontEndConstants.PAUSE_OPERATION:
            var pausePwd;
            if (!res.auth_token) {
                pausePwd = {
                    type: /* istanbul ignore next */_frontEndConstants.ERROR,
                    msg: /* istanbul ignore next */_messageConstants.UE002 };

            } else {
                pausePwd = {
                    type: /* istanbul ignore next */_frontEndConstants.SUCCESS,
                    msg: /* istanbul ignore next */_messageConstants.TYPE_SUCCESS };

                //hit next api
                store.dispatch( /* istanbul ignore next */(0, _validationActions.modalStatus)(true));
            }
            store.dispatch( /* istanbul ignore next */(0, _validationActions.validatePassword)(pausePwd));
            break;
        case /* istanbul ignore next */_frontEndConstants.RESUME_OPERATION:
            var resumePwd;
            if (!res.auth_token) {
                resumePwd = {
                    type: /* istanbul ignore next */_frontEndConstants.ERROR,
                    msg: /* istanbul ignore next */_messageConstants.UE002 };

            } else {
                resumePwd = {
                    type: /* istanbul ignore next */_frontEndConstants.SUCCESS,
                    msg: /* istanbul ignore next */_messageConstants.TYPE_SUCCESS };

                //hit next api
                store.dispatch( /* istanbul ignore next */(0, _validationActions.modalStatus)(true));
            }
            store.dispatch( /* istanbul ignore next */(0, _validationActions.validatePassword)(resumePwd));
            break;
        case /* istanbul ignore next */_frontEndConstants.CHECK_SAFETY:
            store.dispatch( /* istanbul ignore next */(0, _validationActions.getSafetyList)(res || {}));
            break;
        case /* istanbul ignore next */_frontEndConstants.CONFIRM_SAFETY:
            var rejectList = [],botErrorList = [],
            rejectResponse = res,
            modalFlag = true;

            if (rejectResponse.successful) {
                if (!rejectResponse.emergency_end_time)
                {
                    store.dispatch( /* istanbul ignore next */(0, _validationActions.notifySuccess)( /* istanbul ignore next */_messageConstants.ES));
                }
            } else
            if (rejectResponse.alert_data) {

                if (rejectResponse.alert_data[0].details[0])
                {
                    rejectList = rejectResponse.alert_data[0].details[0].failed_validations;
                    botErrorList = rejectResponse.alert_data[0].details[0].displaced_bots || [];
                    modalFlag = false;
                } else

                {
                    stringInfo = /* istanbul ignore next */(0, _codeToString.codeToString)(res.alert_data[0]);
                    store.dispatch( /* istanbul ignore next */(0, _validationActions.notifyFail)(stringInfo.msg));
                }
            }
            store.dispatch( /* istanbul ignore next */(0, _validationActions.modalStatus)(modalFlag));
            store.dispatch( /* istanbul ignore next */(0, _spinnerAction.setSafetySpinner)(false));
            store.dispatch( /* istanbul ignore next */(0, _validationActions.getErrorBotList)(botErrorList));
            store.dispatch( /* istanbul ignore next */(0, _validationActions.getSafetyErrorList)(rejectList));
            break;

        case /* istanbul ignore next */_frontEndConstants.ITEM_RECALLED:
            res.status = /* istanbul ignore next */_frontEndConstants.ITEM_RECALLED_DATA;
            stringInfo = /* istanbul ignore next */(0, _statusToString.statusToString)(res);
            store.dispatch( /* istanbul ignore next */(0, _validationActions.notifySuccess)(stringInfo.msg));
            break;

        case /* istanbul ignore next */_frontEndConstants.GR_REPORT_RESPONSE:
            store.dispatch( /* istanbul ignore next */(0, _spinnerAction.setInventoryReportSpinner)(false));
            store.dispatch( /* istanbul ignore next */(0, _utilityActions.validateInvoiceID)(res));
            store.dispatch( /* istanbul ignore next */(0, _validationActions.notifySuccess)( /* istanbul ignore next */(0, _getFormattedMessages.getFormattedMessages)("grnGenerated", res.data)));
            break;
        case /* istanbul ignore next */_frontEndConstants.INVENTORY_REPORT_RESPONSE:
            store.dispatch( /* istanbul ignore next */(0, _spinnerAction.setInventoryReportSpinner)(false));
            store.dispatch( /* istanbul ignore next */(0, _utilityActions.validateInvoiceID)(res));
            store.dispatch( /* istanbul ignore next */(0, _validationActions.notifySuccess)( /* istanbul ignore next */(0, _getFormattedMessages.getFormattedMessages)("invntryRptGenerated", res.data)));

            break;
        case /* istanbul ignore next */_frontEndConstants.DOWNLOAD_STOCK_LEDGER_REPORT:
            store.dispatch( /* istanbul ignore next */(0, _spinnerAction.setStockLedgerSpinner)(false));
            store.dispatch( /* istanbul ignore next */(0, _utilityActions.validateStockLedgerSKU)(res));
            break;
        case /* istanbul ignore next */_frontEndConstants.DOWNLOAD_STOCK_LEDGER_RAW_TRANSACTIONS_REPORT:
            store.dispatch( /* istanbul ignore next */(0, _spinnerAction.setStockLedgerRawTransactionsSpinner)(false));
            break;
        case /* istanbul ignore next */_frontEndConstants.MASTER_FILE_UPLOAD:
            store.dispatch( /* istanbul ignore next */(0, _utilityActions.uploadMasterDataProcessing)(false));
            store.dispatch( /* istanbul ignore next */(0, _utilityActions.uploadMasterDataSuccess)(res));
            break;
        case /* istanbul ignore next */_frontEndConstants.UPLOAD_HISTORY:
            store.dispatch( /* istanbul ignore next */(0, _utilityActions.uploadMasterDataHistory)(res));
            break;
        case /* istanbul ignore next */_frontEndConstants.REPORTS_HISTORY:
            store.dispatch( /* istanbul ignore next */(0, _utilityActions.uploadReportHistory)(res));
            store.dispatch( /* istanbul ignore next */(0, _validationActions.notifySuccess)( /* istanbul ignore next */(0, _getFormattedMessages.getFormattedMessages)("reprtsRefreshed", res.data)));
            break;
        case /* istanbul ignore next */_frontEndConstants.GRN_HISTORY:
            store.dispatch( /* istanbul ignore next */(0, _utilityActions.uploadGRNHistory)(res));
            store.dispatch( /* istanbul ignore next */(0, _validationActions.notifySuccess)( /* istanbul ignore next */(0, _getFormattedMessages.getFormattedMessages)("grnRefreshed", res.data)));
            break;
        case /* istanbul ignore next */_frontEndConstants.GET_MAX_FILE_SIZE:
            store.dispatch( /* istanbul ignore next */(0, _utilityActions.updateMaxFileSize)(res));
            break;

        case /* istanbul ignore next */_frontEndConstants.GET_CONFIGS:
            store.dispatch( /* istanbul ignore next */(0, _userActions.recieveConfigurations)(res));
            break;
        case /* istanbul ignore next */_frontEndConstants.PPS_STATUS_CHANGE:
            var successCount = res.successful.length,
            unsuccessfulCount = Object.keys(res.unsuccessful).length,
            values = {
                unsuccessful: unsuccessfulCount,
                totalCount: successCount + unsuccessfulCount },

            msg = /* istanbul ignore next */(0, _getFormattedMessages.getFormattedMessages)("status", values);
            store.dispatch( /* istanbul ignore next */(0, _validationActions.notifySuccess)(msg));
            store.dispatch( /* istanbul ignore next */(0, _ppsModeChangeAction.resetCheckedPPSList)(res.successful));
            break;
        case /* istanbul ignore next */_frontEndConstants.GET_PENDING_MSU:
            store.dispatch( /* istanbul ignore next */(0, _ppsModeChangeAction.recievePendingMSU)(res));
            break;
        case /* istanbul ignore next */_frontEndConstants.SEARCHED_NOTIFICATIONS_DATA:
            store.dispatch( /* istanbul ignore next */(0, _notificationAction.recieveNotificationData)(res));
            break;
        case /* istanbul ignore next */_frontEndConstants.SEND_READ_INTIMATION:
            store.dispatch( /* istanbul ignore next */(0, _notificationAction.notificationReadIntimation)(true));
            break;
        case /* istanbul ignore next */_frontEndConstants.GET_ALL_NOTIFICATIONS:
            store.dispatch( /* istanbul ignore next */(0, _notificationAction.recieveAllNotifications)(res, saltParams));
            break;
        case /* istanbul ignore next */_frontEndConstants.SEARCHED_NOTIFICATIONS_DATA_ALL:
            store.dispatch( /* istanbul ignore next */(0, _notificationAction.recieveAllSearchedNotifications)(res));
            break;
        case /* istanbul ignore next */_frontEndConstants.FETCH_PPS_PROFILES:
            store.dispatch( /* istanbul ignore next */(0, _ppsConfigurationActions.setPPSConfigurationSpinner)(false));
            store.dispatch( /* istanbul ignore next */(0, _ppsConfigurationActions.receivePPSProfiles)(res));
            break;

        case /* istanbul ignore next */_frontEndConstants.FETCH_PROFILE_FOR_PPS:
            store.dispatch( /* istanbul ignore next */(0, _ppsConfigurationActions.setPPSConfigurationSpinner)(false));
            store.dispatch( /* istanbul ignore next */(0, _ppsConfigurationActions.selectPPSProfileForConfiguration)(res));
            break;
        case /* istanbul ignore next */_frontEndConstants.FETCH_TAGS:
            store.dispatch( /* istanbul ignore next */(0, _ppsConfigurationActions.setPPSConfigurationSpinner)(false));
            store.dispatch( /* istanbul ignore next */(0, _ppsConfigurationActions.receiveTags)(res));
            break;
        case /* istanbul ignore next */_frontEndConstants.CREATE_NEW_PROFILE:
            store.dispatch( /* istanbul ignore next */(0, _ppsConfigurationActions.setPPSConfigurationSpinner)(false));
            store.dispatch( /* istanbul ignore next */(0, _ppsConfigurationActions.profileCreated)(res));
            break;

        case /* istanbul ignore next */_frontEndConstants.SAVE_PPS_PROFILE:
            store.dispatch( /* istanbul ignore next */(0, _ppsConfigurationActions.setPPSConfigurationSpinner)(false));
            store.dispatch( /* istanbul ignore next */(0, _ppsConfigurationActions.profileRequested)(res));
            store.dispatch( /* istanbul ignore next */(0, _ppsConfigurationActions.savedPPSProfile)(res));
            break;

        case /* istanbul ignore next */_frontEndConstants.ADD_TAG_TO_LIST:
            store.dispatch( /* istanbul ignore next */(0, _ppsConfigurationActions.setPPSConfigurationSpinner)(false));
            store.dispatch( /* istanbul ignore next */(0, _ppsConfigurationActions.tagAddedToList)(res));
            break;

        case /* istanbul ignore next */_frontEndConstants.CHANGE_PPS_PROFILE:
            /**
                                                                               * Do nothing as the websocket
                                                                               * will update the UI
                                                                               * We just need to hide the modal
                                                                               */
            store.dispatch( /* istanbul ignore next */(0, _ppsConfigurationActions.profileRequested)(res));
            break;
        case /* istanbul ignore next */_frontEndConstants.OPERATION_LOG_FETCH:
            store.dispatch( /* istanbul ignore next */(0, _operationsLogsActions.recieveOLData)(res.hits.hits));
            break;
        case /* istanbul ignore next */_frontEndConstants.REPORTS_FETCH:
            store.dispatch( /* istanbul ignore next */(0, _downloadReportsActions.recieveReportsData)(res));
            break;
        case /* istanbul ignore next */_frontEndConstants.GET_REPORT:
            store.dispatch( /* istanbul ignore next */(0, _downloadReportsActions.recieveReportsData)(res));
            break;
        case /* istanbul ignore next */_frontEndConstants.DOWNLOAD_REPORT_REQUEST:
            store.dispatch( /* istanbul ignore next */(0, _validationActions.notifySuccess)( /* istanbul ignore next */_messageConstants.REQUEST_REPORT_SUCCESS));
            break;
        default:
            /* istanbul ignore next */(0, _showError.ShowError)(store, cause, status);
            break;}

}