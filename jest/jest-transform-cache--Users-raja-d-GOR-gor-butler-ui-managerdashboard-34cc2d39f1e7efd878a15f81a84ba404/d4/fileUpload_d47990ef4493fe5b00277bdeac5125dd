/* istanbul ignore next */'use strict';Object.defineProperty(exports, "__esModule", { value: true });var _jsxFileName = '/Users/raja.d/GOR/gor.butler.ui.managerdashboard/src/components/fileUpload/fileUpload.js';var /* istanbul ignore next */_react = require('react'); /* istanbul ignore next */var _react2 = _interopRequireDefault(_react);
var /* istanbul ignore next */_reactIntl = require('react-intl');
var /* istanbul ignore next */_frontEndConstants = require('../../constants/frontEndConstants'); /* istanbul ignore next */function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}

/**
                                                                                                                                                                                                                          * Generic component for file upload
                                                                                                                                                                                                                          */
class FileUpload extends /* istanbul ignore next */_react2.default.Component {

  _onFileChange(event) {
    this.props.onChange(event.target.files[0]);
  }

  _onInputClick() {
    this.refs.fileUpload.value = null;
  }

  render() {
    var isProcessing = this.props.isProcessing;
    var maxSize = this.props.maxFileSize > /* istanbul ignore next */_frontEndConstants.MB ? Math.round(this.props.maxFileSize / /* istanbul ignore next */_frontEndConstants.MB) + "mb" : Math.round(this.props.maxFileSize / /* istanbul ignore next */_frontEndConstants.KB) + "kb";
    var errorLine = this.props.maxSize ? this.props.errorCode && this.props.errorCode === /* istanbul ignore next */_frontEndConstants.UTILITY002 ? this.props.maxSize + "line" : maxSize : "";

    return (
      /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ __source: { fileName: _jsxFileName, lineNumber: 24 }, __self: this },

        /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'gor-utility-btn-wrap', __source: { fileName: _jsxFileName, lineNumber: 26 }, __self: this },
          /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'button', /* istanbul ignore next */{ className: 'gor-filterBtn-applied', __source: { fileName: _jsxFileName, lineNumber: 27 }, __self: this },
            /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'label', /* istanbul ignore next */{ __source: { fileName: _jsxFileName, lineNumber: 28 }, __self: this },
              !isProcessing ? this.props.uploadBtnText : /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'gor-orange-spinner gor-csv-processing', __source: { fileName: _jsxFileName, lineNumber: 29 }, __self: this }))),



          /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'label', /* istanbul ignore next */{ className: "gor-csvUploadWrap", __source: { fileName: _jsxFileName, lineNumber: 33 }, __self: this },
            /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'input', /* istanbul ignore next */{ type: 'file', ref: 'fileUpload', name: "csvUpload", disabled: isProcessing, className: "gor-csvUpload", accept: this.props.acceptedFormats.toString(), onClick: this._onInputClick.bind(this), onChange: this._onFileChange.bind(this), __source: { fileName: _jsxFileName, lineNumber: 34 }, __self: this })),

          /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'p', /* istanbul ignore next */{ className: "gor-upl-msg", __source: { fileName: _jsxFileName, lineNumber: 36 }, __self: this }, /* istanbul ignore next */' ', /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_reactIntl.FormattedMessage, /* istanbul ignore next */{ id: 'utility.fileSize.message', description: 'Maximum File Size:  MB', defaultMessage: 'Maximum File Size: {maxSize}', values: { maxSize: maxSize }, __source: { fileName: _jsxFileName, lineNumber: 36 }, __self: this })),
          /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'p', /* istanbul ignore next */{ className: "gor-upl-msg gor-upl-err", __source: { fileName: _jsxFileName, lineNumber: 37 }, __self: this },
            this.props.errorList[this.props.errorCode], /* istanbul ignore next */' ', /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_reactIntl.FormattedMessage, /* istanbul ignore next */{ id: 'utility.fileSize.errorline', description: 'Line or size', defaultMessage: ' {errorLine}', values: { errorLine: errorLine }, __source: { fileName: _jsxFileName, lineNumber: 38 }, __self: this })))));





  }}
;

FileUpload.propTypes = {
  onChange: /* istanbul ignore next */_react2.default.PropTypes.func,
  uploadBtnText: /* istanbul ignore next */_react2.default.PropTypes.string,
  maxFileSize: /* istanbul ignore next */_react2.default.PropTypes.number,
  acceptedFormats: /* istanbul ignore next */_react2.default.PropTypes.array }; /* istanbul ignore next */exports.default =

FileUpload;