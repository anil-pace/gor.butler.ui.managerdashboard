/* istanbul ignore next */'use strict';Object.defineProperty(exports, "__esModule", { value: true });var _jsxFileName = '/Users/raja.d/GOR/gor.butler.ui.managerdashboard/src/components/graphd3/graph_horizontal.js';var /* istanbul ignore next */_react = require('react'); /* istanbul ignore next */var _react2 = _interopRequireDefault(_react);
var /* istanbul ignore next */_reactD3Library = require('react-d3-library'); /* istanbul ignore next */var _reactD3Library2 = _interopRequireDefault(_reactD3Library);
var /* istanbul ignore next */_d = require('d3'); /* istanbul ignore next */var d3 = _interopRequireWildcard(_d);
var /* istanbul ignore next */_reactDimensions = require('react-dimensions'); /* istanbul ignore next */var _reactDimensions2 = _interopRequireDefault(_reactDimensions);
var /* istanbul ignore next */_reactIntl = require('react-intl'); /* istanbul ignore next */function _interopRequireWildcard(obj) {if (obj && obj.__esModule) {return obj;} else {var newObj = {};if (obj != null) {for (var key in obj) {if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];}}newObj.default = obj;return newObj;}}function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}
const RD3Component = /* istanbul ignore next */_reactD3Library2.default.Component;


const messages = /* istanbul ignore next */(0, _reactIntl.defineMessages)({
  noData: {
    id: 'graph.noData',
    description: 'No data message for graph',
    defaultMessage: "No Data" } });



class ChartHorizontal extends /* istanbul ignore next */_react2.default.Component {
  constructor(props)
  {
    super(props);
    this.state = { d3: '' };
  }

  graphRender(containerWidth, tData, nextP, performanceParam) {
    var component = this;
    var widther = containerWidth;
    var parentHeight = 300;

    var json = tData;
    var data = [];
    var barData = {};
    for (var i = 0; i < json.length; i++) {
      if (json[i][nextP] > 0) {
        barData.pps_id = json[i].pps_id;
        barData.type = json[i][nextP];
        data.push(barData);
        barData = {};
      }
    }
    data.sort(function (a, b) {return parseFloat(b.type) - parseFloat(a.type);});
    update(data);



    function update(data) {
      var minHeight = 50;
      var width = widther - 100;
      var barHeight = data.length && parentHeight / data.length >= minHeight ? minHeight : parentHeight / data.length;
      var left = 30,top = 20;
      var x = d3.scale.linear().range([0, width]);


      var y = d3.scale.ordinal().rangeRoundBands([0, parentHeight - data.length * barHeight], .1);
      var yAxis = d3.svg.axis().
      scale(y).
      orient("right").
      outerTickSize(0);

      var node = document.createElement('div');
      var chart = d3.select(node).append('svg').
      attr("width", widther).
      attr("height", 400).
      append("g").
      attr("transform", "translate(" + left + "," + top + ")");

      x.domain([0, d3.max(data, function (d) {return d.type;})]);

      var bar = chart.selectAll("g").
      data(data).
      enter().append("g").
      attr("class", "g").
      attr("y", function (d) {
        return y(d.pps_id);
      }).
      attr("width", y.rangeBand()).
      attr("transform", function (d, i) {return "translate(0," + i * barHeight + ")";});

      bar.append("g").
      attr("class", "axis").
      call(yAxis).
      style("font-size", "30px").
      style("font-family", "sans-serif").
      style("fill", "red").
      append("text").
      attr("y", 6).
      attr("dy", "4em").
      style("text-anchor", "end");

      bar.append("g").
      attr("class", "y axis").
      attr("transform", "translate(50,0)").
      style({ 'stroke': '#D3D3D3', 'fill': '#D3D3D3', 'stroke-width': '1px' }).
      call(yAxis);



      bar.append("rect").
      attr("rx", 2).
      attr("ry", 2).
      attr("x", 50).
      attr("width", function (d) {return x(d.type);}).
      attr("height", barHeight - 10).
      style("fill", "#D3D3D3").
      style("opacity", "0.5");

      bar.append("text").
      attr("x", function (d) {return x(d.type) + 25;}).
      attr("y", barHeight / 2 - 3).
      attr("dy", ".35em").
      text(function (d) {
        if (d.type === 0) {
          return;
        } else

        {
          return d.type;
        }

      }).
      style("font-size", "12px").
      style("font-weight", "bold").
      style("font-family", "sans-serif").
      style("fill", "#000000");

      bar.append("text").
      attr("x", -10).
      attr("y", barHeight / 2 - 3).
      attr("dy", ".35em").
      text(function (d) {
        if (d.type === 4) {
          return "PPS " + d.pps_id;
        }


        return "PPS " + d.pps_id;

      }).
      style("font-size", "12px").
      style("font-family", "sans-serif").
      style("fill", "#666666");

      bar.append("text").
      attr("x", 75).
      attr("y", barHeight / 2 - 3).
      attr("dy", ".35em").
      text(function (d) {
        if (d.type === 0) {
          return component.context.intl.formatMessage(messages.noData);
        }
      }).
      style("font-size", "12px").
      style("font-family", "sans-serif").
      style("fill", "#666666");


      chart.append("text").
      attr("text-anchor", "middle") // this makes it easy to centre the text as the transform is applied to the anchor
      .attr("transform", "translate(" + (width / 2 + 30) + "," + -7 + ")") // centre below axis
      .text(performanceParam).
      style("font-size", "12px").
      style("font-family", "sans-serif").
      style("fill", "#666666");


      component.setState({ d3: node });
    }


  }
  componentDidMount() {
    this.graphRender(this.props.containerWidth, this.props.data.ppsPerformance.aggregate_data, this.props.type, this.props.performanceParam);
  }

  componentWillReceiveProps(nextProps) {
    this.graphRender(nextProps.containerWidth, nextProps.data.ppsPerformance.aggregate_data, nextProps.type, nextProps.performanceParam);
  }
  render() {
    return (
      /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ __source: { fileName: _jsxFileName, lineNumber: 179 }, __self: this },
        /* istanbul ignore next */_react2.default.createElement(RD3Component, /* istanbul ignore next */{ data: this.state.d3, __source: { fileName: _jsxFileName, lineNumber: 180 }, __self: this })));


  }}
;

ChartHorizontal.contextTypes = {
  intl: /* istanbul ignore next */_react2.default.PropTypes.object.isRequired }; /* istanbul ignore next */exports.default =

/* istanbul ignore next */(0, _reactDimensions2.default)()(ChartHorizontal);