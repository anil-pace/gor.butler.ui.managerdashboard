/* istanbul ignore next */'use strict';Object.defineProperty(exports, "__esModule", { value: true });var _jsxFileName = '/Users/raja.d/GOR/gor.butler.ui.managerdashboard/src/containers/auditTab.js';var /* istanbul ignore next */_react = require('react'); /* istanbul ignore next */var _react2 = _interopRequireDefault(_react);
var /* istanbul ignore next */_Spinner = require('../components/spinner/Spinner'); /* istanbul ignore next */var _Spinner2 = _interopRequireDefault(_Spinner);
var /* istanbul ignore next */_reactRedux = require('react-redux');
var /* istanbul ignore next */_configConstants = require('../constants/configConstants');
var /* istanbul ignore next */_auditActions = require('../actions/auditActions');
var /* istanbul ignore next */_auditTable = require('./auditTab/auditTable'); /* istanbul ignore next */var _auditTable2 = _interopRequireDefault(_auditTable);
var /* istanbul ignore next */_paginationAction = require('../actions/paginationAction');
var /* istanbul ignore next */_frontEndConstants = require('../constants/frontEndConstants');






























var /* istanbul ignore next */_reactIntl = require('react-intl');
var /* istanbul ignore next */_sortHeaderActions = require('../actions/sortHeaderActions');
var /* istanbul ignore next */_getDaysDiff = require('../utilities/getDaysDiff');
var /* istanbul ignore next */_processDate = require('../utilities/processDate');
var /* istanbul ignore next */_gorPaginateV = require('../components/gorPaginate/gorPaginateV2'); /* istanbul ignore next */var _gorPaginateV2 = _interopRequireDefault(_gorPaginateV);
var /* istanbul ignore next */_filterAction = require('../actions/filterAction');
var /* istanbul ignore next */_reactRouter = require('react-router');
var /* istanbul ignore next */_socketActions = require('./../actions/socketActions');
var /* istanbul ignore next */_initData = require('./../constants/initData.js');
var /* istanbul ignore next */_auditFilter = require('./auditTab/auditFilter'); /* istanbul ignore next */var _auditFilter2 = _interopRequireDefault(_auditFilter);

var /* istanbul ignore next */_createAudit = require('./auditTab/createAudit'); /* istanbul ignore next */var _createAudit2 = _interopRequireDefault(_createAudit);
var /* istanbul ignore next */_reactReduxModal = require('react-redux-modal');
var /* istanbul ignore next */_filterSummary = require('./../components/tableFilter/filterSummary'); /* istanbul ignore next */var _filterSummary2 = _interopRequireDefault(_filterSummary);
var /* istanbul ignore next */_utils = require('../utilities/utils'); /* istanbul ignore next */function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}
//Mesages for internationalization
const messages = /* istanbul ignore next */(0, _reactIntl.defineMessages)({
    auditCreatedStatus: {
        id: "auditdetail.created.status",
        defaultMessage: "Created" },

    auditPendingStatus: {
        id: "auditdetail.pending.status",
        defaultMessage: "Pending" },

    auditInProgressStatus: {
        id: "auditdetail.progress.status",
        defaultMessage: "In Progress" },

    auditCompletedStatus: {
        id: "auditdetail.completed.status",
        defaultMessage: "Audited" },

    auditSKU: {
        id: "auditdetail.sku.prefix",
        defaultMessage: "SKU" },

    auditLocation: {
        id: "auditdetail.location.prefix",
        defaultMessage: "Location" },

    auditPendingApp: {
        id: "auditdetail.auditPendingApp.prefix",
        defaultMessage: "Issues found" },

    auditRejected: {
        id: "auditdetail.auditRejected.prefix",
        defaultMessage: "Rejected" },

    auditResolved: {
        id: "auditdetail.auditResolved.prefix",
        defaultMessage: "Resolved" },

    auditReAudited: {
        id: "auditdetail.auditReaudited.prefix",
        defaultMessage: "Re-audited" },

    auditCancelled: {
        id: "auditdetail.auditCancelled.prefix",
        defaultMessage: "Cancelled" },

    auditCancellingText: {
        id: "auditdetail.auditCancellingText.text",
        defaultMessage: "Cancelling..." } });






class AuditTab extends /* istanbul ignore next */_react2.default.Component {
    constructor(props) {
        super(props);
        this.state = { selected_page: 1, query: null, auditListRefreshed: null };
    }


    componentWillMount() {
        /**
                           * It will update the last refreshed property of
                           * overview details, so that updated subscription
                           * packet can be sent to the server for data
                           * update.
                           */
        this.props.auditListRefreshed();
    }
    componentWillReceiveProps(nextProps) {
        if (nextProps.socketAuthorized && nextProps.auditListRefreshed && nextProps.location.query && (!this.state.query || JSON.stringify(nextProps.location.query) !== JSON.stringify(this.state.query) || nextProps.auditRefresh !== this.props.auditRefresh)) {//Changes to refresh the table after creating audit
            let obj = {},selectedToken;
            selectedToken = [nextProps.location.query.auditType];
            obj.name = /* istanbul ignore next */(0, _utils.mappingArray)(selectedToken);
            this.props.setTextBoxStatus(obj);
            this.setState({ query: nextProps.location.query });
            this.setState({ auditListRefreshed: nextProps.auditListRefreshed });
            this._subscribeData();
            this._refreshList(nextProps.location.query, nextProps.auditSortHeaderState.colSortDirs);
        }
    }

    _subscribeData() {
        let updatedWsSubscription = this.props.wsSubscriptionData;
        this.props.initDataSentCall(updatedWsSubscription["default"]);
        this.props.updateSubscriptionPacket(updatedWsSubscription);
    }
    _refresh(data) {
        if (this.props.noResultFound) {
            /* istanbul ignore next */_reactRouter.hashHistory.push({ pathname: "/audit", query: this.props.successQuery });
        } else {
            this._refreshList(this.props.location.query, data);
        }

    }
    /**
       * The method will update the subscription packet
       * and will fetch the data from the socket.
       * @private
       */
    _refreshList(query, auditParam) {
        var auditbyUrl;
        let _query_params = [],_auditParamValue = [],_auditStatuses = [],
        url = /* istanbul ignore next */_configConstants.SEARCH_AUDIT_URL + /* istanbul ignore next */(0, _processDate.addDateOffSet)(new Date(), -30);
        if (query.auditType && query.auditType.constructor !== Array) {
            query.auditType = [query.auditType];
        }

        if (query.auditType && query.auditType.length === 1) {
            _query_params.push([/* istanbul ignore next */_frontEndConstants.AUDIT_PARAM_TYPE, query.auditType[0]].join("="));
        } else

        {
            _query_params.push([/* istanbul ignore next */_frontEndConstants.AUDIT_PARAM_TYPE, /* istanbul ignore next */_frontEndConstants.ANY].join("="));
        }

        if (query.skuId || query.locationId) {

            if (query.skuId) {
                _auditParamValue.push(query.skuId);
            }
            if (query.locationId) {
                _auditParamValue.push(query.locationId);
            }

            _query_params.push([/* istanbul ignore next */_frontEndConstants.AUDIT_PARAM_VALUE, "['" + _auditParamValue.join("','") + "']"].join("="));
        }

        if (query.status) {
            let _flattened_statuses = [];
            query.status = query.status.constructor === Array ? query.status : [query.status];
            query.status.forEach(function (status) {
                _flattened_statuses.push(status.split("__"));
            });
            _auditStatuses = [].concat.apply([], _flattened_statuses);
            _query_params.push([/* istanbul ignore next */_frontEndConstants.AUDIT_STATUS, "['" + _auditStatuses.join("','") + "']"].join("="));
        }
        if (query.taskId) {
            _query_params.push([/* istanbul ignore next */_configConstants.FILTER_AUDIT_ID, query.taskId].join("="));
        }

        _query_params.push([/* istanbul ignore next */_configConstants.GIVEN_PAGE, query.page || 1].join("="));
        _query_params.push([/* istanbul ignore next */_configConstants.GIVEN_PAGE_SIZE, 20].join("="));

        if (auditParam && auditParam.sortDir) {
            _query_params.push(['order', /* istanbul ignore next */(0, _frontEndConstants.toggleOrder)(auditParam.sortDir)].join("="));
            auditbyUrl = /* istanbul ignore next */_frontEndConstants.sortAuditHead[auditParam["columnKey"]];

        } else

        {
            if (auditParam) {
                _query_params.push(['order', /* istanbul ignore next */(0, _frontEndConstants.toggleOrder)(auditParam[Object.keys(auditParam)])].join("="));
                auditbyUrl = /* istanbul ignore next */_frontEndConstants.sortAuditHead[Object.keys(auditParam)[0]];
            } else {
                auditbyUrl = "";
            }
        }

        url = [url, _query_params.join("&")].join("&");
        url += auditbyUrl;

        if (Object.keys(query).filter(function (el) {return el !== 'page';}).length !== 0) {
            this.props.toggleAuditFilter(true);
            this.props.filterApplied(true);
        } else {
            this.props.toggleAuditFilter(false);
            this.props.filterApplied(false);
        }

        let paginationData = {
            'url': url,
            'method': /* istanbul ignore next */_frontEndConstants.GET,
            'cause': /* istanbul ignore next */_frontEndConstants.AUDIT_RETRIEVE,
            'token': this.props.auth_token,
            'contentType': /* istanbul ignore next */_frontEndConstants.APP_JSON };

        this.props.setAuditSpinner(true);
        this.props.auditfilterState({
            tokenSelected: { "AUDIT TYPE": query.auditType ? query.auditType.constructor === Array ? query.auditType : [query.auditType] : [/* istanbul ignore next */_frontEndConstants.ANY],
                "STATUS": query.status ? query.status.constructor === Array ? query.status : [query.status] : [/* istanbul ignore next */_frontEndConstants.ALL] },
            searchQuery: {
                'SPECIFIC SKU ID': query.skuId || '',
                'SPECIFIC LOCATION ID': query.locationId || '',
                'AUDIT TASK ID': query.taskId || '' },

            "PAGE": query.page || 1,
            defaultToken: { "AUDIT TYPE": [/* istanbul ignore next */_frontEndConstants.ANY], "STATUS": [/* istanbul ignore next */_frontEndConstants.ALL] } });

        this.props.setAuditQuery({ query: query });
        this.props.getPageData(paginationData);
    }
    /**
       *
       */
    _clearFilter() {
        /* istanbul ignore next */_reactRouter.hashHistory.push({ pathname: "/audit", query: {} });
    }


    _cancelAudit(auditId) {
        let url = /* istanbul ignore next */_configConstants.CANCEL_AUDIT_URL + auditId;
        let cancelAuditData = {
            'url': url,
            'method': /* istanbul ignore next */_frontEndConstants.PUT,
            'cause': /* istanbul ignore next */_frontEndConstants.CANCEL_AUDIT,
            'token': this.props.auth_token,
            'contentType': /* istanbul ignore next */_frontEndConstants.APP_JSON };

        this.props.setAuditSpinner(true);
        this.props.cancelAudit(cancelAuditData);
    }


    _processAuditData(data, nProps) {
        nProps = this;
        data = nProps.props.auditDetail;
        let created = nProps.context.intl.formatMessage(messages.auditCreatedStatus);
        let pending = nProps.context.intl.formatMessage(messages.auditPendingStatus);
        let progress = nProps.context.intl.formatMessage(messages.auditInProgressStatus);
        let completed = nProps.context.intl.formatMessage(messages.auditCompletedStatus);
        let pendingApp = nProps.context.intl.formatMessage(messages.auditPendingApp);
        let sku = nProps.context.intl.formatMessage(messages.auditSKU);
        let location = nProps.context.intl.formatMessage(messages.auditLocation);
        let rejected = nProps.context.intl.formatMessage(messages.auditRejected);
        let resolved = nProps.context.intl.formatMessage(messages.auditResolved);
        let reAudited = nProps.context.intl.formatMessage(messages.auditReAudited);
        let auditCancelled = nProps.context.intl.formatMessage(messages.auditCancelled);
        var timeOffset = nProps.props.timeOffset || "";
        // cancellable: "audit_pending", "audit_waiting", "audit_conflicting","audit_accepted", "audit_started", "audit_tasked","audit_rejected"
        //resolve issues first and then cancel: pending approval
        var auditStatus = {
            "audit_created": created,
            "audit_pending": pending,
            "audit_waiting": pending,
            "audit_conflicting": pending,
            "audit_accepted": pending,
            "audit_started": progress,
            "audit_tasked": progress,
            "audit_aborted": completed,
            "audit_completed": completed,
            "audit_pending_approval": pendingApp,
            "audit_resolved": resolved,
            audit_rejected: rejected,
            audit_reaudited: reAudited,
            audit_cancelled: auditCancelled };

        var statusClass = {
            "audit_created": "pending",
            "audit_pending": "pending",
            "audit_waiting": "pending",
            "audit_conflicting": "pending",
            "audit_accepted": "pending",
            "audit_started": "progress",
            "audit_tasked": "progress",
            "audit_aborted": "completed",
            "audit_completed": "completed",
            "audit_pending_approval": "breached",
            "audit_resolved": "progress",
            audit_rejected: "breached",
            audit_reaudited: "completed",
            audit_cancelled: "cancelled" };

        var auditType = { "sku": sku, "location": location };
        var auditDetails = [],auditData = {};
        var i,limit = data.length;
        for (i = 0; i <= limit - 1; i++) {
            auditData.id = data[i].audit_id;
            if (data[i].display_id) {
                auditData.display_id = data[i].display_id;
            } else

            {
                auditData.display_id = "--";
            }
            let total_lines = 0;
            try {
                total_lines = data[i].audit_info.length;
            } catch (ex) {}

            if (data[i].audit_param_type !== /* istanbul ignore next */_frontEndConstants.AUDIT_BY_PDFA) {
                auditData.auditType = data[i].audit_param_type;
                if (data[i].audit_param_value) {
                    auditData.auditValue = data[i].audit_param_value;
                    auditData.auditTypeValue = auditType[data[i].audit_param_type] + "-" + data[i].audit_param_value;
                }
            } else

            if (data[i].audit_param_type === /* istanbul ignore next */_frontEndConstants.AUDIT_BY_PDFA) {
                auditData.auditType = data[i].audit_param_type;
                if (data[i].audit_param_value) {
                    auditData.auditValue = data[i].audit_param_value.product_sku;
                    auditData.auditTypeValue = auditType[/* istanbul ignore next */_frontEndConstants.SKU] + "-" + data[i].audit_param_value.product_sku;
                    auditData.pdfaValues = data[i].audit_param_value.pdfa_values;
                }
            }

            if (data[i].audit_status) {
                if (auditData.statusPriority === undefined) {
                    auditData.statusPriority = 1;
                }
                auditData.status = auditStatus[data[i].audit_status];
                auditData.statusClass = statusClass[data[i].audit_status];
                if (data[i].audit_button_data && data[i].audit_button_data.audit_start_button === "enable") {
                    auditData.startAudit = true;
                } else

                {
                    auditData.startAudit = false;
                }


                if (data[i].audit_button_data && data[i].audit_button_data.audit_resolve_button === "enable") {
                    auditData.resolveAudit = true;
                } else

                {
                    auditData.resolveAudit = false;
                }

                if (data[i].audit_button_data && data[i].audit_button_data.audit_view_issues_button === "enable") {
                    auditData.viewIssues = true;
                } else

                {
                    auditData.viewIssues = false;
                }
                if (data[i].audit_button_data && data[i].audit_button_data.audit_cancel_button === "enable") {
                    auditData.cancellable = true;
                } else {
                    auditData.cancellable = false;
                }

                if (data[i].audit_button_data && data[i].audit_button_data.audit_duplicate_button === "enable") {
                    auditData.duplicatable = true;
                } else {
                    auditData.duplicatable = false;
                }

                if (data[i].audit_button_data && data[i].audit_button_data.audit_delete_button === "enable") {
                    auditData.deletable = true;
                } else {
                    auditData.deletable = false;
                }


            }

            if (data[i].start_actual_time) {
                if ( /* istanbul ignore next */(0, _getDaysDiff.getDaysDiff)(data[i].start_actual_time) < 2) {
                    auditData.startTime = nProps.context.intl.formatRelative(data[i].start_actual_time, {
                        timeZone: timeOffset,
                        units: 'day' }) +

                    ", " + nProps.context.intl.formatTime(data[i].start_actual_time, {
                        timeZone: timeOffset,
                        hour: 'numeric',
                        minute: 'numeric',
                        hour12: false });

                } else
                {
                    auditData.startTime = nProps.context.intl.formatDate(data[i].start_actual_time,
                    {
                        timeZone: timeOffset,
                        year: 'numeric',
                        month: 'short',
                        day: '2-digit',
                        hour: "2-digit",
                        minute: "2-digit",
                        hour12: false });

                }
            } else
            {
                auditData.startTime = "--";
            }

            if (data[i].expected_quantity && data[i].completed_quantity) {
                auditData.progress = data[i].completed_quantity / data[i].expected_quantity * 100;
            } else

            {
                auditData.progress = 0;
                if (["audit_completed"].indexOf(data[i].audit_status) > -1) {
                    auditData.progress = 100;
                }
            }

            if (data[i].completion_time) {
                if ( /* istanbul ignore next */(0, _getDaysDiff.getDaysDiff)(data[i].completion_time) < 2) {
                    auditData.completedTime = nProps.context.intl.formatRelative(data[i].completion_time, {
                        timeZone: timeOffset,
                        units: 'day' }) +

                    ", " + nProps.context.intl.formatTime(data[i].completion_time, {
                        timeZone: timeOffset,
                        hour: 'numeric',
                        minute: 'numeric',
                        hour12: false });

                } else
                {
                    auditData.completedTime = nProps.context.intl.formatDate(data[i].completion_time,
                    {
                        timeZone: timeOffset,
                        year: 'numeric',
                        month: 'short',
                        day: '2-digit',
                        hour: "2-digit",
                        minute: "2-digit",
                        hour12: false });

                }
            } else
            {
                auditData.completedTime = "--";
            }

            if (data[i].cancel_request === "requested") {
                auditData.cancelling = nProps.context.intl.formatMessage(messages.auditCancellingText);
            }
            if (data[i].audit_status === 'audit_created') {
                auditData.infoIcon = "created";
            }
            let rejected_lines = 0;
            try {
                rejected_lines = data[i].audit_info.filter(function (audit_line) {
                    return audit_line.audit_line_status === "audit_rejected";
                }).length;
            } catch (ex) {}
            if (data[i].audit_status === "audit_rejected" || rejected_lines > 0) {
                auditData.auditInfo = { total_lines: total_lines, rejected_lines: rejected_lines };
                auditData.infoIcon = "rejected";
            }
            auditData.resolvedTask = data[i].resolved;
            auditData.unresolvedTask = data[i].unresolved;
            auditDetails.push(auditData);
            auditData = {};
        }
        return auditDetails;
    }

    _mappingString(selectvalue) {
        switch (selectvalue) {
            case "sku":
                return (/* istanbul ignore next */_frontEndConstants.SPECIFIC_SKU_ID);
            case "location":
                return (/* istanbul ignore next */_frontEndConstants.SPECIFIC_LOCATION_ID);
            default:
                return "any";}

        ;
    }

    handlePageClick(data) {
        var url,appendTextFilterUrl = "",makeDate,inc = 0,value = [],paramValue = "",
        selectedAuditType = "",_queryParams = [];
        var currentDate = new Date();
        var filterApplied = false;
        var skuText = "",arr = [],selectvalue;
        makeDate = /* istanbul ignore next */(0, _processDate.addDateOffSet)(currentDate, -30);

        if (!data) {
            /**
                     * After clearing the applied filter,
                     * It'll set the default state to the filters.
                     */
            data = {};
            this.props.auditfilterState({
                tokenSelected: { "AUDIT TYPE": [/* istanbul ignore next */_frontEndConstants.ANY], "STATUS": [/* istanbul ignore next */_frontEndConstants.ALL] },
                searchQuery: {},
                defaultToken: { "AUDIT TYPE": [/* istanbul ignore next */_frontEndConstants.ANY], "STATUS": [/* istanbul ignore next */_frontEndConstants.ALL] } });

            this.props.toggleAuditFilter(false);
            this.props.showTableFilter(false);

        }
        //If user select both we are making it Any for backend support
        if (data.searchQuery && data.tokenSelected[/* istanbul ignore next */_frontEndConstants.AUDIT_TYPE]) {
            selectvalue = data.tokenSelected[/* istanbul ignore next */_frontEndConstants.AUDIT_TYPE].length === 2 ? /* istanbul ignore next */_frontEndConstants.ANY : data.tokenSelected[/* istanbul ignore next */_frontEndConstants.AUDIT_TYPE][0];
            skuText = /* istanbul ignore next */_frontEndConstants.AUDIT_PARAM_TYPE + selectvalue;
            _queryParams.push([/* istanbul ignore next */_frontEndConstants.AUDIT_PARAM_TYPE, selectvalue].join("="));
            selectedAuditType = this._mappingString(selectvalue);

            //Pushing the audit type into array to make it generic
            for (let propt in data.searchQuery) {
                if (selectedAuditType === 'any') {
                    propt !== /* istanbul ignore next */_frontEndConstants.AUDIT_TASK_ID && data.searchQuery[propt] !== "" ? value.push(data.searchQuery[propt]) : '';
                } else
                {
                    data.searchQuery[propt] !== "" && propt == selectedAuditType ? value.push(data.searchQuery[propt]) : '';
                }

            }
            //Formatting the param value for single and multiple type       
            if (value.length) {
                paramValue = value.length > 1 || selectvalue === /* istanbul ignore next */_frontEndConstants.ANY ? "['" + value.join("','") + "']" : "'" + value[0] + "'";
                _queryParams.push([/* istanbul ignore next */_frontEndConstants.AUDIT_PARAM_VALUE, "['" + value.join("','") + "']"].join("="));
                skuText = skuText + /* istanbul ignore next */_frontEndConstants.AUDIT_PARAM_VALUE + paramValue;
            }
        }
        //formating the audit status 
        if (data.tokenSelected && data.tokenSelected["STATUS"][0] !== /* istanbul ignore next */_frontEndConstants.ALL) {
            let statusToken = data.tokenSelected["STATUS"];
            skuText = skuText + /* istanbul ignore next */_frontEndConstants.AUDIT_STATUS + "['" + statusToken.join("','") + "']";
            _queryParams.push([/* istanbul ignore next */_frontEndConstants.AUDIT_STATUS, "['" + statusToken.join("','") + "']"].join("="));
        }

        if (data.searchQuery && data.searchQuery[/* istanbul ignore next */_frontEndConstants.AUDIT_TASK_ID]) {
            appendTextFilterUrl = /* istanbul ignore next */_configConstants.FILTER_AUDIT_ID + data.searchQuery[/* istanbul ignore next */_frontEndConstants.AUDIT_TASK_ID];
            _queryParams.push([/* istanbul ignore next */_configConstants.FILTER_AUDIT_ID, data.searchQuery[/* istanbul ignore next */_frontEndConstants.AUDIT_TASK_ID]].join("="));
            data.selected = 1;
            filterApplied = true;
        }


        if (data.url === undefined) {
            data.selected = data.selected ? data.selected : 1;
            if (data.columnKey && data.sortDir) {
                _queryParams.push( /* istanbul ignore next */_frontEndConstants.sortAuditHead[data.columnKey]);
                _queryParams.push( /* istanbul ignore next */_frontEndConstants.sortOrder[data.sortDir]);
            }
            _queryParams.push([/* istanbul ignore next */_configConstants.GIVEN_PAGE, data.selected || 1].join("="));
            _queryParams.push([/* istanbul ignore next */_configConstants.GIVEN_PAGE_SIZE, 20].join("="));
            url = [/* istanbul ignore next */_configConstants.SEARCH_AUDIT_URL + makeDate, _queryParams.join("&")].join("&");
        } else
        {
            url = data.url;
        }
        this.setState({ selected_page: data.selected });
        let paginationData = {
            'url': url,
            'method': /* istanbul ignore next */_frontEndConstants.GET,
            'cause': /* istanbul ignore next */_frontEndConstants.AUDIT_RETRIEVE,
            'token': this.props.auth_token,
            'contentType': /* istanbul ignore next */_frontEndConstants.APP_JSON };

        this.props.setAuditSpinner(true);
        this.props.filterApplied(filterApplied);
        this.props.getPageData(paginationData);
    }

    _setFilter() {
        var newState = !this.props.showFilter;
        this.props.showTableFilter(newState);
    }

    createAudit() {
        /* istanbul ignore next */_reactReduxModal.modal.add( /* istanbul ignore next */_createAudit2.default, {
            title: '',
            size: 'large',
            closeOnOutsideClick: true, // (optional) Switch to true if you want to close the modal by clicking outside of it,
            hideCloseButton: true // (optional) if you don't wanna show the top right close button
            //.. all what you put in here you will get access in the modal props ;),
        });

    }

    //Render Function goes here
    render() {
        var filterHeight = screen.height - 190;
        var renderTab = /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ __source: { fileName: _jsxFileName, lineNumber: 618 }, __self: this }),
        timeOffset = this.props.timeOffset || "",
        headerTimeZone = this.context.intl.formatDate(Date.now(),
        {
            timeZone: timeOffset,
            year: 'numeric',
            timeZoneName: 'long' }),

        totalProgress = 0;

        /*Extracting Time zone string for the specified time zone*/
        headerTimeZone = headerTimeZone.substr(5, headerTimeZone.length);

        var auditData = this._processAuditData();
        var auditState = { "auditCompleted": 0, "skuAudit": 0, "locationAudit": 0, "totalProgress": 0, auditIssue: 0 };
        for (var i = auditData.length - 1; i >= 0; i--) {
            if (auditData[i].status === /* istanbul ignore next */_frontEndConstants.GOR_COMPLETED_STATUS) {
                auditState["auditCompleted"]++;
            }

            if (auditData[i].status === /* istanbul ignore next */_frontEndConstants.AUDIT_ISSUES_STATUS) {
                auditState["auditIssue"]++;
            }
            if (auditData[i].auditType === /* istanbul ignore next */_frontEndConstants.SKU || auditData[i].auditType === /* istanbul ignore next */_frontEndConstants.AUDIT_BY_PDFA) {
                auditState["skuAudit"]++;
            }
            if (auditData[i].auditType === /* istanbul ignore next */_frontEndConstants.LOCATION) {
                auditState["locationAudit"]++;
            }
            totalProgress = auditData[i].progress + totalProgress;
            auditData[i].progress = auditData[i].progress.toFixed(1);

        }
        if (auditData.length && auditData.length !== 0) {
            auditState["totalProgress"] = totalProgress / auditData.length;
        }

        renderTab = /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_auditTable2.default, /* istanbul ignore next */{ items: auditData,
            intlMessg: this.props.intlMessages,
            timeZoneString: headerTimeZone,
            totalAudits: this.props.totalAudits,
            sortHeaderState: this.props.auditHeaderSort,
            currentSortState: this.props.auditSortHeader,
            sortHeaderOrder: this.props.auditHeaderSortOrder,
            currentHeaderOrder: this.props.auditSortHeaderState,
            refreshData: this._clearFilter.bind(this),
            setAuditFilter: this.props.auditFilterDetail, auditState: auditState,
            setFilter: this.props.showTableFilter, showFilter: this.props.showFilter,
            isFilterApplied: this.props.isFilterApplied,
            auditFilterStatus: this.props.auditFilterStatus,
            responseFlag: this.props.auditSpinner,
            onSortChange: this._refresh.bind(this), cancelAudit: this._cancelAudit.bind(this), __source: { fileName: _jsxFileName, lineNumber: 655 }, __self: this });

        let toolbar = /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ __source: { fileName: _jsxFileName, lineNumber: 671 }, __self: this },
            /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'gor-filter-wrap',
                    style: { 'display': this.props.showFilter ? 'block' : 'none', height: filterHeight }, __source: { fileName: _jsxFileName, lineNumber: 672 }, __self: this },
                /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_auditFilter2.default, /* istanbul ignore next */{ auditDetail: this.props.auditDetail, responseFlag: this.props.responseFlag, __source: { fileName: _jsxFileName, lineNumber: 674 }, __self: this })),

            /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'gorToolBar', __source: { fileName: _jsxFileName, lineNumber: 676 }, __self: this },
                /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'gorToolBarWrap', __source: { fileName: _jsxFileName, lineNumber: 677 }, __self: this },
                    /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'gorToolBarElements', __source: { fileName: _jsxFileName, lineNumber: 678 }, __self: this },
                        /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_reactIntl.FormattedMessage, /* istanbul ignore next */{ id: 'audit.table.heading', description: 'Heading for audit table',
                            defaultMessage: 'Audit Tasks', __source: { fileName: _jsxFileName, lineNumber: 679 }, __self: this }))),



                /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'gor-audit-filter-create-wrap', __source: { fileName: _jsxFileName, lineNumber: 684 }, __self: this },
                    /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'gor-button-wrap', __source: { fileName: _jsxFileName, lineNumber: 685 }, __self: this },
                        /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'button', /* istanbul ignore next */{ className: 'gor-audit-create-btn', onClick: this.createAudit.bind(this), __source: { fileName: _jsxFileName, lineNumber: 686 }, __self: this },
                            /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'gor-filter-add-token', __source: { fileName: _jsxFileName, lineNumber: 687 }, __self: this }),
                            /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_reactIntl.FormattedMessage, /* istanbul ignore next */{ id: 'audit.table.buttonLable',
                                description: 'button label for audit create',
                                defaultMessage: 'Create New Task', __source: { fileName: _jsxFileName, lineNumber: 688 }, __self: this }))),


                    /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'gor-button-wrap', __source: { fileName: _jsxFileName, lineNumber: 693 }, __self: this },
                        /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'button', /* istanbul ignore next */{
                                className: this.props.isFilterApplied ? "gor-filterBtn-applied" : "gor-filterBtn-btn",
                                onClick: this._setFilter.bind(this), __source: { fileName: _jsxFileName, lineNumber: 694 }, __self: this },
                            /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'gor-manage-task', __source: { fileName: _jsxFileName, lineNumber: 697 }, __self: this }),
                            /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_reactIntl.FormattedMessage, /* istanbul ignore next */{ id: 'gor.filter.filterLabel', description: 'button label for filter',
                                defaultMessage: 'Filter data', __source: { fileName: _jsxFileName, lineNumber: 698 }, __self: this }))))),





            /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_filterSummary2.default, /* istanbul ignore next */{ total: this.props.totalAudits || 0, isFilterApplied: this.props.isFilterApplied, responseFlag: this.props.responseFlag,
                filterText: /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_reactIntl.FormattedMessage, /* istanbul ignore next */{ id: 'auditList.filter.search.bar',
                    description: 'total results for filter search bar',
                    defaultMessage: '{total} results found',
                    values: { total: this.props.totalAudits || '0' }, __source: { fileName: _jsxFileName, lineNumber: 706 }, __self: this }),
                refreshList: this._clearFilter.bind(this),
                refreshText: /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_reactIntl.FormattedMessage, /* istanbul ignore next */{ id: 'auditList.filter.search.bar.showall',
                    description: 'button label for show all',
                    defaultMessage: 'Show all results', __source: { fileName: _jsxFileName, lineNumber: 711 }, __self: this }), __source: { fileName: _jsxFileName, lineNumber: 705 }, __self: this }));



        return (
            /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ __source: { fileName: _jsxFileName, lineNumber: 718 }, __self: this },
                /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ __source: { fileName: _jsxFileName, lineNumber: 719 }, __self: this },
                    /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'gor-Auditlist-table', __source: { fileName: _jsxFileName, lineNumber: 720 }, __self: this },
                        !this.props.showFilter ?
                        /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_Spinner2.default, /* istanbul ignore next */{ isLoading: this.props.auditSpinner, setSpinner: this.props.setAuditSpinner, __source: { fileName: _jsxFileName, lineNumber: 722 }, __self: this }) : "",
                        toolbar,
                        renderTab)),


                auditData.length && this.state.query ? /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'gor-audit-paginate-wrap', __source: { fileName: _jsxFileName, lineNumber: 727 }, __self: this },
                    /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_gorPaginateV2.default, /* istanbul ignore next */{ location: this.props.location, currentPage: this.state.query.page || 1, totalPage: this.props.totalPage, __source: { fileName: _jsxFileName, lineNumber: 728 }, __self: this })) :
                ""));


    }}

;


function mapStateToProps(state, ownProps) {
    return {
        orderFilter: state.sortHeaderState.auditFilter || "",
        auditSortHeader: state.sortHeaderState.auditHeaderSort || "id",
        auditSortHeaderState: state.sortHeaderState.auditHeaderSortOrder || [],
        totalAudits: state.recieveAuditDetail.totalAudits || 0,
        auditSpinner: state.spinner.auditSpinner || false,
        auditDetail: state.recieveAuditDetail.auditDetail || [],
        noResultFound: state.recieveAuditDetail.noResultFound,
        successQuery: state.recieveAuditDetail.successQuery,
        totalPage: state.recieveAuditDetail.totalPage || 0,
        auditRefresh: state.recieveAuditDetail.auditRefresh || null,
        intlMessages: state.intl.messages,
        auth_token: state.authLogin.auth_token,
        timeOffset: state.authLogin.timeOffset,
        showFilter: state.filterInfo.filterState || false,
        isFilterApplied: state.filterInfo.isFilterApplied || false,
        auditFilterStatus: state.filterInfo.auditFilterStatus || false,
        auditFilterState: state.filterInfo.auditFilterState || {},
        auditListRefreshed: state.auditInfo.auditListRefreshed,
        wsSubscriptionData: state.recieveSocketActions.socketDataSubscriptionPacket || /* istanbul ignore next */_initData.wsOverviewData,
        socketAuthorized: state.recieveSocketActions.socketAuthorized };

}

var mapDispatchToProps = function mapDispatchToProps(dispatch) {
    return {
        auditFilterDetail: function /* istanbul ignore next */auditFilterDetail(data) {
            dispatch( /* istanbul ignore next */(0, _sortHeaderActions.auditFilterDetail)(data));
        },
        auditHeaderSort: function /* istanbul ignore next */auditHeaderSort(data) {
            dispatch( /* istanbul ignore next */(0, _sortHeaderActions.auditHeaderSort)(data));
        },
        auditHeaderSortOrder: function /* istanbul ignore next */auditHeaderSortOrder(data) {
            dispatch( /* istanbul ignore next */(0, _sortHeaderActions.auditHeaderSortOrder)(data));
        },
        setAuditSpinner: function /* istanbul ignore next */setAuditSpinner(data) {
            dispatch( /* istanbul ignore next */(0, _auditActions.setAuditSpinner)(data));
        },
        getAuditData: function /* istanbul ignore next */getAuditData(data) {
            dispatch( /* istanbul ignore next */(0, _auditActions.getAuditData)(data));
        },
        getPageData: function /* istanbul ignore next */getPageData(data) {
            dispatch( /* istanbul ignore next */(0, _paginationAction.getPageData)(data));
        },
        setAuditRefresh: function /* istanbul ignore next */setAuditRefresh() {
            dispatch( /* istanbul ignore next */(0, _auditActions.setAuditRefresh)());
        },
        showTableFilter: function /* istanbul ignore next */showTableFilter(data) {
            dispatch( /* istanbul ignore next */(0, _filterAction.showTableFilter)(data));
        },
        filterApplied: function /* istanbul ignore next */filterApplied(data) {
            dispatch( /* istanbul ignore next */(0, _filterAction.filterApplied)(data));
        },
        auditfilterState: function /* istanbul ignore next */auditfilterState(data) {
            dispatch( /* istanbul ignore next */(0, _filterAction.auditfilterState)(data));
        },
        toggleAuditFilter: function /* istanbul ignore next */toggleAuditFilter(data) {
            dispatch( /* istanbul ignore next */(0, _filterAction.toggleAuditFilter)(data));
        },
        auditListRefreshed: function /* istanbul ignore next */auditListRefreshed(data) {
            dispatch( /* istanbul ignore next */(0, _auditActions.auditListRefreshed)(data));
        },
        updateSubscriptionPacket: function /* istanbul ignore next */updateSubscriptionPacket(data) {
            dispatch( /* istanbul ignore next */(0, _socketActions.updateSubscriptionPacket)(data));
        },
        initDataSentCall: function /* istanbul ignore next */initDataSentCall(data) {
            dispatch( /* istanbul ignore next */(0, _socketActions.setWsAction)({ type: /* istanbul ignore next */_frontEndConstants.WS_ONSEND, data: data }));
        },
        setTextBoxStatus: function /* istanbul ignore next */setTextBoxStatus(data) {
            dispatch( /* istanbul ignore next */(0, _auditActions.setTextBoxStatus)(data));
        },
        cancelAudit: function /* istanbul ignore next */cancelAudit(data) {
            dispatch( /* istanbul ignore next */(0, _auditActions.cancelAudit)(data));
        },
        setAuditQuery: function /* istanbul ignore next */setAuditQuery(data) {
            dispatch( /* istanbul ignore next */(0, _auditActions.setAuditQuery)(data));
        } };


};

AuditTab.contextTypes = {
    intl: /* istanbul ignore next */_react2.default.PropTypes.object.isRequired };

AuditTab.PropTypes = {
    orderFilter: /* istanbul ignore next */_react2.default.PropTypes.string,
    auditSortHeader: /* istanbul ignore next */_react2.default.PropTypes.string,
    auditSortHeaderState: /* istanbul ignore next */_react2.default.PropTypes.array,
    totalAudits: /* istanbul ignore next */_react2.default.PropTypes.number,
    auditSpinner: /* istanbul ignore next */_react2.default.PropTypes.bool,
    auditDetail: /* istanbul ignore next */_react2.default.PropTypes.array,
    totalPage: /* istanbul ignore next */_react2.default.PropTypes.number,
    auditRefresh: /* istanbul ignore next */_react2.default.PropTypes.bool,
    intlMessages: /* istanbul ignore next */_react2.default.PropTypes.string,
    auth_token: /* istanbul ignore next */_react2.default.PropTypes.object,
    timeOffset: /* istanbul ignore next */_react2.default.PropTypes.number,
    showFilter: /* istanbul ignore next */_react2.default.PropTypes.bool,
    isFilterApplied: /* istanbul ignore next */_react2.default.PropTypes.bool,
    auditFilterStatus: /* istanbul ignore next */_react2.default.PropTypes.bool,
    auditFilterState: /* istanbul ignore next */_react2.default.PropTypes.object,
    auditFilterDetail: /* istanbul ignore next */_react2.default.PropTypes.func,
    auditHeaderSort: /* istanbul ignore next */_react2.default.PropTypes.func,
    auditHeaderSortOrder: /* istanbul ignore next */_react2.default.PropTypes.func,
    setAuditSpinner: /* istanbul ignore next */_react2.default.PropTypes.func,
    getAuditData: /* istanbul ignore next */_react2.default.PropTypes.func,
    getPageData: /* istanbul ignore next */_react2.default.PropTypes.func,
    setAuditRefresh: /* istanbul ignore next */_react2.default.PropTypes.func,
    showTableFilter: /* istanbul ignore next */_react2.default.PropTypes.func,
    filterApplied: /* istanbul ignore next */_react2.default.PropTypes.func,
    setTextBoxStatus: /* istanbul ignore next */_react2.default.PropTypes.func }; /* istanbul ignore next */exports.default =



/* istanbul ignore next */(0, _reactRedux.connect)(mapStateToProps, mapDispatchToProps)(AuditTab);