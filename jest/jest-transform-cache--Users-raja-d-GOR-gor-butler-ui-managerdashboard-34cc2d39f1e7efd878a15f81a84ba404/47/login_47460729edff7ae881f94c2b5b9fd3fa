/* istanbul ignore next */'use strict';Object.defineProperty(exports, "__esModule", { value: true });var _jsxFileName = '/Users/raja.d/GOR/gor.butler.ui.managerdashboard/src/components/login/login.js';var /* istanbul ignore next */_react = require('react'); /* istanbul ignore next */var _react2 = _interopRequireDefault(_react);
var /* istanbul ignore next */_loginForm = require('./loginForm'); /* istanbul ignore next */var _loginForm2 = _interopRequireDefault(_loginForm);
var /* istanbul ignore next */_Footer = require('../footer/Footer'); /* istanbul ignore next */var _Footer2 = _interopRequireDefault(_Footer);
var /* istanbul ignore next */_Spinner = require('../../components/spinner/Spinner'); /* istanbul ignore next */var _Spinner2 = _interopRequireDefault(_Spinner);
var /* istanbul ignore next */_loginAction = require('../../actions/loginAction');
var /* istanbul ignore next */_validationActions = require('../../actions/validationActions');
var /* istanbul ignore next */_reactRedux = require('react-redux');
var /* istanbul ignore next */_frontEndConstants = require('../../constants/frontEndConstants');
var /* istanbul ignore next */_messageConstants = require('../../constants/messageConstants');
var /* istanbul ignore next */_reactIntl = require('react-intl');
var /* istanbul ignore next */_reactIntlRedux = require('react-intl-redux');

var /* istanbul ignore next */_dropdown = require('../../components/dropdown/dropdown.js'); /* istanbul ignore next */var _dropdown2 = _interopRequireDefault(_dropdown);
var /* istanbul ignore next */_topnotify = require('../../components/topnotify/topnotify'); /* istanbul ignore next */var _topnotify2 = _interopRequireDefault(_topnotify);
var /* istanbul ignore next */_i18n = require('../../utilities/i18n'); /* istanbul ignore next */function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}




class Login extends /* istanbul ignore next */_react2.default.Component {
    constructor(props)
    {
        super(props);
        this.state = { sel: 0, items: [
            { value: /* istanbul ignore next */_frontEndConstants.EN, label: /* istanbul ignore next */_messageConstants.ENG },
            { value: /* istanbul ignore next */_frontEndConstants.JA, label: /* istanbul ignore next */_messageConstants.JAP },
            { value: /* istanbul ignore next */_frontEndConstants.ES, label: /* istanbul ignore next */_messageConstants.SPANISH },
            { value: /* istanbul ignore next */_frontEndConstants.ZH, label: /* istanbul ignore next */_messageConstants.CHINESE },
            { value: /* istanbul ignore next */_frontEndConstants.DE, label: /* istanbul ignore next */_messageConstants.GERMAN },
            { value: /* istanbul ignore next */_frontEndConstants.FR, label: /* istanbul ignore next */_messageConstants.FRENCH }] };

    }
    componentWillMount()
    {
        document.body.className = /* istanbul ignore next */_frontEndConstants.FILL_BACK;
        this._changeDropdown();
    }
    _changeDropdown()
    {
        for (let i = 0; i < this.state.items.length; i++)
        {
            if (this.state.items[i].value === this.props.sLang)
            this.setState({ sel: i });
        }
    }
    componentWillReceiveProps(nextProps) {
        /**
                                           * Checking if the user is loggedin 
                                           * and redirecting to main page
                                           */
        if (nextProps.loginAuthorized)
        {
            this.props.resetForm();
            document.body.className = '';
            this.context.router.push("/md");
        }
    }

    /**
       * Checks for the changes in the language selection
       * and dispatches the corresponding action.
       * @param  {String} sLocale sLocale has to be of pattern 'en-US'
       */
    _handleSelectionChange(sLocale) {
        if (!sLocale) {
            return;
        }
        let data = {
            locale: sLocale,
            messages: /* istanbul ignore next */_i18n.translationMessages[sLocale] };

        this.props.updateIntl(data);
        sessionStorage.setItem('localLanguage', sLocale);
        this._changeDropdown();
    }
    render() {
        return (
            /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ __source: { fileName: _jsxFileName, lineNumber: 78 }, __self: this },
                /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_topnotify2.default, /* istanbul ignore next */{ __source: { fileName: _jsxFileName, lineNumber: 79 }, __self: this }),
                /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'gor-login-form', __source: { fileName: _jsxFileName, lineNumber: 80 }, __self: this },

                    /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_Spinner2.default, /* istanbul ignore next */{ isLoading: this.props.loginSpinner, setSpinner: this.props.setLoginSpinner, __source: { fileName: _jsxFileName, lineNumber: 82 }, __self: this }),
                    /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'gor-login-lang', __source: { fileName: _jsxFileName, lineNumber: 83 }, __self: this },
                        /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'gor-lang-text', __source: { fileName: _jsxFileName, lineNumber: 84 }, __self: this },
                            /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_reactIntl.FormattedMessage, /* istanbul ignore next */{ id: 'login.butler.language',
                                defaultMessage: 'Language', description: 'Text for language', __source: { fileName: _jsxFileName, lineNumber: 85 }, __self: this })),

                        /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_dropdown2.default, /* istanbul ignore next */{ optionDispatch: e => this._handleSelectionChange(e), items: this.state.items,
                            styleClass: 'gor-lang-drop',
                            currentState: this.state.items[this.state.sel], __source: { fileName: _jsxFileName, lineNumber: 88 }, __self: this })),


                    /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'gor-login-logo alt-gor-logo', __source: { fileName: _jsxFileName, lineNumber: 93 }, __self: this }),

                    /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_loginForm2.default, /* istanbul ignore next */{ __source: { fileName: _jsxFileName, lineNumber: 95 }, __self: this }),

                    /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'gor-box-bottom', __source: { fileName: _jsxFileName, lineNumber: 97 }, __self: this }, /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'span', /* istanbul ignore next */{ className: 'gor-box-bottom-left', __source: { fileName: _jsxFileName, lineNumber: 97 }, __self: this }),
                        /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'span', /* istanbul ignore next */{ className: 'gor-box-bottom-right', __source: { fileName: _jsxFileName, lineNumber: 98 }, __self: this })),


                    /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_Footer2.default, /* istanbul ignore next */{ __source: { fileName: _jsxFileName, lineNumber: 101 }, __self: this }))));



    }}

;
/**
   * [Passing Router to component through context]
   * @type {Object}
   */
Login.contextTypes = {
    router: /* istanbul ignore next */_react2.default.PropTypes.object.isRequired };



function mapStateToProps(state, ownProps) {
    return {
        loginAuthorized: state.authLogin.loginAuthorized,
        sLang: state.intl.locale || null,
        loginSpinner: state.spinner.loginSpinner };

}
/**
   * @param  {[Function]}
   * @return {[Object]}
   * mapping dispatch function to props
   * so that they could be called from props
   */
var mapDispatchToProps = function mapDispatchToProps(dispatch) {

    return {
        updateIntl: function /* istanbul ignore next */updateIntl(params) {dispatch( /* istanbul ignore next */(0, _reactIntlRedux.updateIntl)(params));},
        resetForm: function /* istanbul ignore next */resetForm() {dispatch( /* istanbul ignore next */(0, _validationActions.resetForm)());},
        setLoginSpinner: function /* istanbul ignore next */setLoginSpinner(params) {dispatch( /* istanbul ignore next */(0, _loginAction.setLoginSpinner)(params));} };

}; /* istanbul ignore next */exports.default =


/* istanbul ignore next */(0, _reactRedux.connect)(mapStateToProps, mapDispatchToProps)(Login);