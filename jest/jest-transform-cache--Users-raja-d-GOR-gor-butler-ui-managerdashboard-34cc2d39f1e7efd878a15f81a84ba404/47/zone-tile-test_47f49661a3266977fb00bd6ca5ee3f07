/* istanbul ignore next */'use strict';var _jsxFileName = '/Users/raja.d/GOR/gor.butler.ui.managerdashboard/src/__tests__/components/zoning/zone-tile-test.js';var /* istanbul ignore next */_react = require('react'); /* istanbul ignore next */var _react2 = _interopRequireDefault(_react);
var /* istanbul ignore next */_zoneTile = require('../../../components/systemOverview/zoneTile.js'); /* istanbul ignore next */var _zoneTile2 = _interopRequireDefault(_zoneTile);
var /* istanbul ignore next */_enzyme = require('enzyme');
var /* istanbul ignore next */_reactTestRenderer = require('react-test-renderer'); /* istanbul ignore next */var _reactTestRenderer2 = _interopRequireDefault(_reactTestRenderer);function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}

const props = {
  name: "Zone 1",
  id: "1",
  emergencyStatus: true,
  emergencyType: "hard",
  statusText: "STOPPED",
  statusClass: "zoneClearInit",
  status: "zone_clear",
  onZoneClick: function /* istanbul ignore next */onZoneClick() {

  } };


test('Result component should display data correctly', () => {

  const component = /* istanbul ignore next */_reactTestRenderer2.default.create(
  /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_zoneTile2.default, /* istanbul ignore next */{
    name: props.name,
    id: props.id,
    emergencyStatus: props.emergencyStatus,
    emergencyType: props.emergencyType,
    statusText: props.statusText,
    status: props.status,
    statusClass: props.statusClass,
    onZoneClick: props.onZoneClick, __source: { fileName: _jsxFileName, lineNumber: 22 }, __self: undefined }));

  let tree = component.toJSON();
  expect(tree).toMatchSnapshot();

});

describe('test zone tile component', () => {
  it('renders zone name', () => {
    const wrapper = /* istanbul ignore next */(0, _enzyme.shallow)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_zoneTile2.default, /* istanbul ignore next */{
      name: props.name,
      id: props.id,
      emergencyStatus: props.emergencyStatus,
      emergencyType: props.emergencyType,
      statusText: props.statusText,
      status: props.status,
      statusClass: props.statusClass,
      onZoneClick: props.onZoneClick, __source: { fileName: _jsxFileName, lineNumber: 39 }, __self: undefined }));
    const zoneName = /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'p', /* istanbul ignore next */{ className: 'zone-name', __source: { fileName: _jsxFileName, lineNumber: 48 }, __self: undefined }, /* istanbul ignore next */'Zone 1');
    const statusName = /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'p', /* istanbul ignore next */{ className: 'operating-status', __source: { fileName: _jsxFileName, lineNumber: 49 }, __self: undefined }, /* istanbul ignore next */'STOPPED');
    // expect(wrapper.contains(welcome)).to.equal(true);
    expect(wrapper.contains(zoneName)).toEqual(true);
    expect(wrapper.contains(statusName)).toEqual(true);
  });
});