/* istanbul ignore next */'use strict';Object.defineProperty(exports, "__esModule", { value: true });var _jsxFileName = '/Users/raja.d/GOR/gor.butler.ui.managerdashboard/src/containers/systemTabs/ppsTab.js'; /**
                                                                                                                                                                                                                 * Container for Overview tab
                                                                                                                                                                                                                 * This will be switched based on tab click
                                                                                                                                                                                                                 */
var /* istanbul ignore next */_react = require('react'); /* istanbul ignore next */var _react2 = _interopRequireDefault(_react);
var /* istanbul ignore next */_PPStable = require('./PPStable'); /* istanbul ignore next */var _PPStable2 = _interopRequireDefault(_PPStable);
var /* istanbul ignore next */_reactRedux = require('react-redux');
var /* istanbul ignore next */_ppsModeChangeAction = require('../../actions/ppsModeChangeAction');
var /* istanbul ignore next */_reactIntl = require('react-intl');
var /* istanbul ignore next */_Spinner = require('../../components/spinner/Spinner'); /* istanbul ignore next */var _Spinner2 = _interopRequireDefault(_Spinner);
var /* istanbul ignore next */_spinnerAction = require('../../actions/spinnerAction');
var /* istanbul ignore next */_backEndConstants = require('../../constants/backEndConstants');

var /* istanbul ignore next */_systemActions = require('./../../actions/systemActions');
var /* istanbul ignore next */_reactRouter = require('react-router');
var /* istanbul ignore next */_sortHeaderActions = require('../../actions/sortHeaderActions');







var /* istanbul ignore next */_frontEndConstants = require('../../constants/frontEndConstants');











var /* istanbul ignore next */_filterAction = require('../../actions/filterAction');






var /* istanbul ignore next */_socketActions = require('./../../actions/socketActions');
var /* istanbul ignore next */_initData = require('./../../constants/initData.js');
var /* istanbul ignore next */_ppsFilter = require('./ppsFilter'); /* istanbul ignore next */var _ppsFilter2 = _interopRequireDefault(_ppsFilter);
var /* istanbul ignore next */_filterSummary = require('../../components/tableFilter/filterSummary'); /* istanbul ignore next */var _filterSummary2 = _interopRequireDefault(_filterSummary);
var /* istanbul ignore next */_dropdown = require('../../components/gor-dropdown-component/dropdown'); /* istanbul ignore next */var _dropdown2 = _interopRequireDefault(_dropdown);
var /* istanbul ignore next */_configConstants = require('../../constants/configConstants');


var /* istanbul ignore next */_reactReduxModal = require('react-redux-modal');
var /* istanbul ignore next */_closePPSList = require('./closePPSList'); /* istanbul ignore next */var _closePPSList2 = _interopRequireDefault(_closePPSList);function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}

//Mesages for internationalization
const messages = /* istanbul ignore next */(0, _reactIntl.defineMessages)({
    namePrefix: {
        id: "ppsDetail.name.prefix",
        description: "prefix for pps id in ppsDetail",
        defaultMessage: "PPS-{ppsId}" },

    perfPrefix: {
        id: "ppsDetail.performance.prefix.items",
        description: "prefix for pps id in ppsDetail",
        defaultMessage: "{performance} items/hr" } });





class PPS extends /* istanbul ignore next */_react2.default.Component {
    constructor(props) {
        super(props);
        this.state = { query: null, sortedDataList: null };
    }

    componentWillMount() {
        /**
                           * It will update the last refreshed property of
                           * overview details, so that updated subscription
                           * packet can be sent to the server for data
                           * update.
                           */
        this.props.ppsListRefreshed();
    }

    componentWillReceiveProps(nextProps) {
        if (nextProps.socketAuthorized && nextProps.location.query && (!this.state.query || JSON.stringify(nextProps.location.query) !== JSON.stringify(this.state.query))) {
            this.setState({ query: nextProps.location.query });
            this._refreshList(nextProps.location.query);
        }
    }

    /**
       * The method will update the subscription packet
       * and will fetch the data from the socket.
       * @private
       */
    _refreshList(query) {
        this.props.setPpsSpinner(true);
        let filterSubsData = {};
        if (query.operator) {
            let operator_assigned_query = query.operator.split(" ");
            operator_assigned_query = operator_assigned_query.filter(function (word) {return !!word;});
            filterSubsData["operators_assigned"] = operator_assigned_query.length > 1 ? ["=", operator_assigned_query] : ["=", operator_assigned_query.join("").trim()];
        }

        if (query.pps_id) {
            filterSubsData["pps_id"] = ['=', query.pps_id];
        }
        if (query.status) {
            filterSubsData["pps_status"] = ['in', query.status.constructor === Array ? query.status : [query.status]];
        }
        if (query.mode) {
            filterSubsData["current_task"] = ['in', query.mode.constructor === Array ? query.mode : [query.mode]];
        }

        if (query.minRange || query.maxRange) {
            filterSubsData["performance"] = ['between', [query.minRange ? +query.minRange : -1, query.maxRange ? +query.maxRange : 500]];
        }

        if (Object.keys(query).filter(function (el) {return el !== 'page';}).length !== 0) {
            this.props.togglePPSFilter(true);
            this.props.filterApplied(true);
        } else {
            this.props.togglePPSFilter(false);
            this.props.filterApplied(false);
        }

        let updatedWsSubscription = this.props.wsSubscriptionData;
        updatedWsSubscription["pps"].data[0].details["filter_params"] = filterSubsData;
        this.props.initDataSentCall(updatedWsSubscription["pps"]);
        this.props.updateSubscriptionPacket(updatedWsSubscription);
        this.props.ppsfilterState({
            tokenSelected: {
                "STATUS": query.status ? query.status.constructor === Array ? query.status : [query.status] : ["all"],
                "MODE": query.mode ? query.mode.constructor === Array ? query.mode : [query.mode] : ["all"] },

            searchQuery: {
                "PPS ID": query.pps_id || '',
                "OPERATOR ASSIGNED": query.operator || "" },

            rangeSelected: { "minValue": [query.minRange || "-1"], "maxValue": [query.maxRange || "500"] } });


    }


    /**
       *
       */
    _clearFilter() {
        /* istanbul ignore next */_reactRouter.hashHistory.push({ pathname: "/system/pps", query: {} });
    }

    _processPPSData() {
        //TODO: codes need to be replaced after checking with backend
        var PPSData = [],detail = {},ppsId,performance,totalUser = 0;
        var nProps = this;
        var data = nProps.props.PPSDetail.PPStypeDetail;
        let PPS, OPEN, CLOSE, FCLOSE, PERFORMANCE;
        let pick = nProps.context.intl.formatMessage( /* istanbul ignore next */_backEndConstants.stringConfig.pick);
        let put = nProps.context.intl.formatMessage( /* istanbul ignore next */_backEndConstants.stringConfig.put);
        let audit = nProps.context.intl.formatMessage( /* istanbul ignore next */_backEndConstants.stringConfig.audit);
        var currentTask = { "pick": pick, "put": put, "audit": audit };
        var priStatus = { "open": 1, "close": 2, "force_close": 2 };
        var checkedPPS = this.props.checkedPps || {};
        var requestedStatusText = "--";
        detail.totalOperator = 0;
        for (var i = data.length - 1; i >= 0; i--) {
            detail = {};
            ppsId = data[i].pps_id;
            performance = data[i].performance < 0 ? 0 : data[i].performance;
            PPS = nProps.context.intl.formatMessage(messages.namePrefix, { "ppsId": ppsId });
            OPEN = nProps.context.intl.formatMessage( /* istanbul ignore next */_backEndConstants.stringConfig.open);
            CLOSE = nProps.context.intl.formatMessage( /* istanbul ignore next */_backEndConstants.stringConfig.close);
            FCLOSE = nProps.context.intl.formatMessage( /* istanbul ignore next */_backEndConstants.stringConfig.fclose);
            PERFORMANCE = nProps.context.intl.formatMessage(messages.perfPrefix, { "performance": performance ? performance : "0" });
            if (data[i]["requested_status"] === /* istanbul ignore next */_frontEndConstants.PPS_STATUS_OPEN) {
                requestedStatusText = OPEN;
            } else
            if (data[i]["requested_status"] === /* istanbul ignore next */_frontEndConstants.PPS_STATUS_CLOSE) {
                requestedStatusText = CLOSE;
            } else
            if (data[i]["requested_status"] === /* istanbul ignore next */_frontEndConstants.PPS_STATUS_FCLOSE) {
                requestedStatusText = FCLOSE;
            } else
            {
                requestedStatusText = "--";
            }
            detail.id = PPS;
            detail.ppsId = ppsId;
            detail.requested_status = requestedStatusText;
            detail.pps_requested_mode = data[i]["pps_requested_mode"];
            detail.isChecked = checkedPPS[data[i].pps_id] ? true : false;
            if (data[i].pps_status === /* istanbul ignore next */_frontEndConstants.PPS_STATUS_OPEN) {
                detail.status = OPEN;
                detail.statusPriority = priStatus[data[i].pps_status];
            } else
            if (data[i].pps_status === /* istanbul ignore next */_frontEndConstants.PPS_STATUS_CLOSE) {
                detail.status = CLOSE;
                detail.statusPriority = 1;
            } else
            {
                detail.status = FCLOSE;
                detail.statusPriority = 1;
            }
            detail.statusClass = data[i].pps_status;
            detail.operatingMode = currentTask[data[i].current_task];
            detail.operatingModeClass = data[i].current_task;
            detail.performance = PERFORMANCE; ///  orders /items
            detail.ppsThroughput = data[i].performance < 0 ? 0 : data[i].performance;
            if (data[i].operators_assigned === null) {
                detail.operatorAssigned = "--";
            } else
            {
                var userFirstLast;
                totalUser = totalUser + data[i].operators_assigned.length;
                for (var j = data[i].operators_assigned.length - 1; j >= 0; j--) {
                    if ( /* istanbul ignore next */_frontEndConstants.GOR_FIRST_LAST) {
                        userFirstLast = (data[i].operators_assigned[j][0] ? data[i].operators_assigned[j][0] : "") + " " + (data[i].operators_assigned[j][1] ? data[i].operators_assigned[j][1] : "");
                    } else
                    {
                        userFirstLast = (data[i].operators_assigned[j][1] ? data[i].operators_assigned[j][1] : "") + " " + (data[i].operators_assigned[j][0] ? data[i].operators_assigned[j][0] : "");
                    }
                    if (detail.operatorAssigned) {
                        detail.operatorAssigned = detail.operatorAssigned + ", " + userFirstLast;
                    } else
                    {
                        detail.operatorAssigned = userFirstLast;
                    }
                }
                detail.totalOperator = detail.totalOperator + data[i].operators_assigned.length;

            }
            detail.totalUser = totalUser;
            detail.profiles = data[i].pps_profiles;
            PPSData.push(detail);
        }
        return PPSData;

    }

    _setFilter() {
        this.props.showTableFilter(!this.props.showFilter);
    }


    updateSortedDataList(updatedList) {
        this.setState({ sortedDataList: updatedList });
    }

    /*handler for status change*/
    handleStatusChange(selection, requestObj) {
        var checkedPPS = [],j = 0,sortedIndex;

        if (selection.value === "close") {
            if (!requestObj) {
                let selectedPps = this.props.checkedPps,openPps = {};
                for (let k in selectedPps) {
                    if (selectedPps[k].status.toLowerCase() === "open" /*PPS_STATUS_OPEN.toLowerCase()*/) {
                            openPps[k] = selectedPps[k];
                        }
                }
                /* istanbul ignore next */_reactReduxModal.modal.add( /* istanbul ignore next */_closePPSList2.default, {
                    title: '',
                    heading: /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_reactIntl.FormattedMessage, /* istanbul ignore next */{ id: 'pps.close.heading',
                        description: 'Heading for Close PPS',
                        defaultMessage: 'Close PPS', __source: { fileName: _jsxFileName, lineNumber: 266 }, __self: this }),
                    size: 'large', // large, medium or small,
                    closeOnOutsideClick: true, // (optional) Switch to true if you want to close the modal by clicking outside of it,
                    hideCloseButton: true,
                    checkedPPS: openPps,
                    handleStatusChange: this.handleStatusChange.bind(this),
                    changePPSmode: this.props.changePPSmode.bind(this) });

            } else
            {
                let formData = {};
                formData = requestObj;
                let ppsStatusChange = {
                    'url': /* istanbul ignore next */_configConstants.PPS_STATUS_CHANGE_URL,
                    'formdata': formData,
                    'method': /* istanbul ignore next */_frontEndConstants.POST,
                    'cause': /* istanbul ignore next */_frontEndConstants.PPS_STATUS_CHANGE,
                    'token': sessionStorage.getItem('auth_token'),
                    'contentType': /* istanbul ignore next */_frontEndConstants.APP_JSON };


                this.props.changePPSmode(ppsStatusChange);
                this.props.setCheckAll(false);
                this.props.setDropDisplay(false);

            }
        } else
        if (selection.value === "open") {
            let formData = {},checkedPps = this.props.checkedPps,selectedPps = {};
            for (let k in this.props.checkedPps) {
                selectedPps[k] = "open";
            }
            formData["requested_pps_status"] = selectedPps;
            let ppsStatusChange = {
                'url': /* istanbul ignore next */_configConstants.PPS_STATUS_CHANGE_URL,
                'formdata': formData,
                'method': /* istanbul ignore next */_frontEndConstants.POST,
                'cause': /* istanbul ignore next */_frontEndConstants.PPS_STATUS_CHANGE,
                'token': sessionStorage.getItem('auth_token'),
                'contentType': /* istanbul ignore next */_frontEndConstants.APP_JSON };


            this.props.changePPSmode(ppsStatusChange);
            this.props.setCheckAll(false);
            this.props.setDropDisplay(false);

        }
    }

    handleModeChange(data) {
        var checkedPPS = [],j = 0,mode = data.value,sortedIndex,formData = {};
        checkedPPS = Object.keys(this.props.checkedPps);
        formData["pps_id"] = checkedPPS;
        formData["requested_pps_mode"] = mode;
        var ppsModeChange = {
            'url': /* istanbul ignore next */_configConstants.PPS_MODE_CHANGE_URL,
            'formdata': formData,
            'method': /* istanbul ignore next */_frontEndConstants.POST,
            'cause': /* istanbul ignore next */_frontEndConstants.PPS_MODE_CHANGE,
            'token': sessionStorage.getItem('auth_token'),
            'contentType': /* istanbul ignore next */_frontEndConstants.APP_JSON };


        this.props.changePPSmode(ppsModeChange);
        this.props.setCheckAll(false);
        this.props.setDropDisplay(false);


    }


    render() {
        let filterHeight = screen.height - 190 - 50;
        let updateStatusIntl = "";
        let operationMode = { "pick": 0, "put": 0, "audit": 0, "notSet": 0 };
        let data,operatorNum = 0,itemNumber = 5,ppsOn = 0,avgThroughput = 0;
        if (this.props.PPSDetail.PPStypeDetail !== undefined) {
            data = this._processPPSData();
            for (var i = data.length - 1; i >= 0; i--) {
                if (data[i].operatingModeClass !== null) {
                    operationMode[data[i].operatingModeClass] = operationMode[data[i].operatingModeClass] + 1;
                } else
                {
                    operationMode = { "Pick": "--", "Put": "--", "Audit": "--", "NotSet": "--" };
                    operatorNum = "--";
                }

                if (operatorNum < data[i].totalUser) {
                    operatorNum = data[i].totalUser;
                }

                if (data[i].statusClass.toLowerCase() === /* istanbul ignore next */_frontEndConstants.GOR_ON_STATUS.toLowerCase()) {
                    ppsOn++;
                }

                if (data[i].ppsThroughput) {
                    avgThroughput = avgThroughput + data[i].ppsThroughput;
                }
            }

            if (data.length) {
                avgThroughput = (avgThroughput / data.length).toFixed(1);
            }

        }

        let drop,selected = 0,statusDrop;
        let pickDrop = /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_reactIntl.FormattedMessage, /* istanbul ignore next */{ id: 'PPS.table.pickDrop', description: 'pick dropdown option for PPS',
            defaultMessage: 'Put', __source: { fileName: _jsxFileName, lineNumber: 375 }, __self: this });
        let putDrop = /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_reactIntl.FormattedMessage, /* istanbul ignore next */{ id: 'PPS.table.putDrop', description: 'put dropdown option for PPS',
            defaultMessage: 'Pick', __source: { fileName: _jsxFileName, lineNumber: 377 }, __self: this });
        let auditDrop = /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_reactIntl.FormattedMessage, /* istanbul ignore next */{ id: 'PPS.table.auditDrop', description: 'audit dropdown option for PPS',
            defaultMessage: 'Audit', __source: { fileName: _jsxFileName, lineNumber: 379 }, __self: this });
        let openStatusLabel = /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_reactIntl.FormattedMessage, /* istanbul ignore next */{ id: 'PPS.table.openStatusLabel', description: 'audit dropdown option for Status change',
            defaultMessage: 'Open Selected PPS', __source: { fileName: _jsxFileName, lineNumber: 381 }, __self: this });
        let closeStatusLabel = /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_reactIntl.FormattedMessage, /* istanbul ignore next */{ id: 'PPS.table.closeStatusLabel', description: 'audit dropdown option for Status change',
            defaultMessage: 'Close Selected PPS', __source: { fileName: _jsxFileName, lineNumber: 383 }, __self: this });
        let statusDropPHolder = /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_reactIntl.FormattedMessage, /* istanbul ignore next */{ id: 'PPS.table.statusPlaceholder', description: 'Placeholder for status dropdown',
            defaultMessage: 'Change PPS Status', __source: { fileName: _jsxFileName, lineNumber: 385 }, __self: this });
        let modeDropPHolder = /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_reactIntl.FormattedMessage, /* istanbul ignore next */{ id: 'PPS.table.modePlaceholder', description: 'Placeholder for mode dropdown',
            defaultMessage: 'Change PPS Mode', __source: { fileName: _jsxFileName, lineNumber: 387 }, __self: this });
        var openCount = 0,closeCount = 0;
        for (let k in this.props.checkedPps) {
            if (this.props.checkedPps[k].status.toLowerCase() === "close" || this.props.checkedPps[k].status.toLowerCase() === "force close") {
                closeCount++;
            } else
            {
                openCount++;
            }
        }

        const status = [
        { value: 'open', disabled: closeCount ? false : true, label: openStatusLabel },
        { value: 'close', disabled: openCount ? false : true, label: closeStatusLabel }];

        const modes = [{ value: 'put', disabled: false, label: pickDrop },
        { value: 'pick', disabled: false, label: putDrop },
        { value: 'audit', disabled: false, label: auditDrop }];

        drop = /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_dropdown2.default, /* istanbul ignore next */{
            options: modes,
            onSelectHandler: e => this.handleModeChange(e),
            disabled: !this.props.bDropRender,
            resetOnSelect: true,
            placeholder: modeDropPHolder, __source: { fileName: _jsxFileName, lineNumber: 407 }, __self: this });

        statusDrop = /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_dropdown2.default, /* istanbul ignore next */{
            options: status,
            onSelectHandler: e => this.handleStatusChange(e),
            disabled: !this.props.bDropRender,
            resetOnSelect: true,
            placeholder: statusDropPHolder, __source: { fileName: _jsxFileName, lineNumber: 414 }, __self: this });

        if (this.props.checkedPps) {

            selected = Object.keys(this.props.checkedPps).length;
        }

        return (
            /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ __source: { fileName: _jsxFileName, lineNumber: 427 }, __self: this },
                /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ __source: { fileName: _jsxFileName, lineNumber: 428 }, __self: this },
                    /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'gorTesting', __source: { fileName: _jsxFileName, lineNumber: 429 }, __self: this },
                        /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_Spinner2.default, /* istanbul ignore next */{ isLoading: this.props.ppsSpinner, setSpinner: this.props.setPpsSpinner, __source: { fileName: _jsxFileName, lineNumber: 430 }, __self: this }),
                        data ? /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ __source: { fileName: _jsxFileName, lineNumber: 431 }, __self: this },
                            /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'gor-filter-wrap',
                                    style: { 'width': this.props.showFilter ? '350px' : '0px', height: filterHeight }, __source: { fileName: _jsxFileName, lineNumber: 432 }, __self: this },
                                /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_ppsFilter2.default, /* istanbul ignore next */{ data: data, responseFlag: this.props.responseFlag, __source: { fileName: _jsxFileName, lineNumber: 434 }, __self: this })),


                            /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'gorToolBar', __source: { fileName: _jsxFileName, lineNumber: 437 }, __self: this },
                                /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'gorToolBarWrap', __source: { fileName: _jsxFileName, lineNumber: 438 }, __self: this },
                                    /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'gorToolBarElements', __source: { fileName: _jsxFileName, lineNumber: 439 }, __self: this },
                                        /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_reactIntl.FormattedMessage, /* istanbul ignore next */{ id: 'pps.table.heading', description: 'Heading for PPS',
                                            defaultMessage: 'Pick Put Stations', __source: { fileName: _jsxFileName, lineNumber: 440 }, __self: this }),
                                        /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'gorHeaderSubText', __source: { fileName: _jsxFileName, lineNumber: 442 }, __self: this },
                                            /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_reactIntl.FormattedMessage, /* istanbul ignore next */{ id: 'PPStable.selected', description: 'selected pps for ppsSelected',
                                                defaultMessage: '{selected} selected',
                                                values: { selected: selected ? selected : '0' }, __source: { fileName: _jsxFileName, lineNumber: 443 }, __self: this })))),





                                /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'filterWrapper', __source: { fileName: _jsxFileName, lineNumber: 451 }, __self: this },
                                    /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'gorToolBarDropDown pps', __source: { fileName: _jsxFileName, lineNumber: 452 }, __self: this },
                                        statusDrop),

                                    /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'gorToolBarDropDown pps', __source: { fileName: _jsxFileName, lineNumber: 455 }, __self: this },
                                        drop),

                                    /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'gorToolBarDropDown', __source: { fileName: _jsxFileName, lineNumber: 458 }, __self: this },
                                        /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'gor-button-wrap', __source: { fileName: _jsxFileName, lineNumber: 459 }, __self: this },
                                            /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{
                                                    className: 'gor-button-sub-status', __source: { fileName: _jsxFileName, lineNumber: 460 }, __self: this }, this.props.lastUpdatedText, /* istanbul ignore next */' ', this.props.lastUpdated, /* istanbul ignore next */' '),
                                            /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'button', /* istanbul ignore next */{
                                                    className: this.props.ppsFilterState ? "gor-filterBtn-applied" : "gor-filterBtn-btn",
                                                    onClick: this._setFilter.bind(this), __source: { fileName: _jsxFileName, lineNumber: 462 }, __self: this },
                                                /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'gor-manage-task', __source: { fileName: _jsxFileName, lineNumber: 465 }, __self: this }),
                                                /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_reactIntl.FormattedMessage, /* istanbul ignore next */{ id: 'gor.filter.filterLabel', description: 'button label for filter',
                                                    defaultMessage: 'Filter data', __source: { fileName: _jsxFileName, lineNumber: 466 }, __self: this })))))),








                            /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_filterSummary2.default, /* istanbul ignore next */{ total: data.length || 0, isFilterApplied: this.props.isFilterApplied, responseFlag: this.props.responseFlag,
                                filterText: /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_reactIntl.FormattedMessage, /* istanbul ignore next */{ id: 'ppsList.filter.search.bar',
                                    description: 'total pps for filter search bar',
                                    defaultMessage: '{total} Stations found',
                                    values: { total: data.length || 0 }, __source: { fileName: _jsxFileName, lineNumber: 477 }, __self: this }),
                                refreshList: this._clearFilter.bind(this),
                                refreshText: /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_reactIntl.FormattedMessage, /* istanbul ignore next */{ id: 'ppsList.filter.search.bar.showall',
                                    description: 'button label for show all',
                                    defaultMessage: 'Show all Stations', __source: { fileName: _jsxFileName, lineNumber: 482 }, __self: this }), __source: { fileName: _jsxFileName, lineNumber: 476 }, __self: this })) :

                        null,


                        /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_PPStable2.default, /* istanbul ignore next */{ updateSortedDataList: this.updateSortedDataList.bind(this), items: data, itemNumber: itemNumber, operatorNum: operatorNum,
                            operationMode: operationMode,
                            modeChange: this.props.changePPSmode, intlMessg: this.props.intlMessages,
                            sortHeaderState: this.props.ppsHeaderSort, currentSortState: this.props.ppsSortHeader,
                            sortHeaderOrder: this.props.ppsHeaderSortOrder,
                            currentHeaderOrder: this.props.ppsSortHeaderState,
                            setCheckedPps: this.props.setCheckedPps, checkedPps: this.props.checkedPps,
                            ppsOnState: ppsOn,
                            renderDdrop: this.props.setDropDisplay,
                            bDropRender: this.props.bDropRender,
                            setCheckAll: this.props.setCheckAll,
                            getCheckAll: this.props.getCheckAll,
                            setPpsFilter: this.props.ppsFilterDetail,
                            getPpsFilter: this.props.ppsFilter,
                            avgThroughput: avgThroughput,
                            ppsFilterState: this.props.ppsFilterState,
                            isFilterApplied: this.props.isFilterApplied,
                            lastUpdatedText: updateStatusIntl,
                            lastUpdated: updateStatusIntl,
                            showFilter: this.props.showFilter,
                            setFilter: this.props.showTableFilter,
                            refreshList: this._clearFilter.bind(this), __source: { fileName: _jsxFileName, lineNumber: 489 }, __self: this })))));





    }}

;


function mapStateToProps(state, ownProps) {
    return {
        ppsFilter: state.sortHeaderState.ppsFilter || "",
        getCheckAll: state.sortHeaderState.checkAll || false,
        bDropRender: state.sortHeaderState.renderDropD || false,
        checkedPps: state.sortHeaderState.checkedPps,
        ppsSortHeader: state.sortHeaderState.ppsHeaderSort || /* istanbul ignore next */_frontEndConstants.INITIAL_HEADER_SORT,
        ppsSortHeaderState: state.sortHeaderState.ppsHeaderSortOrder || /* istanbul ignore next */_frontEndConstants.INITIAL_HEADER_ORDER,
        ppsSpinner: state.spinner.ppsSpinner || false,
        PPSDetail: state.PPSDetail || [],
        intlMessages: state.intl.messages,
        showFilter: state.filterInfo.filterState || false,
        ppsFilterState: state.filterInfo.ppsFilterState || false,
        wsSubscriptionData: state.recieveSocketActions.socketDataSubscriptionPacket || /* istanbul ignore next */_initData.wsOverviewData,
        isFilterApplied: state.filterInfo.isFilterApplied || false,
        socketAuthorized: state.recieveSocketActions.socketAuthorized,
        ppsListRefreshed: state.ppsInfo.ppsListRefreshed };

}

var mapDispatchToProps = function mapDispatchToProps(dispatch) {
    return {
        ppsFilterDetail: function /* istanbul ignore next */ppsFilterDetail(data) {
            dispatch( /* istanbul ignore next */(0, _sortHeaderActions.ppsFilterDetail)(data));
        },
        changePPSmode: function /* istanbul ignore next */changePPSmode(data) {
            dispatch( /* istanbul ignore next */(0, _ppsModeChangeAction.changePPSmode)(data));
        },
        setPpsSpinner: function /* istanbul ignore next */setPpsSpinner(data) {
            dispatch( /* istanbul ignore next */(0, _spinnerAction.setPpsSpinner)(data));
        },
        ppsHeaderSort: function /* istanbul ignore next */ppsHeaderSort(data) {
            dispatch( /* istanbul ignore next */(0, _sortHeaderActions.ppsHeaderSort)(data));
        },
        ppsHeaderSortOrder: function /* istanbul ignore next */ppsHeaderSortOrder(data) {
            dispatch( /* istanbul ignore next */(0, _sortHeaderActions.ppsHeaderSortOrder)(data));
        },
        setCheckedPps: function /* istanbul ignore next */setCheckedPps(data) {
            dispatch( /* istanbul ignore next */(0, _sortHeaderActions.setCheckedPps)(data));
        },
        setDropDisplay: function /* istanbul ignore next */setDropDisplay(data) {
            dispatch( /* istanbul ignore next */(0, _sortHeaderActions.setDropDisplay)(data));
        },
        setCheckAll: function /* istanbul ignore next */setCheckAll(data) {
            dispatch( /* istanbul ignore next */(0, _sortHeaderActions.setCheckAll)(data));
        },
        showTableFilter: function /* istanbul ignore next */showTableFilter(data) {
            dispatch( /* istanbul ignore next */(0, _filterAction.showTableFilter)(data));
        },
        ppsfilterState: function /* istanbul ignore next */ppsfilterState(data) {
            dispatch( /* istanbul ignore next */(0, _filterAction.ppsfilterState)(data));
        },
        filterApplied: function /* istanbul ignore next */filterApplied(data) {
            dispatch( /* istanbul ignore next */(0, _filterAction.filterApplied)(data));
        },
        updateSubscriptionPacket: function /* istanbul ignore next */updateSubscriptionPacket(data) {
            dispatch( /* istanbul ignore next */(0, _socketActions.updateSubscriptionPacket)(data));
        },
        togglePPSFilter: function /* istanbul ignore next */togglePPSFilter(data) {
            dispatch( /* istanbul ignore next */(0, _filterAction.togglePPSFilter)(data));
        },

        setDefaultRange: function /* istanbul ignore next */setDefaultRange(data) {
            dispatch( /* istanbul ignore next */(0, _filterAction.setDefaultRange)(data));
        },
        initDataSentCall: function /* istanbul ignore next */initDataSentCall(data) {dispatch( /* istanbul ignore next */(0, _socketActions.setWsAction)({ type: /* istanbul ignore next */_frontEndConstants.WS_ONSEND, data: data }));},
        ppsListRefreshed: function /* istanbul ignore next */ppsListRefreshed(data) {dispatch( /* istanbul ignore next */(0, _systemActions.ppsListRefreshed)(data));} };

};

PPS.contextTypes = {
    intl: /* istanbul ignore next */_react2.default.PropTypes.object.isRequired };

PPS.PropTypes = {
    ppsFilter: /* istanbul ignore next */_react2.default.PropTypes.string,
    getCheckAll: /* istanbul ignore next */_react2.default.PropTypes.bool,
    bDropRender: /* istanbul ignore next */_react2.default.PropTypes.bool,
    ppsSortHeader: /* istanbul ignore next */_react2.default.PropTypes.string,
    ppsSortHeaderState: /* istanbul ignore next */_react2.default.PropTypes.string,
    ppsSpinner: /* istanbul ignore next */_react2.default.PropTypes.bool,
    PPSDetail: /* istanbul ignore next */_react2.default.PropTypes.array,
    showFilter: /* istanbul ignore next */_react2.default.PropTypes.bool,
    ppsFilterState: /* istanbul ignore next */_react2.default.PropTypes.bool,
    ppsFilterDetail: /* istanbul ignore next */_react2.default.PropTypes.func,
    changePPSmode: /* istanbul ignore next */_react2.default.PropTypes.func,
    setPpsSpinner: /* istanbul ignore next */_react2.default.PropTypes.func,
    ppsHeaderSort: /* istanbul ignore next */_react2.default.PropTypes.func,
    ppsHeaderSortOrder: /* istanbul ignore next */_react2.default.PropTypes.func,
    setCheckedPps: /* istanbul ignore next */_react2.default.PropTypes.func,
    setDropDisplay: /* istanbul ignore next */_react2.default.PropTypes.func,
    setCheckAll: /* istanbul ignore next */_react2.default.PropTypes.func,
    showTableFilter: /* istanbul ignore next */_react2.default.PropTypes.func,
    filterApplied: /* istanbul ignore next */_react2.default.PropTypes.func,
    isFilterApplied: /* istanbul ignore next */_react2.default.PropTypes.bool,
    wsSubscriptionData: /* istanbul ignore next */_react2.default.PropTypes.object }; /* istanbul ignore next */exports.default =



/* istanbul ignore next */(0, _reactRedux.connect)(mapStateToProps, mapDispatchToProps)(PPS);