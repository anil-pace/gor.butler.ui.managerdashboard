/* istanbul ignore next */'use strict';Object.defineProperty(exports, "__esModule", { value: true });var cov_lbdok5nwb = function () {var path = '/Users/raja.d/GOR/gor.butler.ui.managerdashboard/src/middleware/socketMiddleware.js',hash = 'b7b634ec3b3ea8a324f1a293760eb9eb0565fa9a',global = new Function('return this')(),gcv = '__coverage__',coverageData = { path: '/Users/raja.d/GOR/gor.butler.ui.managerdashboard/src/middleware/socketMiddleware.js', statementMap: { '0': { start: { line: 7, column: 23 }, end: { line: 71, column: 4 } }, '1': { start: { line: 8, column: 13 }, end: { line: 8, column: 17 } }, '2': { start: { line: 10, column: 15 }, end: { line: 15, column: 3 } }, '3': { start: { line: 10, column: 34 }, end: { line: 15, column: 3 } }, '4': { start: { line: 14, column: 4 }, end: { line: 14, column: 47 } }, '5': { start: { line: 17, column: 16 }, end: { line: 21, column: 3 } }, '6': { start: { line: 17, column: 29 }, end: { line: 21, column: 3 } }, '7': { start: { line: 20, column: 4 }, end: { line: 20, column: 38 } }, '8': { start: { line: 23, column: 18 }, end: { line: 27, column: 3 } }, '9': { start: { line: 23, column: 31 }, end: { line: 27, column: 3 } }, '10': { start: { line: 25, column: 12 }, end: { line: 25, column: 32 } }, '11': { start: { line: 26, column: 6 }, end: { line: 26, column: 31 } }, '12': { start: { line: 29, column: 2 }, end: { line: 69, column: 3 } }, '13': { start: { line: 29, column: 17 }, end: { line: 69, column: 3 } }, '14': { start: { line: 29, column: 24 }, end: { line: 69, column: 3 } }, '15': { start: { line: 30, column: 4 }, end: { line: 68, column: 5 } }, '16': { start: { line: 35, column: 8 }, end: { line: 37, column: 9 } }, '17': { start: { line: 36, column: 10 }, end: { line: 36, column: 25 } }, '18': { start: { line: 42, column: 8 }, end: { line: 42, column: 37 } }, '19': { start: { line: 43, column: 8 }, end: { line: 43, column: 49 } }, '20': { start: { line: 44, column: 8 }, end: { line: 44, column: 45 } }, '21': { start: { line: 45, column: 8 }, end: { line: 45, column: 56 } }, '22': { start: { line: 47, column: 8 }, end: { line: 47, column: 14 } }, '23': { start: { line: 51, column: 8 }, end: { line: 53, column: 9 } }, '24': { start: { line: 52, column: 10 }, end: { line: 52, column: 25 } }, '25': { start: { line: 54, column: 8 }, end: { line: 54, column: 20 } }, '26': { start: { line: 58, column: 8 }, end: { line: 58, column: 14 } }, '27': { start: { line: 62, column: 8 }, end: { line: 62, column: 49 } }, '28': { start: { line: 63, column: 8 }, end: { line: 63, column: 14 } }, '29': { start: { line: 67, column: 8 }, end: { line: 67, column: 28 } } }, fnMap: { '0': { name: '(anonymous_0)', decl: { start: { line: 7, column: 24 }, end: { line: 7, column: 25 } }, loc: { start: { line: 7, column: 34 }, end: { line: 71, column: 1 } }, line: 7 }, '1': { name: '(anonymous_1)', decl: { start: { line: 10, column: 15 }, end: { line: 10, column: 16 } }, loc: { start: { line: 10, column: 34 }, end: { line: 15, column: 3 } }, line: 10 }, '2': { name: '(anonymous_2)', decl: { start: { line: 10, column: 34 }, end: { line: 10, column: 35 } }, loc: { start: { line: 10, column: 40 }, end: { line: 15, column: 3 } }, line: 10 }, '3': { name: '(anonymous_3)', decl: { start: { line: 17, column: 16 }, end: { line: 17, column: 17 } }, loc: { start: { line: 17, column: 29 }, end: { line: 21, column: 3 } }, line: 17 }, '4': { name: '(anonymous_4)', decl: { start: { line: 17, column: 29 }, end: { line: 17, column: 30 } }, loc: { start: { line: 17, column: 35 }, end: { line: 21, column: 3 } }, line: 17 }, '5': { name: '(anonymous_5)', decl: { start: { line: 23, column: 18 }, end: { line: 23, column: 19 } }, loc: { start: { line: 23, column: 31 }, end: { line: 27, column: 3 } }, line: 23 }, '6': { name: '(anonymous_6)', decl: { start: { line: 23, column: 31 }, end: { line: 23, column: 32 } }, loc: { start: { line: 23, column: 37 }, end: { line: 27, column: 3 } }, line: 23 }, '7': { name: '(anonymous_7)', decl: { start: { line: 29, column: 9 }, end: { line: 29, column: 10 } }, loc: { start: { line: 29, column: 17 }, end: { line: 69, column: 3 } }, line: 29 }, '8': { name: '(anonymous_8)', decl: { start: { line: 29, column: 17 }, end: { line: 29, column: 18 } }, loc: { start: { line: 29, column: 24 }, end: { line: 69, column: 3 } }, line: 29 }, '9': { name: '(anonymous_9)', decl: { start: { line: 29, column: 24 }, end: { line: 29, column: 25 } }, loc: { start: { line: 29, column: 33 }, end: { line: 69, column: 3 } }, line: 29 } }, branchMap: { '0': { loc: { start: { line: 30, column: 4 }, end: { line: 68, column: 5 } }, type: 'switch', locations: [{ start: { line: 33, column: 6 }, end: { line: 47, column: 14 } }, { start: { line: 50, column: 6 }, end: { line: 58, column: 14 } }, { start: { line: 61, column: 6 }, end: { line: 63, column: 14 } }, { start: { line: 66, column: 6 }, end: { line: 67, column: 28 } }], line: 30 }, '1': { loc: { start: { line: 35, column: 8 }, end: { line: 37, column: 9 } }, type: 'if', locations: [{ start: { line: 35, column: 8 }, end: { line: 37, column: 9 } }, { start: { line: 35, column: 8 }, end: { line: 37, column: 9 } }], line: 35 }, '2': { loc: { start: { line: 51, column: 8 }, end: { line: 53, column: 9 } }, type: 'if', locations: [{ start: { line: 51, column: 8 }, end: { line: 53, column: 9 } }, { start: { line: 51, column: 8 }, end: { line: 53, column: 9 } }], line: 51 } }, s: { '0': 0, '1': 0, '2': 0, '3': 0, '4': 0, '5': 0, '6': 0, '7': 0, '8': 0, '9': 0, '10': 0, '11': 0, '12': 0, '13': 0, '14': 0, '15': 0, '16': 0, '17': 0, '18': 0, '19': 0, '20': 0, '21': 0, '22': 0, '23': 0, '24': 0, '25': 0, '26': 0, '27': 0, '28': 0, '29': 0 }, f: { '0': 0, '1': 0, '2': 0, '3': 0, '4': 0, '5': 0, '6': 0, '7': 0, '8': 0, '9': 0 }, b: { '0': [0, 0, 0, 0], '1': [0, 0], '2': [0, 0] }, _coverageSchema: '332fd63041d2c1bcb487cc26dd0d5f7d97098a6c' },coverage = global[gcv] || (global[gcv] = {});if (coverage[path] && coverage[path].hash === hash) {return coverage[path];}coverageData.hash = hash;return coverage[path] = coverageData;}();var /* istanbul ignore next */_socketActions = require('../actions/socketActions');
var /* istanbul ignore next */_frontEndConstants = require('../constants/frontEndConstants');
var /* istanbul ignore next */_configConstants = require('../constants/configConstants');
var /* istanbul ignore next */_responseParser = require('../utilities/responseParser');


const socketMiddleware = /* istanbul ignore next */(++cov_lbdok5nwb.s[0], function () {/* istanbul ignore next */++cov_lbdok5nwb.f[0];
  var socket = /* istanbul ignore next */(++cov_lbdok5nwb.s[1], null); /* istanbul ignore next */++cov_lbdok5nwb.s[2];

  const onOpen = (ws, store, token) => {/* istanbul ignore next */++cov_lbdok5nwb.f[1];++cov_lbdok5nwb.s[3];return evt => {/* istanbul ignore next */++cov_lbdok5nwb.f[2];++cov_lbdok5nwb.s[4];
      //Send a handshake, or authenticate with remote end

      //Tell the store we're connected
      store.dispatch( /* istanbul ignore next */(0, _socketActions.wsResponseAction)(evt.type));
    };}; /* istanbul ignore next */++cov_lbdok5nwb.s[5];

  const onClose = (ws, store) => {/* istanbul ignore next */++cov_lbdok5nwb.f[3];++cov_lbdok5nwb.s[6];return evt => {/* istanbul ignore next */++cov_lbdok5nwb.f[4];++cov_lbdok5nwb.s[7];
      //Tell the store we've disconnected

      store.dispatch( /* istanbul ignore next */(0, _socketActions.wsEndConnection)());
    };}; /* istanbul ignore next */++cov_lbdok5nwb.s[8];

  const onMessage = (ws, store) => {/* istanbul ignore next */++cov_lbdok5nwb.f[5];++cov_lbdok5nwb.s[9];return evt => {/* istanbul ignore next */++cov_lbdok5nwb.f[6];
      //Parse the JSON message received on the websocket
      var msg = /* istanbul ignore next */(++cov_lbdok5nwb.s[10], JSON.parse(evt.data)); /* istanbul ignore next */++cov_lbdok5nwb.s[11];
      /* istanbul ignore next */(0, _responseParser.ResponseParse)(store, msg);
    };}; /* istanbul ignore next */++cov_lbdok5nwb.s[12];

  return store => {/* istanbul ignore next */++cov_lbdok5nwb.f[7];++cov_lbdok5nwb.s[13];return next => {/* istanbul ignore next */++cov_lbdok5nwb.f[8];++cov_lbdok5nwb.s[14];return action => {/* istanbul ignore next */++cov_lbdok5nwb.f[9];++cov_lbdok5nwb.s[15];
        switch (action.type) {

          //The user wants us to connect
          case /* istanbul ignore next */_frontEndConstants.WS_CONNECT: /* istanbul ignore next */++cov_lbdok5nwb.b[0][0];++cov_lbdok5nwb.s[16];
            //Start a new connection to the server
            if (socket !== null) {/* istanbul ignore next */++cov_lbdok5nwb.b[1][0];++cov_lbdok5nwb.s[17];
              socket.close();
            } else /* istanbul ignore next */{++cov_lbdok5nwb.b[1][1];}
            //Send an action that shows a "connecting..." status for now
            //store.dispatch(actions.connecting());

            //Attempt to connect (we could send a 'failed' action on error)
            ++cov_lbdok5nwb.s[18];socket = new WebSocket( /* istanbul ignore next */_configConstants.WS_URL); /* istanbul ignore next */++cov_lbdok5nwb.s[19];
            socket.onmessage = onMessage(socket, store); /* istanbul ignore next */++cov_lbdok5nwb.s[20];
            socket.onclose = onClose(socket, store); /* istanbul ignore next */++cov_lbdok5nwb.s[21];
            socket.onopen = onOpen(socket, store, action.token); /* istanbul ignore next */++cov_lbdok5nwb.s[22];

            break;

          //The user wants us to disconnect
          case /* istanbul ignore next */_frontEndConstants.WS_DISCONNECT: /* istanbul ignore next */++cov_lbdok5nwb.b[0][1];++cov_lbdok5nwb.s[23];
            if (socket !== null) {/* istanbul ignore next */++cov_lbdok5nwb.b[2][0];++cov_lbdok5nwb.s[24];
              socket.close();
            } else /* istanbul ignore next */{++cov_lbdok5nwb.b[2][1];}++cov_lbdok5nwb.s[25];
            socket = null;

            //Set our state to disconnected
            /* istanbul ignore next */++cov_lbdok5nwb.s[26];
            break;

          //Send the 'SEND_MESSAGE' action down the websocket to the server
          case /* istanbul ignore next */_frontEndConstants.WS_ONSEND: /* istanbul ignore next */++cov_lbdok5nwb.b[0][2];++cov_lbdok5nwb.s[27];
            socket.send(JSON.stringify(action.data)); /* istanbul ignore next */++cov_lbdok5nwb.s[28];
            break;

          //This action is irrelevant to us, pass it on to the next middleware
          default: /* istanbul ignore next */++cov_lbdok5nwb.b[0][3];++cov_lbdok5nwb.s[29];
            return next(action);}

      };};};

}()); /* istanbul ignore next */exports.default =

socketMiddleware;