/* istanbul ignore next */'use strict';Object.defineProperty(exports, "__esModule", { value: true });var _jsxFileName = '/Users/raja.d/GOR/gor.butler.ui.managerdashboard/src/components/graphd3/histogram.js';var /* istanbul ignore next */_react = require('react'); /* istanbul ignore next */var _react2 = _interopRequireDefault(_react);
var /* istanbul ignore next */_reactD3Library = require('react-d3-library'); /* istanbul ignore next */var _reactD3Library2 = _interopRequireDefault(_reactD3Library);
var /* istanbul ignore next */_d = require('d3'); /* istanbul ignore next */var d3 = _interopRequireWildcard(_d); /* istanbul ignore next */function _interopRequireWildcard(obj) {if (obj && obj.__esModule) {return obj;} else {var newObj = {};if (obj != null) {for (var key in obj) {if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];}}newObj.default = obj;return newObj;}}function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}


const RD3Component = /* istanbul ignore next */_reactD3Library2.default.Component;

class Histogram extends /* istanbul ignore next */_react2.default.Component {
  constructor(props)
  {
    super(props);
    this.state = { d3: '' };
  }



  componentDidMount() {

    this._processData(JSON.parse(JSON.stringify(this.props.histogramData)), this.props.config);
  }
  componentWillReceiveProps(nextProps) {
    var config = {};
    config.noData = nextProps.noData;
    config.noDataText = nextProps.noDataText;
    this._processData(JSON.parse(JSON.stringify(nextProps.histogramData)), nextProps.config);
  }

  shouldComponentUpdate(nextProps, nextState) {
    if (this.props.hasDataChanged === nextProps.hasDataChanged || !nextProps.histogramData.length) {
      return false;
    }
    return true;

  }



  _processData(data, config) {

    var node = document.createElement('div');
    if (data.length > 1) {
      var _this = this;

      var svg = d3.select(node).append("svg"),
      margin = config.margin,
      width = config.width - margin.left - margin.right,
      height = config.height - margin.top - margin.bottom;
      svg.attr("width", width + margin.left + margin.right).
      attr("height", height + margin.top + margin.bottom);

      //Hack to allow duplicate x Axis values
      var adjustTicks = function adjustTicks() {
        var xaxisgroup = this.node();
        var ticks = xaxisgroup.children;
        for (var i = 0; i < ticks.length; i++) {
          if (ticks[i].localName === 'path') {continue;}

          var tick_text = d3.select(ticks[i].children[1]);
          tick_text.text(tick_text.text().split("_")[1]);

        };
      };

      var x = d3.scale.ordinal().rangeRoundBands([0, width], config.bandPadding);

      var y = d3.scale.linear().range([height, 0]);
      var xAxis = d3.svg.axis().
      scale(x).
      orient("bottom").outerTickSize(config.outerTickSize);

      var yAxis = d3.svg.axis().
      scale(y).
      orient("left").
      ticks(config.ticks).outerTickSize(config.outerTickSize);

      var g = svg.append("g").
      attr("transform", "translate(" + margin.left + "," + margin.top + ")");



      x.domain(data.map(function (d) {return d.xAxisData;}));
      if (config.noData && config.noData === true) {
        y.domain([0, d3.max(data, function (d) {return config.defaultMaxYAxis;})]);
      } else
      {
        y.domain([0, d3.max(data, function (d) {return d.yAxisData + (1000 - d.yAxisData % 1000);})]);
      }

      //Adding grid lines
      g.attr("class", "grid").
      call(d3.svg.axis().
      scale(y).
      orient("left").
      ticks(config.ticks).
      tickSize(-width).
      tickFormat(""));

      //Adding x axis
      g.append("g").
      attr("class", "x axis axis--x").
      attr("transform", "translate(0," + height + ")").
      call(xAxis).call(adjustTicks);


      //Adding y axis
      g.append("g").
      attr("class", "axis axis--y").
      call(yAxis);


      g.selectAll(".bar").
      data(data).
      enter().append("rect").
      attr("class", "bar").
      attr("rx", "2").
      attr("ry", "2").
      attr("x", function (d) {return x(d.xAxisData);}).
      attr("y", function (d) {return y(d.yAxisData);}).
      attr("width", Math.min(x.rangeBand() - 2, 100)).
      attr("height", function (d) {return height - y(d.yAxisData);}).
      on("click", function (e) {
        d3.select(".bar.sel").classed("sel", false);
        d3.select(this).classed("sel", true);
        _this.props.onClickCallBack(e);
        event.stopImmediatePropagation();
      });
      g.select("rect:last-child").classed("sel", true);
      if (config.noData && config.noData === true) {
        svg.insert("text", ":first-child").attr("x", width / 2).attr("y", height / 2).text(config.noDataText || "");
      }
      if (config.showMonthBreak && data.length) {
        var mBreak = g.selectAll("g.axis--x");
        var dLength = data.length;
        var lastXAxisValue = parseInt(data[dLength - 1].xAxisData.split("_")[1], 10);
        var monthBreak = mBreak.select("g:nth-child(" + (dLength - lastXAxisValue) + ")");
        let yToday = "3.5em";
        mBreak.select("g:nth-child(" + dLength + ")").append("text").attr("x", "-20").attr("y", yToday).text(config.today);

      }
      monthBreak.append("line").attr("class", "month-break").attr("x1", "15").attr("x2", "15").attr("y1", "0").attr("y2", "25");
      monthBreak.append("text").attr("x", "20").attr("y", "30").text(config.breakMonth);

    }



    this.setState({ d3: node });
  }


  render() {

    var renderHtml = /* istanbul ignore next */_react2.default.createElement(RD3Component, /* istanbul ignore next */{ data: this.state.d3, __source: { fileName: _jsxFileName, lineNumber: 153 }, __self: this });
    return (
      /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'inventoryHist', __source: { fileName: _jsxFileName, lineNumber: 155 }, __self: this },
        renderHtml));


  }}
;

Histogram.propTypes = {
  histogramData: /* istanbul ignore next */_react2.default.PropTypes.array,
  config: /* istanbul ignore next */_react2.default.PropTypes.object,
  onClickCallBack: /* istanbul ignore next */_react2.default.PropTypes.func,
  noDataText: /* istanbul ignore next */_react2.default.PropTypes.string,
  noData: /* istanbul ignore next */_react2.default.PropTypes.bool,
  hasDataChanged: /* istanbul ignore next */_react2.default.PropTypes.bool }; /* istanbul ignore next */exports.default =





Histogram;