/* istanbul ignore next */'use strict';Object.defineProperty(exports, "__esModule", { value: true });var _jsxFileName = '/Users/raja.d/GOR/gor.butler.ui.managerdashboard/src/containers/auditStatusWidget.js';var /* istanbul ignore next */_react = require('react'); /* istanbul ignore next */var _react2 = _interopRequireDefault(_react);
var /* istanbul ignore next */_Tilex = require('../components/tile1x/Tilex'); /* istanbul ignore next */var _Tilex2 = _interopRequireDefault(_Tilex);
var /* istanbul ignore next */_reactRedux = require('react-redux');
var /* istanbul ignore next */_reactIntl = require('react-intl');
var /* istanbul ignore next */_frontEndConstants = require('../constants/frontEndConstants'); /* istanbul ignore next */function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}

class AuditStatusWidget extends /* istanbul ignore next */_react2.default.Component {
  /**
                                                                                      * Called once before rendering of component,used to displatch fetch action
                                                                                      * @return {[type]}
                                                                                      */
  constructor(props)
  {
    super(props);
  }

  /**
     * [format display data coming from server/mock]
     * @return {[type]} [description]
     */
  formatContainerData() {
    var lowStr,valueLeftStatus = '',
    auditData = Object.assign({}, this.props.auditData),
    totalAudit = this.props.ppsData ? this.props.ppsData.totalAudit : 0,
    auditThroughput = this.props.throughputData ? this.props.throughputData.audit_throughput : 0,
    value = auditData.total_audited ? auditData.total_audited : 0,
    pluralMsg;
    totalAudit = /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_reactIntl.FormattedNumber, /* istanbul ignore next */{ value: totalAudit, __source: { fileName: _jsxFileName, lineNumber: 28 }, __self: this });
    //Setting display values based on server values/mock
    if (!value) {
      value = /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_reactIntl.FormattedMessage, /* istanbul ignore next */{ id: 'widget.audit.heading.value', description: 'Total Items Audited',
        defaultMessage: 'None', __source: { fileName: _jsxFileName, lineNumber: 31 }, __self: this });
      valueLeftStatus = /* istanbul ignore next */_frontEndConstants.GOR_NONE;
      lowStr = /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_reactIntl.FormattedMessage, /* istanbul ignore next */{ id: 'widget.audit.status.idle', description: 'Audit PPS idle message',
        defaultMessage: '{count} idle PPS (Audit mode)',
        values: {
          count: totalAudit }, __source: { fileName: _jsxFileName, lineNumber: 34 }, __self: this });

    } else
    {
      value = /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_reactIntl.FormattedNumber, /* istanbul ignore next */{ value: value, __source: { fileName: _jsxFileName, lineNumber: 41 }, __self: this });
      auditThroughput = /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_reactIntl.FormattedNumber, /* istanbul ignore next */{ value: auditThroughput, __source: { fileName: _jsxFileName, lineNumber: 42 }, __self: this });
      lowStr = /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_reactIntl.FormattedMessage, /* istanbul ignore next */{ id: 'widget.audit.throughput', description: 'Throughput message',
        defaultMessage: '{pps_count} PPS auditing {throughput} items/hr',
        values: {
          pps_count: totalAudit,
          throughput: auditThroughput }, __source: { fileName: _jsxFileName, lineNumber: 43 }, __self: this });

    }
    if (!this.props.system_status)
    {
      lowStr = /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_reactIntl.FormattedMessage, /* istanbul ignore next */{ id: 'widget.audit.offline', description: 'Message for system offline',
        defaultMessage: 'Offline', __source: { fileName: _jsxFileName, lineNumber: 52 }, __self: this });
    }
    if (this.props.systemEmergency) {
      lowStr = /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_reactIntl.FormattedMessage, /* istanbul ignore next */{ id: 'widget.audit.emergency', description: 'Message for system in emergency state',
        defaultMessage: '--', __source: { fileName: _jsxFileName, lineNumber: 56 }, __self: this });
    }

    auditData.heading = /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_reactIntl.FormattedMessage, /* istanbul ignore next */{ id: 'widget.audit.heading', description: 'Audit Item Heading',
      defaultMessage: 'Items audited', __source: { fileName: _jsxFileName, lineNumber: 60 }, __self: this });
    auditData.value = value;
    auditData.low = lowStr;
    auditData.logo = /* istanbul ignore next */_frontEndConstants.AUDIT_ICON;
    auditData.valueLeftStatus = valueLeftStatus;
    return auditData;


  }

  render()
  {
    var auditData = this.formatContainerData();
    return (
      /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_Tilex2.default, /* istanbul ignore next */{ items: auditData, __source: { fileName: _jsxFileName, lineNumber: 75 }, __self: this }));

  }}




function mapStateToProps(state, ownProps) {
  return {
    auditData: state.auditInfo.auditData,
    ppsData: state.ppsInfo.ppsData,
    throughputData: state.throughputInfo.throughputData,
    system_status: state.tabsData.status || null,
    systemEmergency: state.tabsData.system_emergency || null };

} /* istanbul ignore next */exports.default =

/* istanbul ignore next */(0, _reactRedux.connect)(mapStateToProps)(AuditStatusWidget);