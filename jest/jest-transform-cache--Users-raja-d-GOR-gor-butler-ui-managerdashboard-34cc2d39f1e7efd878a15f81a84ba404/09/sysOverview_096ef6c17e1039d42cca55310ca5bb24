/* istanbul ignore next */'use strict';Object.defineProperty(exports, "__esModule", { value: true });exports.SystemOverview = undefined;var _jsxFileName = '/Users/raja.d/GOR/gor.butler.ui.managerdashboard/src/containers/systemTabs/sysOverview.js'; /**
                                                                                                                                                                                                                                                         * Container for Overview tab
                                                                                                                                                                                                                                                         * This will be switched based on tab click
                                                                                                                                                                                                                                                         */
var /* istanbul ignore next */_react = require('react'); /* istanbul ignore next */var _react2 = _interopRequireDefault(_react);
var /* istanbul ignore next */_reactRedux = require('react-redux');
var /* istanbul ignore next */_zoneTile = require('../../components/systemOverview/zoneTile.js'); /* istanbul ignore next */var _zoneTile2 = _interopRequireDefault(_zoneTile);
var /* istanbul ignore next */_socketActions = require('./../../actions/socketActions');
var /* istanbul ignore next */_frontEndConstants = require('../../constants/frontEndConstants');
var /* istanbul ignore next */_messageConstants = require('../../constants/messageConstants');

var /* istanbul ignore next */_initData = require('../../constants/initData');
var /* istanbul ignore next */_reactIntl = require('react-intl');
var /* istanbul ignore next */_reactRouter = require('react-router'); /* istanbul ignore next */function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}


class SystemOverview extends /* istanbul ignore next */_react2.default.Component {
    constructor(props) {
        super(props);
        this.state = {
            subscribed: false };

        this._onZoneClick = this._onZoneClick.bind(this);
    }
    componentWillReceiveProps(nextProps) {
        if (nextProps.socketAuthorized && !this.state.subscribed) {
            this.setState({
                subscribed: true },
            function () {
                this.props.initDataSentCall( /* istanbul ignore next */_initData.wsOverviewData["zoning"]);
            });
        }
    }
    componentWillMount() {
        if (this.props.socketAuthorized && !this.state.subscribed) {
            this.setState({
                subscribed: true },
            function () {
                this.props.initDataSentCall( /* istanbul ignore next */_initData.wsOverviewData["zoning"]);
            });
        }
    }


    shouldComponentUpdate(nextProps) {
        return nextProps.hasDataChanged !== this.props.hasDataChanged ||
        this.props.zoneHeader.active_zones !== nextProps.zoneHeader.active_zones;
    }
    _onZoneClick(id, status) {
        this.props.router.push({ pathname: "/system/sysControllers", query: { zone_id: id, status: status } });
    }


    render() {
        var _this = this;
        var zones = this.props.zones ? this.props.zones["zones_data"] : {};
        var emergencyData = this.props.zones ? this.props.zones.emergency_data : {};
        return (
            /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'gor-zone-wrapper', __source: { fileName: _jsxFileName, lineNumber: 59 }, __self: this },
                /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'gor-zone-header', __source: { fileName: _jsxFileName, lineNumber: 60 }, __self: this },
                    /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_reactIntl.FormattedMessage, /* istanbul ignore next */{ id: 'sysOverView.zones.count', description: 'Zone status count ',
                        defaultMessage: '{activeZones}/{totalZones} Operating Zones',
                        values: {
                            activeZones: this.props.zoneHeader.active_zones === 0 ? this.props.zoneHeader.active_zones.toString() : this.props.zoneHeader.active_zones,
                            totalZones: this.props.zoneHeader.total_zones === 0 ? this.props.zoneHeader.total_zones.toString() : this.props.zoneHeader.total_zones }, __source: { fileName: _jsxFileName, lineNumber: 61 }, __self: this })),


                /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'gor-zt-wrap', __source: { fileName: _jsxFileName, lineNumber: 68 }, __self: this },
                    Object.keys(zones).map((key, idx) => {
                        let statusText,zoneStatusText,
                        zoneStatus = zones[key]["zone_status"],
                        sensorActivated = zones[key]["sensor_activated"];
                        if (emergencyData.emergency_on && emergencyData.emergency_type === "stop") {
                            if (zones[key]["zone_status"] === "emergency_stop") {
                                statusText = /* istanbul ignore next */_messageConstants.ZONE_STATUS_INTL_MESSAGE[zoneStatus];
                            } else
                            {
                                statusText = /* istanbul ignore next */_messageConstants.ZONE_STATUS_INTL_MESSAGE["stopped"];
                            }
                        } else
                        if (emergencyData.emergency_on && emergencyData.emergency_type === "pause") {
                            if (zones[key]["zone_status"] === "emergency_pause") {
                                statusText = /* istanbul ignore next */_messageConstants.ZONE_STATUS_INTL_MESSAGE[zoneStatus];
                            } else
                            {
                                statusText = /* istanbul ignore next */_messageConstants.ZONE_STATUS_INTL_MESSAGE["paused"];
                            }
                        } else
                        {
                            statusText = /* istanbul ignore next */_messageConstants.ZONE_STATUS_INTL_MESSAGE[zoneStatus];
                        }
                        if (zoneStatus !== "zone_pause" && (sensorActivated === "light_curtain" || sensorActivated === "latch_gate")) {
                            zoneStatusText = /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_reactIntl.FormattedMessage, /* istanbul ignore next */{ id: 'sysOverView.zones.breached.subText', description: 'Zone status subtext ',
                                defaultMessage: '{entityBreached} breached',
                                values: {
                                    entityBreached: /* istanbul ignore next */_messageConstants.ENTITY_BREACHED[sensorActivated] }, __source: { fileName: _jsxFileName, lineNumber: 93 }, __self: this });

                        } else
                        if (zoneStatus !== "operation_normal" && sensorActivated === "button") {
                            zoneStatusText = /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_reactIntl.FormattedMessage, /* istanbul ignore next */{ id: 'sysOverView.zones.subText', description: 'Zone status subtext ',
                                defaultMessage: '{subStatus} via Controller',
                                values: {
                                    subStatus: /* istanbul ignore next */_messageConstants.ZONE_SUB_STATUS_INTL_MESSAGE[zoneStatus] || zoneStatus }, __source: { fileName: _jsxFileName, lineNumber: 100 }, __self: this });


                        }

                        return (/* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_zoneTile2.default, /* istanbul ignore next */{
                                name: key,
                                id: key,
                                key: idx,
                                emergencyStatus: emergencyData.emergency_on,
                                emergencyType: emergencyData.emergency_type,
                                statusText: statusText,
                                zoneStatusText: zoneStatusText,
                                status: zones[key]["zone_status"],
                                statusClass: /* istanbul ignore next */_frontEndConstants.ZONE_STATUS_CLASS[zones[key]["zone_status"]],
                                onZoneClick: _this._onZoneClick, __source: { fileName: _jsxFileName, lineNumber: 108 }, __self: this }));
                    }))));





    }} /* istanbul ignore next */exports.SystemOverview = SystemOverview;

function mapStateToProps(state, ownProps) {
    return {
        socketAuthorized: state.recieveSocketActions.socketAuthorized,
        hasDataChanged: state.sysOverviewReducer.hasDataChanged,
        zones: state.sysOverviewReducer.zones,
        zoneHeader: state.zoningReducer.zoneHeader || {},
        zoneSubscriptionInitiated: state.sysOverviewReducer.zoneSubscriptionInitiated };

}

function mapDispatchToProps(dispatch) {
    return {
        initDataSentCall: function /* istanbul ignore next */initDataSentCall(data) {dispatch( /* istanbul ignore next */(0, _socketActions.setWsAction)({ type: /* istanbul ignore next */_frontEndConstants.WS_ONSEND, data: data }));} };

};




SystemOverview.PropTypes = {
    ppsFilter: /* istanbul ignore next */_react2.default.PropTypes.string }; /* istanbul ignore next */exports.default =



/* istanbul ignore next */(0, _reactRedux.connect)(mapStateToProps, mapDispatchToProps)( /* istanbul ignore next */(0, _reactRouter.withRouter)(SystemOverview));