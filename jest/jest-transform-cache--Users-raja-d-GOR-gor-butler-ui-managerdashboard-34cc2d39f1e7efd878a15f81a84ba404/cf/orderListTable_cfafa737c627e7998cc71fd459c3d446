/* istanbul ignore next */'use strict';Object.defineProperty(exports, "__esModule", { value: true });var _jsxFileName = '/Users/raja.d/GOR/gor.butler.ui.managerdashboard/src/containers/orderTab/orderListTable.js';var /* istanbul ignore next */_react = require('react'); /* istanbul ignore next */var _react2 = _interopRequireDefault(_react);
var /* istanbul ignore next */_fixedDataTable = require('fixed-data-table');
var /* istanbul ignore next */_reactDimensions = require('react-dimensions'); /* istanbul ignore next */var _reactDimensions2 = _interopRequireDefault(_reactDimensions);
var /* istanbul ignore next */_reactIntl = require('react-intl');
var /* istanbul ignore next */_commonFunctionsDataTable = require('../../components/commonFunctionsDataTable');





var /* istanbul ignore next */_frontEndConstants = require('../../constants/frontEndConstants');



var /* istanbul ignore next */_debounce = require('../../utilities/debounce'); /* istanbul ignore next */function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}

const messages = /* istanbul ignore next */(0, _reactIntl.defineMessages)({
    filterPlaceholder: {
        id: 'table.filter.placeholder',
        description: 'placeholder for table filter',
        defaultMessage: 'Filter by keywords' } });




class OrderListTable extends /* istanbul ignore next */_react2.default.Component {


    constructor(props) {
        super(props);
        if (this.props.items === undefined) {
            this._dataList = new /* istanbul ignore next */_commonFunctionsDataTable.tableRenderer(0);
        } else
        {
            this._dataList = new /* istanbul ignore next */_commonFunctionsDataTable.tableRenderer(this.props.items.length);
        }
        this._defaultSortIndexes = [];
        this._dataList.newData = this.props.items;
        var size = this._dataList.getSize();
        for (var index = 0; index < size; index++) {
            this._defaultSortIndexes.push(index);
        }
        var columnWidth = this.props.containerWidth / this.props.itemNumber;
        this.state = {
            sortedDataList: this._dataList,
            colSortDirs: { status: "DESC" },
            columnWidths: {
                id: columnWidth,
                status: columnWidth,
                recievedTime: columnWidth,
                completedTime: columnWidth,
                pickBy: columnWidth,
                orderLine: columnWidth } };


        this._onFilterChange = this._onFilterChange.bind(this);
        this._onColumnResizeEndCallback = this._onColumnResizeEndCallback.bind(this);
        this.backendSort = this.backendSort.bind(this);
    }

    componentWillReceiveProps(nextProps) {
        if (nextProps.items === undefined) {
            this._dataList = new /* istanbul ignore next */_commonFunctionsDataTable.tableRenderer(0);
        } else
        {
            this._dataList = new /* istanbul ignore next */_commonFunctionsDataTable.tableRenderer(nextProps.items.length);
        }

        this._defaultSortIndexes = [];
        this._dataList.newData = nextProps.items;
        var size = this._dataList.getSize();
        for (var index = 0; index < size; index++) {
            this._defaultSortIndexes.push(index);
        }
        var columnWidth = nextProps.containerWidth / nextProps.itemNumber,sortIndex = { status: "DESC" };
        if (this.props.currentHeaderOrder.colSortDirs) {
            sortIndex = this.props.currentHeaderOrder.colSortDirs;
        }
        this.state = {
            sortedDataList: this._dataList,
            colSortDirs: sortIndex,
            columnWidths: {
                id: columnWidth,
                status: columnWidth,
                recievedTime: columnWidth,
                completedTime: columnWidth,
                pickBy: columnWidth,
                orderLine: columnWidth } };


        this._onFilterChange = this._onFilterChange.bind(this);
        this._onColumnResizeEndCallback = this._onColumnResizeEndCallback.bind(this);
        this.backendSort = this.backendSort.bind(this);
    }


    shouldComponentUpdate(nextProps) {
        if (this.props.items && nextProps.items.length === 0) {
            return false;
        }
        return true;
    }


    _onColumnResizeEndCallback(newColumnWidth, columnKey) {
        this.setState(({ columnWidths }) => ({
            columnWidths: /* istanbul ignore next */Object.assign({},
            columnWidths, {
                [columnKey]: newColumnWidth }) }));


    }

    _onFilterChange(e) {
        var data = { "type": "searchOrder", "captureValue": "", "selected": 1 },debounceFilter;
        if (e.target && (e.target.value || e.target.value === "")) {
            data["captureValue"] = e.target.value;
            this.props.setOrderFilter(e.target.value);
        } else
        {
            data["captureValue"] = e;
        }
        debounceFilter = /* istanbul ignore next */(0, _debounce.debounce)(this.props.refreshOption, /* istanbul ignore next */_frontEndConstants.DEBOUNCE_TIMER);
        debounceFilter(data);
    }


    backendSort(columnKey, sortDir) {
        var data = { "columnKey": columnKey, "sortDir": sortDir, selected: this.props.pageNumber };
        this.props.sortHeaderState(columnKey);
        this.props.onSortChange(data);
        this.props.sortHeaderOrder({
            colSortDirs: { [columnKey]: sortDir } });

    }



    _showAllOrder() {
        this.props.refreshOption();
    }

    render() {/* istanbul ignore next */var _state =
        this.state,sortedDataList = _state.sortedDataList,colSortDirs = _state.colSortDirs,columnWidths = _state.columnWidths;
        var totalOrder = this.props.totalOrders,headerAlert = /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ __source: { fileName: _jsxFileName, lineNumber: 145 }, __self: this }),heightRes;
        let allDrop = /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_reactIntl.FormattedMessage, /* istanbul ignore next */{ id: 'orderlist.table.allDrop',
            description: 'allOrders dropdown option for orderlist',
            defaultMessage: 'All orders', __source: { fileName: _jsxFileName, lineNumber: 146 }, __self: this });
        let breachedDrop = /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_reactIntl.FormattedMessage, /* istanbul ignore next */{ id: 'orderlist.table.breachedDrop',
            description: 'breached dropdown option for orderlist',
            defaultMessage: 'Breached orders', __source: { fileName: _jsxFileName, lineNumber: 149 }, __self: this });
        let pendingDrop = /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_reactIntl.FormattedMessage, /* istanbul ignore next */{ id: 'pendingDrop.table.allDrop',
            description: 'pending dropdown option for orderlist',
            defaultMessage: 'Pending orders', __source: { fileName: _jsxFileName, lineNumber: 152 }, __self: this });
        let completedDrop = /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_reactIntl.FormattedMessage, /* istanbul ignore next */{ id: 'completedDrop.table.allDrop',
            description: 'completed dropdown option for orderlist',
            defaultMessage: 'Completed orders', __source: { fileName: _jsxFileName, lineNumber: 155 }, __self: this });
        let exception = /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_reactIntl.FormattedMessage, /* istanbul ignore next */{ id: 'exceptionDrop.table', description: 'exception order dropdown for orderlist',
            defaultMessage: 'Exception', __source: { fileName: _jsxFileName, lineNumber: 158 }, __self: this });

        let allTimeDrop = /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_reactIntl.FormattedMessage, /* istanbul ignore next */{ id: 'orderlist.table.allTimeDrop',
            description: 'allTime dropdown option for orderlist', defaultMessage: 'All', __source: { fileName: _jsxFileName, lineNumber: 161 }, __self: this });
        let oneHrDrop = /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_reactIntl.FormattedMessage, /* istanbul ignore next */{ id: 'orderlist.table.oneHrDrop',
            description: 'oneHr dropdown option for orderlist',
            defaultMessage: 'Last 1 hours', __source: { fileName: _jsxFileName, lineNumber: 163 }, __self: this });
        let twoHrDrop = /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_reactIntl.FormattedMessage, /* istanbul ignore next */{ id: 'pendingDrop.table.twoHrDrop',
            description: 'twoHr dropdown option for orderlist',
            defaultMessage: 'Last 2 hours', __source: { fileName: _jsxFileName, lineNumber: 166 }, __self: this });
        let sixHrDrop = /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_reactIntl.FormattedMessage, /* istanbul ignore next */{ id: 'completedDrop.table.sixHrDrop',
            description: 'sixHr dropdown option for orderlist',
            defaultMessage: 'Last 6 hours', __source: { fileName: _jsxFileName, lineNumber: 169 }, __self: this });
        let twelveHrDrop = /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_reactIntl.FormattedMessage, /* istanbul ignore next */{ id: 'pendingDrop.table.twelveHrDrop',
            description: 'twelveHr dropdown option for orderlist',
            defaultMessage: 'Last 12 hours', __source: { fileName: _jsxFileName, lineNumber: 172 }, __self: this });
        let oneDayDrop = /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_reactIntl.FormattedMessage, /* istanbul ignore next */{ id: 'completedDrop.table.oneDayDrop',
            description: 'oneDay dropdown option for orderlist',
            defaultMessage: 'Last 1 day', __source: { fileName: _jsxFileName, lineNumber: 175 }, __self: this });
        if (this.props.alertNum !== 0) {

            headerAlert = /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'gorToolHeaderEl alertState', __source: { fileName: _jsxFileName, lineNumber: 180 }, __self: this },
                /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'table-subtab-alert-icon', __source: { fileName: _jsxFileName, lineNumber: 181 }, __self: this }),
                /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'gor-inline', __source: { fileName: _jsxFileName, lineNumber: 182 }, __self: this }, this.props.alertNum, /* istanbul ignore next */' Alerts'));

        }

        if (this.props.containerHeight !== 0) {
            heightRes = this.props.containerHeight;
        }
        var noData = /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ __source: { fileName: _jsxFileName, lineNumber: 189 }, __self: this });
        if (totalOrder === 0 || totalOrder === undefined || totalOrder === null) {
            noData = /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'gor-no-data', __source: { fileName: _jsxFileName, lineNumber: 191 }, __self: this }, /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_reactIntl.FormattedMessage, /* istanbul ignore next */{ id: 'orderlist.table.noData',
                    description: 'No data message for orderlist table',
                    defaultMessage: 'No Orders Found', __source: { fileName: _jsxFileName, lineNumber: 191 }, __self: this }));
            heightRes = /* istanbul ignore next */_frontEndConstants.GOR_TABLE_HEADER_HEIGHT;
        }

        return (
            /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'gorTableMainContainer', __source: { fileName: _jsxFileName, lineNumber: 198 }, __self: this },
                /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_fixedDataTable.Table, /* istanbul ignore next */Object.assign({
                        rowHeight: 50,
                        rowsCount: sortedDataList.getSize(),
                        headerHeight: 70,
                        onColumnResizeEndCallback: this._onColumnResizeEndCallback,
                        isColumnResizing: false,
                        width: this.props.containerWidth,
                        height: heightRes * 0.9 },
                    this.props, { __source: { fileName: _jsxFileName, lineNumber: 199 }, __self: this }),
                    /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_fixedDataTable.Column, /* istanbul ignore next */{
                        columnKey: 'id',
                        header:
                        /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_commonFunctionsDataTable.SortHeaderCell, /* istanbul ignore next */{ onSortChange: this.backendSort,
                                sortDir: colSortDirs.id, __source: { fileName: _jsxFileName, lineNumber: 211 }, __self: this },
                            /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'gorToolHeaderEl', __source: { fileName: _jsxFileName, lineNumber: 213 }, __self: this },
                                /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'gorToolHeaderEl', __source: { fileName: _jsxFileName, lineNumber: 214 }, __self: this },
                                    /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_reactIntl.FormattedMessage, /* istanbul ignore next */{ id: 'orderlist.order.headingText',
                                        description: 'Heading for order IDs in ordertable',
                                        defaultMessage: 'ORDER ID', __source: { fileName: _jsxFileName, lineNumber: 215 }, __self: this })),

                                /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'gorToolHeaderSubText', __source: { fileName: _jsxFileName, lineNumber: 219 }, __self: this },
                                    /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_reactIntl.FormattedMessage, /* istanbul ignore next */{ id: 'orderlist.subTotalorder',
                                        description: 'subtotal order for ordertable',
                                        defaultMessage: 'Total:{totalOrder}',
                                        values: { totalOrder: totalOrder ? totalOrder : '0' }, __source: { fileName: _jsxFileName, lineNumber: 220 }, __self: this })))),





                        cell: /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_commonFunctionsDataTable.TextCell, /* istanbul ignore next */{ data: sortedDataList, __source: { fileName: _jsxFileName, lineNumber: 229 }, __self: this }),
                        fixed: true,
                        width: columnWidths.id,
                        isResizable: true, __source: { fileName: _jsxFileName, lineNumber: 208 }, __self: this }),

                    /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_fixedDataTable.Column, /* istanbul ignore next */{
                        columnKey: 'status',
                        header:
                        /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_commonFunctionsDataTable.SortHeaderCell, /* istanbul ignore next */{ onSortChange: this.backendSort, sortDir: colSortDirs.status, __source: { fileName: _jsxFileName, lineNumber: 237 }, __self: this },
                            /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'gorToolHeaderEl', __source: { fileName: _jsxFileName, lineNumber: 238 }, __self: this },
                                /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ __source: { fileName: _jsxFileName, lineNumber: 239 }, __self: this },
                                    /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_reactIntl.FormattedMessage, /* istanbul ignore next */{ id: 'orderList.table.status', description: 'Status for orders',
                                        defaultMessage: 'STATUS', __source: { fileName: _jsxFileName, lineNumber: 240 }, __self: this })),

                                /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ __source: { fileName: _jsxFileName, lineNumber: 243 }, __self: this },
                                    /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'statuslogoWrap', __source: { fileName: _jsxFileName, lineNumber: 244 }, __self: this },
                                        headerAlert)))),





                        cell: /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_commonFunctionsDataTable.StatusCell, /* istanbul ignore next */{ data: sortedDataList, statusKey: 'statusClass', __source: { fileName: _jsxFileName, lineNumber: 251 }, __self: this }),
                        fixed: true,
                        width: columnWidths.status,
                        isResizable: true, __source: { fileName: _jsxFileName, lineNumber: 234 }, __self: this }),

                    /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_fixedDataTable.Column, /* istanbul ignore next */{
                        columnKey: 'pickBy',
                        header:
                        /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_commonFunctionsDataTable.SortHeaderCell, /* istanbul ignore next */{ onSortChange: this.backendSort,
                                sortDir: colSortDirs.pickBy, __source: { fileName: _jsxFileName, lineNumber: 259 }, __self: this },
                            /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'gorToolHeaderEl', __source: { fileName: _jsxFileName, lineNumber: 261 }, __self: this },
                                /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_reactIntl.FormattedMessage, /* istanbul ignore next */{ id: 'orderlist.table.pickBy', description: 'pick by for orderlist',
                                    defaultMessage: 'PICK BY', __source: { fileName: _jsxFileName, lineNumber: 262 }, __self: this }),
                                /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'gorToolHeaderSubText', __source: { fileName: _jsxFileName, lineNumber: 264 }, __self: this },
                                    /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_reactIntl.FormattedMessage, /* istanbul ignore next */{ id: 'orderlist.pendingOrders',
                                        description: 'pendingOrders header ordertable',
                                        defaultMessage: '{pendingOrders, number} {pendingOrders, plural, one {order} other {orders}} pending',
                                        values: { pendingOrders: this.props.totalPendingOrder ? this.props.totalPendingOrder : '0' }, __source: { fileName: _jsxFileName, lineNumber: 265 }, __self: this })))),






                        cell: /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_commonFunctionsDataTable.TextCell, /* istanbul ignore next */{ style: { textTransform: 'capitalize' }, data: sortedDataList, __source: { fileName: _jsxFileName, lineNumber: 275 }, __self: this }),
                        fixed: true,
                        width: columnWidths.pickBy,
                        isResizable: true, __source: { fileName: _jsxFileName, lineNumber: 256 }, __self: this }),

                    /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_fixedDataTable.Column, /* istanbul ignore next */{
                        columnKey: 'recievedTime',
                        header:
                        /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_commonFunctionsDataTable.SortHeaderCell, /* istanbul ignore next */{ onSortChange: this.backendSort,
                                sortDir: colSortDirs.recievedTime, __source: { fileName: _jsxFileName, lineNumber: 283 }, __self: this },
                            /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'gorToolHeaderEl', __source: { fileName: _jsxFileName, lineNumber: 285 }, __self: this },
                                /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_reactIntl.FormattedMessage, /* istanbul ignore next */{ id: 'orderlist.table.operatingMode',
                                    description: 'recievedTime for Orders',
                                    defaultMessage: 'RECIEVED TIME', __source: { fileName: _jsxFileName, lineNumber: 286 }, __self: this }),
                                /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'gorToolHeaderSubText', __source: { fileName: _jsxFileName, lineNumber: 289 }, __self: this },
                                    this.props.timeZoneString))),




                        cell: /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_commonFunctionsDataTable.TextCell, /* istanbul ignore next */{ style: { textTransform: 'capitalize' }, data: sortedDataList, __source: { fileName: _jsxFileName, lineNumber: 295 }, __self: this }),
                        fixed: true,
                        width: columnWidths.recievedTime,
                        isResizable: true, __source: { fileName: _jsxFileName, lineNumber: 280 }, __self: this }),

                    /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_fixedDataTable.Column, /* istanbul ignore next */{
                        columnKey: 'completedTime',
                        header:
                        /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'gor-table-header', __source: { fileName: _jsxFileName, lineNumber: 303 }, __self: this },
                            /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'gorToolHeaderEl', __source: { fileName: _jsxFileName, lineNumber: 304 }, __self: this },
                                /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_reactIntl.FormattedMessage, /* istanbul ignore next */{ id: 'orderlist.table.completedTime',
                                    description: 'completedTime for orderlist',
                                    defaultMessage: 'COMPLETED', __source: { fileName: _jsxFileName, lineNumber: 305 }, __self: this }),
                                /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'gorToolHeaderSubText', __source: { fileName: _jsxFileName, lineNumber: 308 }, __self: this },
                                    /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_reactIntl.FormattedMessage, /* istanbul ignore next */{ id: 'orderlist.totalCompletedOrder',
                                        description: 'totalCompletedOrder header ordertable',
                                        defaultMessage: '{totalCompletedOrder, number} {totalCompletedOrder, plural, one {order} other {orders}} completed',
                                        values: { totalCompletedOrder: this.props.totalCompletedOrder ? this.props.totalCompletedOrder : '0' }, __source: { fileName: _jsxFileName, lineNumber: 309 }, __self: this })))),




                        cell: /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_commonFunctionsDataTable.TextCell, /* istanbul ignore next */{ style: { textTransform: 'capitalize' }, data: sortedDataList, __source: { fileName: _jsxFileName, lineNumber: 317 }, __self: this }),
                        fixed: true,
                        width: columnWidths.completedTime,
                        isResizable: true, __source: { fileName: _jsxFileName, lineNumber: 300 }, __self: this }),

                    /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_fixedDataTable.Column, /* istanbul ignore next */{
                        columnKey: 'orderLine',
                        header:
                        /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'gor-table-header', __source: { fileName: _jsxFileName, lineNumber: 325 }, __self: this },
                            /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'gorToolHeaderEl', __source: { fileName: _jsxFileName, lineNumber: 326 }, __self: this },
                                /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_reactIntl.FormattedMessage, /* istanbul ignore next */{ id: 'orderlist.table.orderLine',
                                    description: 'orderLine for orderlist',
                                    defaultMessage: 'ORDER LINE', __source: { fileName: _jsxFileName, lineNumber: 327 }, __self: this }),
                                /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'gorToolHeaderSubText', __source: { fileName: _jsxFileName, lineNumber: 330 }, __self: this },
                                    /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_reactIntl.FormattedMessage, /* istanbul ignore next */{ id: 'orderlist.itemsPerOrder',
                                        description: 'itemsPerOrder header ordertable',
                                        defaultMessage: 'Avg {itemsPerOrder, number} {itemsPerOrder, plural, one {item} other {items}}/order',
                                        values: { itemsPerOrder: this.props.itemsPerOrder ? this.props.itemsPerOrder.toFixed(2) : '0' }, __source: { fileName: _jsxFileName, lineNumber: 331 }, __self: this })))),




                        cell: /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_commonFunctionsDataTable.TextCell, /* istanbul ignore next */{ data: sortedDataList, align: 'left', __source: { fileName: _jsxFileName, lineNumber: 339 }, __self: this }),
                        fixed: true,
                        width: columnWidths.orderLine,
                        isResizable: true, __source: { fileName: _jsxFileName, lineNumber: 322 }, __self: this })),


                /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ __source: { fileName: _jsxFileName, lineNumber: 345 }, __self: this }, /* istanbul ignore next */' ', noData, /* istanbul ignore next */' ')));


    }}


OrderListTable.PropTypes = {
    items: /* istanbul ignore next */_react2.default.PropTypes.array,
    containerWidth: /* istanbul ignore next */_react2.default.PropTypes.number,
    itemNumber: /* istanbul ignore next */_react2.default.PropTypes.number,
    currentHeaderOrder: /* istanbul ignore next */_react2.default.PropTypes.object,
    setOrderFilter: /* istanbul ignore next */_react2.default.PropTypes.func,
    sortHeaderState: /* istanbul ignore next */_react2.default.PropTypes.func,
    refreshOption: /* istanbul ignore next */_react2.default.PropTypes.func,
    lastUpdatedText: /* istanbul ignore next */_react2.default.PropTypes.string,
    isFilterApplied: /* istanbul ignore next */_react2.default.PropTypes.bool,
    timeZoneString: /* istanbul ignore next */_react2.default.PropTypes.string,
    lastUpdated: /* istanbul ignore next */_react2.default.PropTypes.string,
    responseFlag: /* istanbul ignore next */_react2.default.PropTypes.bool }; /* istanbul ignore next */exports.default =


/* istanbul ignore next */(0, _reactDimensions2.default)()(OrderListTable);