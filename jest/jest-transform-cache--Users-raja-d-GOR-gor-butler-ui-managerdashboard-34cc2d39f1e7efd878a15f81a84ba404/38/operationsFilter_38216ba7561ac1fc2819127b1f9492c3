/* istanbul ignore next */'use strict';Object.defineProperty(exports, "__esModule", { value: true });var _jsxFileName = '/Users/raja.d/GOR/gor.butler.ui.managerdashboard/src/containers/reportsTab/operationsFilter.js';var /* istanbul ignore next */_react = require('react'); /* istanbul ignore next */var _react2 = _interopRequireDefault(_react);
var /* istanbul ignore next */_reactIntl = require('react-intl');
var /* istanbul ignore next */_filter = require('../../components/tableFilter/filter'); /* istanbul ignore next */var _filter2 = _interopRequireDefault(_filter);
var /* istanbul ignore next */_filterAction = require('../../actions/filterAction');
var /* istanbul ignore next */_operationsLogsActions = require('../../actions/operationsLogsActions');
var /* istanbul ignore next */_reactRedux = require('react-redux');
var /* istanbul ignore next */_filterInputFieldWrap = require('../../components/tableFilter/filterInputFieldWrap'); /* istanbul ignore next */var _filterInputFieldWrap2 = _interopRequireDefault(_filterInputFieldWrap);
var /* istanbul ignore next */_filterTokenContainer = require('../../components/tableFilter/filterTokenContainer'); /* istanbul ignore next */var _filterTokenContainer2 = _interopRequireDefault(_filterTokenContainer);
var /* istanbul ignore next */_tableFilterCommonFunctions = require('../../components/tableFilter/tableFilterCommonFunctions');
var /* istanbul ignore next */_filterParams = require('../../constants/filterParams');
var /* istanbul ignore next */_reactRouter = require('react-router');
var /* istanbul ignore next */_frontEndConstants = require('../../constants/frontEndConstants'); /* istanbul ignore next */function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}




class OperationsFilter extends /* istanbul ignore next */_react2.default.Component {
  constructor(props)
  {
    super(props);
    this.state = {
      tokenSelected: {
        "status": this.props.filters.status ? [this.props.filters.status] : ["any"],
        "timeperiod": this.props.filters.time_period ? [this.props.filters.time_period] : ["1_HOUR"],
        "operatingMode": this.props.filters.operatingMode ? [this.props.filters.operatingMode] : ["any"] },

      searchQuery: {
        "request_id": this.props.filters.request_id ? this.props.filters.request_id : "",
        "sku_id": this.props.filters.sku_id ? this.props.filters.sku_id : "",
        "pps_id": this.props.filters.pps_id ? this.props.filters.pps_id : "",
        "user_id": this.props.filters.user_id ? this.props.filters.user_id : "" },

      defaultToken: {
        "status": ["any"],
        "operatingMode": ["any"],
        "timeperiod": ["1_HOUR"] } };


    this._closeFilter = this._closeFilter.bind(this);
    this._clearFilter = this._clearFilter.bind(this);
    this._applyFilter = this._applyFilter.bind(this);
    this._processSearchField = this._processSearchField.bind(this);
  }


  _closeFilter() {
    this.props.showTableFilter(false);
  }

  _processSearchField(filterInputFields) {
    let inputValue = this.state.searchQuery;
    let inputField = /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_filterInputFieldWrap2.default, /* istanbul ignore next */{ inputText: filterInputFields, handleInputText: this._handleInputQuery.bind(this), inputValue: inputValue, __source: { fileName: _jsxFileName, lineNumber: 52 }, __self: this });
    return inputField;
  }

  componentWillReceiveProps(nextProps) {
    /**
                                         * It will update the state as soon as
                                         * filters are cleared.
                                         */
    /*if(nextProps.filterState && JSON.stringify(this.state)!==JSON.stringify(nextProps.filterState)){
                                                this.setState(nextProps.filterState)
                                            }*/

    /**
                                                 * Hide the filter as soon as data in the list get updated.
                                                 */
    if (nextProps.hideLayer) {
      this.props.showTableFilter(false);
    }
  }

  _processFilterParams() {
    var filterParams = JSON.parse(JSON.stringify( /* istanbul ignore next */_filterParams.REPORTS_FILTER_PARAMS));
    var filterInputFields = [],statusToken = {},statusLabels = [],
    timePeriodToken = {},timePeriodLabels = [],operatingModeToken = {},operatingModeLabels = [];
    for (let i = 0, len = filterParams.length; i < len; i++) {
      let filter = filterParams[i],textInput = {},tokenInput;
      if (filter["type"] === "text") {
        textInput["value"] = filter.name;
        textInput["label"] = filter.labelText;
        filterInputFields.push(textInput);
      } else
      if (filter["type"] === "token") {
        let tokens = filter["tokens"];
        if (filter["name"] === "status") {
          statusToken["value"] = filter["name"];
          statusToken["label"] = filter["labelText"];
        } else
        if (filter["name"] === "timeperiod") {
          timePeriodToken["value"] = filter["name"];
          timePeriodToken["label"] = filter["labelText"];
        } else
        if (filter["name"] === "operatingMode") {
          operatingModeToken["value"] = filter["name"];
          operatingModeToken["label"] = filter["labelText"];
        }
        for (let k in tokens) {
          let token = {};
          token.value = k;
          token.label = tokens[k];
          if (filter["name"] === "status") {
            statusLabels.push(token);
          } else
          if (filter["name"] === "timeperiod") {
            timePeriodLabels.push(token);
          } else
          if (filter["name"] === "operatingMode") {
            operatingModeLabels.push(token);
          }

        }
      }

    }
    return {
      filterInputFields,
      statusLabels,
      statusToken,
      timePeriodLabels,
      timePeriodToken,
      operatingModeToken,
      operatingModeLabels };

  }

  _processFilterToken(filterParams) {
    let selectedToken = this.state.tokenSelected;
    let statusColumn = /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_filterTokenContainer2.default, /* istanbul ignore next */{ field: filterParams.statusToken, tokenCallBack: this._handelTokenClick.bind(this), label: filterParams.statusLabels, selectedToken: selectedToken, __source: { fileName: _jsxFileName, lineNumber: 129 }, __self: this });
    let timePeriodColumn = /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_filterTokenContainer2.default, /* istanbul ignore next */{ selection: /* istanbul ignore next */_frontEndConstants.SINGLE, field: filterParams.timePeriodToken, tokenCallBack: this._handelTokenClick.bind(this), label: filterParams.timePeriodLabels, selectedToken: selectedToken, __source: { fileName: _jsxFileName, lineNumber: 130 }, __self: this });
    let operatingModeColumn = /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_filterTokenContainer2.default, /* istanbul ignore next */{ field: filterParams.operatingModeToken, tokenCallBack: this._handelTokenClick.bind(this), label: filterParams.operatingModeLabels, selectedToken: selectedToken, __source: { fileName: _jsxFileName, lineNumber: 131 }, __self: this });
    let columnDetail = {
      column1token: statusColumn,
      column2token: timePeriodColumn,
      column3token: operatingModeColumn };

    return columnDetail;
  }




  _handelTokenClick(field, value, state) {
    var stateObject = JSON.parse(JSON.stringify(this.state));
    this.setState({ tokenSelected: /* istanbul ignore next */(0, _tableFilterCommonFunctions.handelTokenClick)(field, value, state, stateObject) });

  }

  _handleInputQuery(inputQuery, queryField) {
    var stateObject = JSON.parse(JSON.stringify(this.state));
    this.setState({ searchQuery: /* istanbul ignore next */(0, _tableFilterCommonFunctions.handleInputQuery)(inputQuery, queryField, stateObject) });
  }


  _applyFilter() {
    let filterState = this.state,_query = {};
    if (filterState.searchQuery) {

      if (filterState.searchQuery["request_id"]) {
        _query.request_id = filterState.searchQuery["request_id"];
      }

      if (filterState.searchQuery["pps_id"]) {
        _query.pps_id = filterState.searchQuery["pps_id"];
      }
      if (filterState.searchQuery["sku_id"]) {
        _query.sku_id = filterState.searchQuery["sku_id"];
      }
      if (filterState.searchQuery["user_id"]) {
        _query.user_id = filterState.searchQuery["user_id"];
      }


      if (filterState.tokenSelected["status"] && filterState.tokenSelected["status"][0] !== "any") {
        _query.status = filterState.tokenSelected["status"];
      }
      if (filterState.tokenSelected["timeperiod"]) {
        _query.time_period = filterState.tokenSelected["timeperiod"];
      }
      if (filterState.tokenSelected["operatingMode"] && filterState.tokenSelected["operatingMode"][0] !== "any") {
        _query.operatingMode = filterState.tokenSelected["operatingMode"];
      }
      _query.pageSize = this.props.pageSize;
      this.props.applyOLFilterFlag(true);
      /* istanbul ignore next */_reactRouter.hashHistory.push({ pathname: "/reports/operationsLog", query: _query });
    }
  }

  _clearFilter() {
    this.setState({
      tokenSelected: {
        "status": ["any"],
        "timeperiod": ["1_HOUR"],
        "operatingMode": ["any"] },

      searchQuery: {
        "request_id": "",
        "sku_id": "",
        "pps_id": "",
        "user_id": "" },

      defaultToken: {
        "status": ["any"],
        "operatingMode": ["any"],
        "timeperiod": ["1_HOUR"] } },

    function () {
      this.props.applyOLFilterFlag(false);
      /* istanbul ignore next */_reactRouter.hashHistory.push({ pathname: "/reports/operationsLog", query: {} });
    });


  }


  render() {

    var filterParams = this._processFilterParams();
    let olSearchField = this._processSearchField(filterParams.filterInputFields);
    let olFilterToken = this._processFilterToken(filterParams);
    var noData = this.props.noData;
    return (
      /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ __source: { fileName: _jsxFileName, lineNumber: 223 }, __self: this },
        /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_filter2.default, /* istanbul ignore next */{ __source: { fileName: _jsxFileName, lineNumber: 224 }, __self: this },
          /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'gor-filter-header', __source: { fileName: _jsxFileName, lineNumber: 225 }, __self: this },
            /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'gor-filter-header-h1', __source: { fileName: _jsxFileName, lineNumber: 226 }, __self: this },
              /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_reactIntl.FormattedMessage, /* istanbul ignore next */{ id: 'gor.filter.filterLabel', description: 'label for filter',
                defaultMessage: 'Filter data', __source: { fileName: _jsxFileName, lineNumber: 227 }, __self: this })),

            /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'gor-filter-header-h2', onClick: this._closeFilter, __source: { fileName: _jsxFileName, lineNumber: 230 }, __self: this },
              /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_reactIntl.FormattedMessage, /* istanbul ignore next */{ id: 'gor.filter.hide', description: 'label for hide',
                defaultMessage: 'Hide', __source: { fileName: _jsxFileName, lineNumber: 231 }, __self: this }))),


          /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ __source: { fileName: _jsxFileName, lineNumber: 235 }, __self: this }, noData ?
            /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'gor-no-result-filter', __source: { fileName: _jsxFileName, lineNumber: 236 }, __self: this },
              /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_reactIntl.FormattedMessage, /* istanbul ignore next */{ id: 'gor.filter.noResult', description: 'label for no result',
                defaultMessage: 'No results found, please try again', __source: { fileName: _jsxFileName, lineNumber: 237 }, __self: this })) :
            ""),

          /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'gor-filter-body', __source: { fileName: _jsxFileName, lineNumber: 241 }, __self: this },
            /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'gor-filter-body-filterToken-wrap', __source: { fileName: _jsxFileName, lineNumber: 242 }, __self: this },
              /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'gor-filter-body-filterToken-section1', __source: { fileName: _jsxFileName, lineNumber: 243 }, __self: this },
                olFilterToken.column1token,
                /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ __source: { fileName: _jsxFileName, lineNumber: 245 }, __self: this },
                  olFilterToken.column3token)),


              /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'gor-filter-body-filterToken-section1', __source: { fileName: _jsxFileName, lineNumber: 249 }, __self: this },
                olFilterToken.column2token)),





            /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'gor-filter-body-input-wrap', __source: { fileName: _jsxFileName, lineNumber: 256 }, __self: this },
              olSearchField)),





          /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'gor-filter-footer', __source: { fileName: _jsxFileName, lineNumber: 263 }, __self: this },
            /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'span', /* istanbul ignore next */{ className: 'gor-filter-footer-h2', onClick: this._clearFilter, __source: { fileName: _jsxFileName, lineNumber: 264 }, __self: this },
              /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_reactIntl.FormattedMessage, /* istanbul ignore next */{ id: 'gor.filter.reset', description: 'label for reset',
                defaultMessage: 'Reset', __source: { fileName: _jsxFileName, lineNumber: 265 }, __self: this })),

            /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'gor-filter-btn-wrap', __source: { fileName: _jsxFileName, lineNumber: 268 }, __self: this },
              /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'button', /* istanbul ignore next */{ className: 'gor-add-btn', onClick: this._applyFilter, __source: { fileName: _jsxFileName, lineNumber: 269 }, __self: this },
                !this.props.responseFlag ? /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_reactIntl.FormattedMessage, /* istanbul ignore next */{ id: 'gor.filter.heading', description: 'filter heading', defaultMessage: 'Apply filter', __source: { fileName: _jsxFileName, lineNumber: 270 }, __self: this }) : /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'spinnerImage', __source: { fileName: _jsxFileName, lineNumber: 270 }, __self: this })))))));








  }}
;

OperationsFilter.propTypes = {
  filters: /* istanbul ignore next */_react2.default.PropTypes.object,
  noData: /* istanbul ignore next */_react2.default.PropTypes.bool,
  pageSize: /* istanbul ignore next */_react2.default.PropTypes.string,
  hideLayer: /* istanbul ignore next */_react2.default.PropTypes.bool,
  responseFlag: /* istanbul ignore next */_react2.default.PropTypes.bool };

OperationsFilter.defaultProps = {
  filters: {},
  noData: false,
  pageSize: "25",
  hideLayer: true,
  responseFlag: false };



var mapDispatchToProps = function mapDispatchToProps(dispatch) {
  return {
    showTableFilter: function /* istanbul ignore next */showTableFilter(data) {dispatch( /* istanbul ignore next */(0, _filterAction.showTableFilter)(data));},
    applyOLFilterFlag: function /* istanbul ignore next */applyOLFilterFlag(data) {dispatch( /* istanbul ignore next */(0, _operationsLogsActions.applyOLFilterFlag)(data));} };


}; /* istanbul ignore next */exports.default =


/* istanbul ignore next */(0, _reactRedux.connect)(null, mapDispatchToProps, null, { withRef: true })(OperationsFilter);