/* istanbul ignore next */'use strict';Object.defineProperty(exports, "__esModule", { value: true });var _jsxFileName = '/Users/raja.d/GOR/gor.butler.ui.managerdashboard/src/containers/systemTabs/chargingStationsTable.js';var /* istanbul ignore next */_react = require('react'); /* istanbul ignore next */var _react2 = _interopRequireDefault(_react);
var /* istanbul ignore next */_fixedDataTable = require('fixed-data-table');
var /* istanbul ignore next */_reactDimensions = require('react-dimensions'); /* istanbul ignore next */var _reactDimensions2 = _interopRequireDefault(_reactDimensions);
var /* istanbul ignore next */_reactIntl = require('react-intl');
var /* istanbul ignore next */_tableDataAction = require('../../actions/tableDataAction');
var /* istanbul ignore next */_commonFunctionsDataTable = require('../../components/commonFunctionsDataTable');








var /* istanbul ignore next */_frontEndConstants = require('../../constants/frontEndConstants'); /* istanbul ignore next */function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}

class ChargingStationsTable extends /* istanbul ignore next */_react2.default.Component {
    constructor(props) {
        super(props);
        var items = this.props.items || [];
        this._dataList = new /* istanbul ignore next */_commonFunctionsDataTable.tableRenderer(items ? items.length : 0);
        this._defaultSortIndexes = [];
        this._dataList.newData = items;
        var size = this._dataList.getSize();
        for (var index = 0; index < size; index++) {
            this._defaultSortIndexes.push(index);
        }
        this.state = {
            sortedDataList: this._dataList,
            colSortDirs: {},
            columnWidths: {
                id: this.props.containerWidth * 0.15,
                status: this.props.containerWidth * 0.1,
                mode: this.props.containerWidth * 0.15,
                dockedBots: this.props.containerWidth * 0.6 } };


        this._onSortChange = this._onSortChange.bind(this);
        this._onFilterChange = this._onFilterChange.bind(this);
        this._onColumnResizeEndCallback = this._onColumnResizeEndCallback.bind(this);
    }

    componentWillReceiveProps(nextProps) {
        var items = nextProps.items || [];
        this._dataList = new /* istanbul ignore next */_commonFunctionsDataTable.tableRenderer(items ? items.length : 0);
        this._defaultSortIndexes = [];
        this._dataList.newData = items;
        var size = this._dataList.getSize();
        for (var index = 0; index < size; index++) {
            this._defaultSortIndexes.push(index);
        }
        this.state = {
            sortedDataList: this._dataList,
            colSortDirs: {},
            columnWidths: {
                id: nextProps.containerWidth * 0.15,
                status: nextProps.containerWidth * 0.1,
                mode: nextProps.containerWidth * 0.15,
                dockedBots: nextProps.containerWidth * 0.6 } };


        this._onSortChange = this._onSortChange.bind(this);
        this._onFilterChange = this._onFilterChange.bind(this);
        this._onColumnResizeEndCallback = this._onColumnResizeEndCallback.bind(this);
        this._onFilterChange(nextProps.getCsFilter);
    }
    _onColumnResizeEndCallback(newColumnWidth, columnKey) {
        this.setState(({ columnWidths }) => ({
            columnWidths: /* istanbul ignore next */Object.assign({},
            columnWidths, {
                [columnKey]: newColumnWidth }) }));


    }

    _onFilterChange(e) {
        var filterField = ["mode", "id", "status", "dockedBots"],newData;
        if (e.target && !e.target.value) {
            this.setState({
                sortedDataList: this._dataList });

        }
        if (e.target && (e.target.value || e.target.value === "")) {
            var captureValue = e.target.value;
            newData = new /* istanbul ignore next */_commonFunctionsDataTable.DataListWrapper( /* istanbul ignore next */(0, _commonFunctionsDataTable.filterIndex)(e, this.state.sortedDataList, filterField), this._dataList);

            this.setState({
                sortedDataList: newData },
            function () {
                this.props.setCsFilter(captureValue);
                if (this.props.items && this.props.items.length) {
                    this._onSortChange(this.props.currentSortState, this.props.currentHeaderOrder);
                }
            });
        } else

        {
            newData = new /* istanbul ignore next */_commonFunctionsDataTable.DataListWrapper( /* istanbul ignore next */(0, _commonFunctionsDataTable.filterIndex)(e, this.state.sortedDataList, filterField), this._dataList);
            this.setState({
                sortedDataList: newData },
            function () {
                if (this.props.items && this.props.items.length) {
                    this._onSortChange(this.props.currentSortState, this.props.currentHeaderOrder);
                }
            });
        }
    }




    _onSortChange(columnKey, sortDir) {

        if (columnKey === /* istanbul ignore next */_frontEndConstants.GOR_STATUS) {
            columnKey = /* istanbul ignore next */_frontEndConstants.GOR_STATUS_PRIORITY;
        }
        var sortIndexes = this._defaultSortIndexes.slice();
        if (this.state.sortedDataList._indexMap) {
            sortIndexes = this.state.sortedDataList._indexMap.slice();
        }
        this.setState({
            sortedDataList: new /* istanbul ignore next */_commonFunctionsDataTable.DataListWrapper( /* istanbul ignore next */(0, _commonFunctionsDataTable.sortData)(columnKey, sortDir, sortIndexes, this._dataList), this._dataList),
            colSortDirs: {
                [columnKey]: sortDir } });


        this.props.sortHeaderOrder(sortDir);
        this.props.sortHeaderState(columnKey);
    }

    render() {/* istanbul ignore next */var _state =
        this.state,sortedDataList = _state.sortedDataList,colSortDirs = _state.colSortDirs,columnWidths = _state.columnWidths;
        var rowsCount = sortedDataList.getSize();
        let manual = this.props.chargersState.manualMode;
        let auto = this.props.chargersState.automaticMode;
        let totalBots = this.props.chargersState.connectedBots;
        let csConnected = this.props.chargersState.csConnected;
        var containerHeight = this.props.containerHeight;
        var noData = /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ __source: { fileName: _jsxFileName, lineNumber: 139 }, __self: this });
        if (rowsCount === 0 || rowsCount === undefined || rowsCount === null) {
            noData = /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'gor-no-data', __source: { fileName: _jsxFileName, lineNumber: 141 }, __self: this }, /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_reactIntl.FormattedMessage, /* istanbul ignore next */{ id: 'ChargingStations.table.noData',
                    description: 'No data message for ChargingStations table',
                    defaultMessage: 'No Charging Stations Found', __source: { fileName: _jsxFileName, lineNumber: 141 }, __self: this }));
            containerHeight = /* istanbul ignore next */_frontEndConstants.GOR_TABLE_HEADER_HEIGHT;
        }

        var tableRenderer = /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'gorTableMainContainer', __source: { fileName: _jsxFileName, lineNumber: 147 }, __self: this },
            /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_fixedDataTable.Table, /* istanbul ignore next */Object.assign({
                    rowHeight: 50,
                    rowsCount: rowsCount,
                    headerHeight: 70,
                    onColumnResizeEndCallback: this._onColumnResizeEndCallback,
                    isColumnResizing: false,
                    width: this.props.containerWidth,
                    height: containerHeight },
                this.props, { __source: { fileName: _jsxFileName, lineNumber: 148 }, __self: this }),
                /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_fixedDataTable.Column, /* istanbul ignore next */{
                    columnKey: 'id',
                    header:
                    /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_commonFunctionsDataTable.SortHeaderCell, /* istanbul ignore next */{ onSortChange: this._onSortChange,
                            sortDir: colSortDirs.id, __source: { fileName: _jsxFileName, lineNumber: 160 }, __self: this },

                        /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'gorToolHeaderEl', __source: { fileName: _jsxFileName, lineNumber: 163 }, __self: this },
                            /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_reactIntl.FormattedMessage, /* istanbul ignore next */{ id: 'ChargingStationsTable.stationID.heading',
                                description: 'StationID heading',
                                defaultMessage: 'STATION ID', __source: { fileName: _jsxFileName, lineNumber: 164 }, __self: this }),

                            /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'gorToolHeaderSubText', __source: { fileName: _jsxFileName, lineNumber: 168 }, __self: this },
                                /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_reactIntl.FormattedMessage, /* istanbul ignore next */{ id: 'ChargingStationsTable.SubstationID',
                                    description: 'total SubStationID for ChargingStationsTable',
                                    defaultMessage: 'Total:{rowsCount}',
                                    values: { rowsCount: rowsCount ? rowsCount : '0' }, __source: { fileName: _jsxFileName, lineNumber: 169 }, __self: this })))),




                    cell: /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_commonFunctionsDataTable.TextCell, /* istanbul ignore next */{ data: sortedDataList, __source: { fileName: _jsxFileName, lineNumber: 177 }, __self: this }),
                    fixed: true,
                    width: columnWidths.id,
                    isResizable: true, __source: { fileName: _jsxFileName, lineNumber: 157 }, __self: this }),

                /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_fixedDataTable.Column, /* istanbul ignore next */{
                    columnKey: 'status',
                    header:
                    /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_commonFunctionsDataTable.SortHeaderCell, /* istanbul ignore next */{ onSortChange: this._onSortChange,
                            sortDir: colSortDirs.statusPriority, __source: { fileName: _jsxFileName, lineNumber: 185 }, __self: this },
                        /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'gorToolHeaderEl', __source: { fileName: _jsxFileName, lineNumber: 187 }, __self: this },
                            /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_reactIntl.FormattedMessage, /* istanbul ignore next */{ id: 'ChargingStations.table.STATUS',
                                description: 'STATUS for ChargingStations',
                                defaultMessage: 'STATUS', __source: { fileName: _jsxFileName, lineNumber: 188 }, __self: this }),
                            /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'gor-subStatus-online', __source: { fileName: _jsxFileName, lineNumber: 191 }, __self: this },
                                /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ __source: { fileName: _jsxFileName, lineNumber: 192 }, __self: this },
                                    /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_reactIntl.FormattedMessage, /* istanbul ignore next */{ id: 'csTable.status', description: 'status for cs table',
                                        defaultMessage: '{csConnected} connected',
                                        values: { csConnected: csConnected ? csConnected : '0' }, __source: { fileName: _jsxFileName, lineNumber: 193 }, __self: this }))))),





                    cell: /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_commonFunctionsDataTable.StatusCell, /* istanbul ignore next */{ data: sortedDataList, statusKey: 'statusClass', __source: { fileName: _jsxFileName, lineNumber: 201 }, __self: this }),
                    fixed: true,
                    width: columnWidths.status,
                    isResizable: true, __source: { fileName: _jsxFileName, lineNumber: 182 }, __self: this }),


                /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_fixedDataTable.Column, /* istanbul ignore next */{
                    columnKey: 'mode',
                    header:
                    /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_commonFunctionsDataTable.SortHeaderCell, /* istanbul ignore next */{ onSortChange: this._onSortChange,
                            sortDir: colSortDirs.mode, __source: { fileName: _jsxFileName, lineNumber: 210 }, __self: this },
                        /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'gorToolHeaderEl', __source: { fileName: _jsxFileName, lineNumber: 212 }, __self: this },
                            /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_reactIntl.FormattedMessage, /* istanbul ignore next */{ id: 'ChargingStations.table.operatingMode',
                                description: 'operatingMode for ChargingStations',
                                defaultMessage: 'OPERATING MODE', __source: { fileName: _jsxFileName, lineNumber: 213 }, __self: this }),
                            /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'gorToolHeaderSubText', __source: { fileName: _jsxFileName, lineNumber: 216 }, __self: this },
                                /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_reactIntl.FormattedMessage, /* istanbul ignore next */{ id: 'ChargingStationsTable.mode',
                                    description: 'cs mode for ChargingStationsTable',
                                    defaultMessage: 'Manual ({manual}) . Auto ({auto})',
                                    values: {
                                        manual: manual ? manual : '0',
                                        auto: auto ? auto : '0' }, __source: { fileName: _jsxFileName, lineNumber: 217 }, __self: this })))),





                    cell: /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_commonFunctionsDataTable.TextCell, /* istanbul ignore next */{ data: sortedDataList, classKey: 'modeClass', __source: { fileName: _jsxFileName, lineNumber: 228 }, __self: this }),
                    fixed: true,
                    width: columnWidths.mode,
                    isResizable: true, __source: { fileName: _jsxFileName, lineNumber: 207 }, __self: this }),

                /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_fixedDataTable.Column, /* istanbul ignore next */{
                    columnKey: 'dockedBots',
                    header:
                    /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_commonFunctionsDataTable.SortHeaderCell, /* istanbul ignore next */{ onSortChange: this._onSortChange,
                            sortDir: colSortDirs.dockedBots, __source: { fileName: _jsxFileName, lineNumber: 236 }, __self: this },
                        /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'gorToolHeaderEl', __source: { fileName: _jsxFileName, lineNumber: 238 }, __self: this },
                            /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_reactIntl.FormattedMessage, /* istanbul ignore next */{ id: 'ChargingStations.table.connectedBots',
                                description: 'connectedBots for ChargingStations',
                                defaultMessage: 'BOTS CONNECTED', __source: { fileName: _jsxFileName, lineNumber: 239 }, __self: this }),
                            /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'gorToolHeaderSubText', __source: { fileName: _jsxFileName, lineNumber: 242 }, __self: this },
                                /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_reactIntl.FormattedMessage, /* istanbul ignore next */{ id: 'ChargingStationsTable.totalBots',
                                    description: 'total bots ChargingStationsTable',
                                    defaultMessage: '{totalBots} bots connected',
                                    values: { totalBots: totalBots ? totalBots : '0' }, __source: { fileName: _jsxFileName, lineNumber: 243 }, __self: this })))),




                    cell: /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_commonFunctionsDataTable.TextCell, /* istanbul ignore next */{ data: sortedDataList, __source: { fileName: _jsxFileName, lineNumber: 251 }, __self: this }),
                    fixed: true,
                    width: columnWidths.dockedBots,
                    isResizable: true, __source: { fileName: _jsxFileName, lineNumber: 233 }, __self: this })),


            /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ __source: { fileName: _jsxFileName, lineNumber: 257 }, __self: this }, /* istanbul ignore next */' ', noData, /* istanbul ignore next */' '));



        return (
            /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ __source: { fileName: _jsxFileName, lineNumber: 262 }, __self: this }, /* istanbul ignore next */' ', tableRenderer, /* istanbul ignore next */' '));

    }}


ChargingStationsTable.PropTypes = {
    items: /* istanbul ignore next */_react2.default.PropTypes.array,
    containerWidth: /* istanbul ignore next */_react2.default.PropTypes.number,
    itemNumber: /* istanbul ignore next */_react2.default.PropTypes.number,
    currentHeaderOrder: /* istanbul ignore next */_react2.default.PropTypes.object,
    sortHeaderState: /* istanbul ignore next */_react2.default.PropTypes.func,
    lastUpdatedText: /* istanbul ignore next */_react2.default.PropTypes.string,
    showFilter: /* istanbul ignore next */_react2.default.PropTypes.bool,
    lastUpdated: /* istanbul ignore next */_react2.default.PropTypes.string,
    setButlerFilter: /* istanbul ignore next */_react2.default.PropTypes.func,
    setFilter: /* istanbul ignore next */_react2.default.PropTypes.func,
    containerHeight: /* istanbul ignore next */_react2.default.PropTypes.number,
    currentSortState: /* istanbul ignore next */_react2.default.PropTypes.string,
    botFilterStatus: /* istanbul ignore next */_react2.default.PropTypes.bool }; /* istanbul ignore next */exports.default =



/* istanbul ignore next */(0, _reactDimensions2.default)()(ChargingStationsTable);