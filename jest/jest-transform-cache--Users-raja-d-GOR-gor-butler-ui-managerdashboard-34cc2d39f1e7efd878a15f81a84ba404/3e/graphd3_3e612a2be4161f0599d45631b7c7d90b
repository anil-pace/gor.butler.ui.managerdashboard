/* istanbul ignore next */'use strict';Object.defineProperty(exports, "__esModule", { value: true });var _jsxFileName = '/Users/raja.d/GOR/gor.butler.ui.managerdashboard/src/components/graphd3/graphd3.js';var /* istanbul ignore next */_react = require('react'); /* istanbul ignore next */var _react2 = _interopRequireDefault(_react);
var /* istanbul ignore next */_reactD3Library = require('react-d3-library'); /* istanbul ignore next */var _reactD3Library2 = _interopRequireDefault(_reactD3Library);
var /* istanbul ignore next */_d = require('d3'); /* istanbul ignore next */var d3 = _interopRequireWildcard(_d);
var /* istanbul ignore next */_reactDimensions = require('react-dimensions'); /* istanbul ignore next */var _reactDimensions2 = _interopRequireDefault(_reactDimensions);
var /* istanbul ignore next */_reactRedux = require('react-redux');
var /* istanbul ignore next */_graphAction = require('../../actions/graphAction');
var /* istanbul ignore next */_reactIntl = require('react-intl'); /* istanbul ignore next */function _interopRequireWildcard(obj) {if (obj && obj.__esModule) {return obj;} else {var newObj = {};if (obj != null) {for (var key in obj) {if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];}}newObj.default = obj;return newObj;}}function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}

const RD3Component = /* istanbul ignore next */_reactD3Library2.default.Component;

const messages = /* istanbul ignore next */(0, _reactIntl.defineMessages)({
  noData: {
    id: 'horizontal.graph.noData',
    description: 'No data message for graph',
    defaultMessage: "No Data" } });




class Chart extends /* istanbul ignore next */_react2.default.Component {
  constructor(props)
  {
    super(props);
    this.state = { d3: '' };
  }

  graphRender(containerWidth, tData, nextP) {
    var component = this,widther = containerWidth,count = -1,temp = -1,data = [],barData = {},json = tData;
    var margin = { top: 20, right: 20, bottom: 20, left: 40 },width = widther - margin.left - margin.right,height = 300 - margin.top - margin.bottom;

    if (json !== undefined) {
      for (var i = 0; i < json.length; i++) {
        barData.timeInterval = json[i].timeInterval;
        barData.type = json[i][nextP];
        data.push(barData);
        barData = {};
      }

      var y = d3.scale.linear().range([height, 0]);
      var x = d3.scale.ordinal().rangeRoundBands([0, width], .1);
      var xAxis = d3.svg.axis().
      scale(x).
      orient("bottom").
      tickFormat(function (d) {
        count++;
        temp++;
        if (count === 3 || temp === 0 || temp === 23) {
          count = 0;
          if (d <= 9) {
            return "0" + d + ":00";
          }
          return d + ":00";
        }
        return "";
      });

      x.domain(data.map(function (d) {return d.timeInterval;}));
      var yAxis = d3.svg.axis().
      scale(y).
      orient("left").
      ticks(10);



      var node = document.createElement('div');

      var svg = d3.select(node).append('svg').
      attr("width", width + margin.left + margin.right).
      attr("height", height + margin.top + margin.bottom).
      append("g").
      attr("transform", "translate(" + margin.left + "," + margin.top + ")");


      update(data);
    }
    function update(data) {
      var noDataFlag = true;
      var noData = /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_reactIntl.FormattedMessage, /* istanbul ignore next */{ id: 'horizontal.graph.noData', description: 'No data message for graph',
        defaultMessage: 'No Data', __source: { fileName: _jsxFileName, lineNumber: 78 }, __self: this });
      var m_names = new Array("Jan", "Feb", "March",
      "April", "May", "June", "July", "Aug", "Sep",
      "Oct", "Nov", "Dec");
      data.forEach(function (d) {
        d.type = +d.type;
      });

      for (var i = data.length - 1; i >= 0; i--) {
        if (data[i].type !== 0) {
          noDataFlag = false;
          break;
        }
      }
      if (noDataFlag === false) {
        y.domain([0, d3.max(data, function (d) {return d.type;})]);
      } else
      {
        y.domain([0, 100]);
      }

      x.domain(data.map(function (d) {return d.timeInterval;}));


      svg.append("g").
      attr("class", "grid").
      call(make_y_axis().
      tickSize(-width, 0, 0).
      tickFormat(""));


      svg.append("g").
      attr("class", "x axis").
      attr("transform", "translate(0," + height + ")").
      call(xAxis).
      style("font-size", "12px").
      style("font-family", "sans-serif").
      style("fill", "#666666");




      svg.append("g").
      attr("class", "y axis").
      call(yAxis).
      style("font-size", "12px").
      style("font-family", "sans-serif").
      style("fill", "#666666").
      append("text").
      attr("transform", "rotate(-90)").
      attr("y", 6).
      attr("dy", "4em").
      style("text-anchor", "end");

      svg.selectAll(".bar").
      data(data).
      enter().
      append("rect").
      attr("rx", 2).
      attr("ry", 2).
      attr("class", "bar").
      attr("x", function (d) {
        return x(d.timeInterval);
      }).
      attr("width", x.rangeBand()).
      attr("y", function (d) {return y(d.type);}).
      attr("height", 0).
      attr("height", function (d) {return height - y(d.type);}).
      attr("opacity", 1).
      on("mouseover", function (d, i) {
        d3.selectAll(".bar").transition().
        duration(250).
        attr("opacity", function (d, j) {
          return j !== i ? 0.6 : 1;
        });
      }).
      on("mousemove", function (d, i) {
        d3.select(this).
        classed("hover", true).
        attr("height", function (d) {return height - y(d.type);}).
        attr("x", function (d) {return x(d.timeInterval);}).
        attr("stroke", "#045A8D").
        attr("stroke-width", "0.5px");
        d3.select('.remove').html("<div style='background:#4d5055; color:#ffffff; padding:10px 30px 10px 10px; border-radius:5%; font-size:14px;'> " + d.timeInterval + ":00 - " + (d.timeInterval + 1) + ":00 <div style='color: #ffffff; padding-top:2px;'> " + new Date().getDate() + " " + m_names[new Date().getMonth()] + ",2016</div> <div style='color: #ffffff; display:inline-block; padding-top:10px; font-size:14px;'> Fulfilled:  " + d.type.toLocaleString() + " </div> <div style='border-left: 9px solid transparent; border-right: 9px solid transparent; border-top: 12px solid #4d5055; margin-left: 58px; position: absolute; margin-top: 5px;'/>").style("visibility", "visible");
        var mouse = d3.mouse(this);
        var mousex = x(d.timeInterval) + 20;
        var mousey = y(d.type) + 315;
        d3.selectAll('.remove').style("left", mousex + "px");
        d3.selectAll('.remove').style("top", +mousey + "px");
      }).
      on("mouseout", function (d, i) {
        d3.selectAll(".layer").
        transition().
        duration(250).
        attr("opacity", "1");
        d3.select(this).
        classed("hover", false).
        attr("stroke-width", "0px");
        d3.select('.remove').html("<p></p>").style("visibility", "hidden");
      });

      var tooltip = d3.select(node).append("div").
      attr("class", "remove").
      style("position", "absolute").
      style("z-index", "20").
      style("visibility", "hidden").
      style("top", "100px").
      style("left", "55px");

      d3.select(node).selectAll('svg').
      data(data).
      on("mouseover", function () {
        var mousex = d3.mouse(this);
        mousex = mousex[0] + 10;
        d3.selectAll('.remove').style("left", mousex + "px");
      });
      if (noDataFlag === true) {
        svg.insert("text", ":first-child").attr("x", width / 2).attr("y", height / 2).text(component.context.intl.formatMessage(messages.noData) || "");
      }

      component.setState({ d3: node });
    }





    function make_y_axis() {
      return d3.svg.axis().
      scale(y).
      orient("left").
      ticks(5);
    }
  }

  componentDidMount() {
    this.graphRender(this.props.containerWidth, this.props.tableData.histData, this.props.type);
  }

  componentWillReceiveProps(nextProps) {
    this.graphRender(nextProps.containerWidth, nextProps.tableData.histData, nextProps.type);
  }

  render() {
    return (
      /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ __source: { fileName: _jsxFileName, lineNumber: 224 }, __self: this },
        /* istanbul ignore next */_react2.default.createElement(RD3Component, /* istanbul ignore next */{ data: this.state.d3, __source: { fileName: _jsxFileName, lineNumber: 225 }, __self: this })));


  }}
;

function mapStateToProps(state, ownProps) {
  return {
    barData: state.filterOptions || {} };

}

var mapDispatchToProps = function mapDispatchToProps(dispatch) {
  return {
    barD3Component: function /* istanbul ignore next */barD3Component(data) {dispatch( /* istanbul ignore next */(0, _graphAction.barD3Component)(data));} };

};

Chart.contextTypes = {
  intl: /* istanbul ignore next */_react2.default.PropTypes.object.isRequired }; /* istanbul ignore next */exports.default =


/* istanbul ignore next */(0, _reactDimensions2.default)()(Chart);