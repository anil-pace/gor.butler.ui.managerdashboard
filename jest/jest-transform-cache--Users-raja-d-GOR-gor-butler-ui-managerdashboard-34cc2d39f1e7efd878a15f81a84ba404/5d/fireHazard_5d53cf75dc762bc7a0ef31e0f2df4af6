/* istanbul ignore next */'use strict';Object.defineProperty(exports, "__esModule", { value: true });var _jsxFileName = '/Users/raja.d/GOR/gor.butler.ui.managerdashboard/src/containers/emergencyProcess/fireHazard.js';var /* istanbul ignore next */_react = require('react'); /* istanbul ignore next */var _react2 = _interopRequireDefault(_react);
var /* istanbul ignore next */_reactRedux = require('react-redux');
var /* istanbul ignore next */_reactReduxModal = require('react-redux-modal');
var /* istanbul ignore next */_reactIntl = require('react-intl');
var /* istanbul ignore next */_tabActions = require('../../actions/tabActions');
var /* istanbul ignore next */_resumeOperation = require('./resumeOperation'); /* istanbul ignore next */var _resumeOperation2 = _interopRequireDefault(_resumeOperation);
var /* istanbul ignore next */_userActions = require('../../actions/userActions');
var /* istanbul ignore next */_shutterLocationTile = require('../../components/fireHazardTiles/shutterLocationTile'); /* istanbul ignore next */var _shutterLocationTile2 = _interopRequireDefault(_shutterLocationTile);
var /* istanbul ignore next */_getDaysDiff = require('../../utilities/getDaysDiff');
var /* istanbul ignore next */_frontEndConstants = require('../../constants/frontEndConstants'); /* istanbul ignore next */function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}
class FireHazard extends /* istanbul ignore next */_react2.default.Component {
  constructor(props)
  {
    super(props);
    this.state = { buttonDisable: true };
    this._removeThisModal = this._removeThisModal.bind(this);
    this._resumeOperation = this._resumeOperation.bind(this);
  }
  _removeThisModal() {
    this.props.removeModal();
    this.props.setFireHazrdFlag(true);
  }
  endFireHazard() {
    this.props.removeModal();
  }

  componentDidMount() {
    if (this.props.checkingList) {
      this.endFireHazard(); //If manager is on safety checklist page, don't show the release modal      
    }
  }
  componentWillMount() {
    var limit = this.props.config.fire_emergency_enable_resume_after * 60;
    var duration = (limit - /* istanbul ignore next */(0, _getDaysDiff.getSecondsDiff)(this.props.fireHazard.emergencyStartTime)) * 1000;

    if (this.state.buttonDisable)
    {
      setTimeout(function () {
        this.setState({ buttonDisable: false });
      }.bind(this), duration);
    }
  }

  componentWillReceiveProps(nextProps) {
    if (!nextProps.auth_token || !nextProps.fireHazard.emergencyStartTime)
    {
      this._removeThisModal();
    }
  }

  _resumeOperation() {
    this._removeThisModal();
    /* istanbul ignore next */_reactReduxModal.modal.add( /* istanbul ignore next */_resumeOperation2.default, {
      title: '',
      size: 'large', // large, medium or small,
      closeOnOutsideClick: false, // (optional) Switch to true if you want to close the modal by clicking outside of it,
      hideCloseButton: true, // (optional) if you don't wanna show the top right close button
      fireHazardPressed: true
      //.. all what you put in here you will get access in the modal props ;)
    });
  }

  _processData() {
    var shutters = this.props.fireHazard.shutters;
    var key = Object.keys(shutters);
    var shutterNuber = key.length;
    var Imageclass;
    var shutterWrap = [];
    for (var i = 0; i < shutterNuber; i++) {
      switch (shutters[key[i]]) {
        case /* istanbul ignore next */_frontEndConstants.FAILED:
          Imageclass = /* istanbul ignore next */_frontEndConstants.FAILED;
          break;
        case /* istanbul ignore next */_frontEndConstants.CLEARED:
          Imageclass = /* istanbul ignore next */_frontEndConstants.CLEARED;
          break;
        default:
          Imageclass = /* istanbul ignore next */_frontEndConstants.PROGRESS;}

      var singleShutter = /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_shutterLocationTile2.default, /* istanbul ignore next */{ key: i, shutterName: key[i], shutterStatus: Imageclass, __source: { fileName: _jsxFileName, lineNumber: 80 }, __self: this });

      shutterWrap.push(singleShutter);
    }
    return shutterWrap;
  }
  processShutterHeader(data) {
    var p = 0,f = 0,c = 0,marker;
    var key = Object.keys(data);
    var shutterNuber = key.length;
    for (var i = 0; i < shutterNuber; i++) {
      switch (data[key[i]]) {
        case /* istanbul ignore next */_frontEndConstants.FAILED:
          f = 1;
          break;
        case /* istanbul ignore next */_frontEndConstants.CLEARED:
          c = 1;
          break;
        default:
          p = 1;}

    }
    if (p > 0) {
      marker = /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ __source: { fileName: _jsxFileName, lineNumber: 103 }, __self: this }, /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'span', /* istanbul ignore next */{ className: 'gor-image-status progress', __source: { fileName: _jsxFileName, lineNumber: 103 }, __self: this }), /* istanbul ignore next */' ', /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'span', /* istanbul ignore next */{ className: 'gor-status-text', __source: { fileName: _jsxFileName, lineNumber: 103 }, __self: this }, /* istanbul ignore next */' ', /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_reactIntl.FormattedMessage, /* istanbul ignore next */{ id: 'operation.fire.shutter', defaultMessage: 'Clearing all shutters', description: 'Description Text clear shutter', __source: { fileName: _jsxFileName, lineNumber: 103 }, __self: this }), /* istanbul ignore next */' '));
    } else
    if (f > 0) {
      marker = /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ __source: { fileName: _jsxFileName, lineNumber: 106 }, __self: this }, /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'span', /* istanbul ignore next */{ className: 'gor-image-status failed', __source: { fileName: _jsxFileName, lineNumber: 106 }, __self: this }), /* istanbul ignore next */' ', /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'span', /* istanbul ignore next */{ className: 'gor-status-text', __source: { fileName: _jsxFileName, lineNumber: 106 }, __self: this }, /* istanbul ignore next */' ', /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_reactIntl.FormattedMessage, /* istanbul ignore next */{ id: 'operation.fire.failshutter', defaultMessage: 'Failed to clear shutters', description: 'Description Text fail to clear shutter', __source: { fileName: _jsxFileName, lineNumber: 106 }, __self: this }), /* istanbul ignore next */' '));
    } else
    if (c > 0)
    {
      marker = /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ __source: { fileName: _jsxFileName, lineNumber: 110 }, __self: this }, /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'span', /* istanbul ignore next */{ className: 'gor-image-status cleared', __source: { fileName: _jsxFileName, lineNumber: 110 }, __self: this }), /* istanbul ignore next */' ', /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'span', /* istanbul ignore next */{ className: 'gor-status-text', __source: { fileName: _jsxFileName, lineNumber: 110 }, __self: this }, /* istanbul ignore next */' ', /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_reactIntl.FormattedMessage, /* istanbul ignore next */{ id: 'operation.fire.clearedshutter', defaultMessage: 'Cleared all shutters', description: 'Description Text  cleared shutter', __source: { fileName: _jsxFileName, lineNumber: 110 }, __self: this }), /* istanbul ignore next */' '));
    }
    return marker;
  }

  processEscapePath(data) {
    var escapeMarker;
    if (data === /* istanbul ignore next */_frontEndConstants.CLEARED)
    {
      escapeMarker = /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ __source: { fileName: _jsxFileName, lineNumber: 119 }, __self: this }, /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'span', /* istanbul ignore next */{ className: 'gor-image-status cleared', __source: { fileName: _jsxFileName, lineNumber: 119 }, __self: this }), /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'span', /* istanbul ignore next */{ className: 'gor-status-text', __source: { fileName: _jsxFileName, lineNumber: 119 }, __self: this }, /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_reactIntl.FormattedMessage, /* istanbul ignore next */{ id: 'operation.fire.escapecleared', defaultMessage: 'Cleared escape path', description: 'Description Text escape cleared', __source: { fileName: _jsxFileName, lineNumber: 119 }, __self: this })));
    } else
    if (data === /* istanbul ignore next */_frontEndConstants.IN_PROGRESS) {
      escapeMarker = /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ __source: { fileName: _jsxFileName, lineNumber: 122 }, __self: this }, /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'span', /* istanbul ignore next */{ className: 'gor-image-status progress', __source: { fileName: _jsxFileName, lineNumber: 122 }, __self: this }), /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'span', /* istanbul ignore next */{ className: 'gor-status-text', __source: { fileName: _jsxFileName, lineNumber: 122 }, __self: this }, /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_reactIntl.FormattedMessage, /* istanbul ignore next */{ id: 'operation.fire.escapeprogress', defaultMessage: 'Clearing escape path', description: 'Description Text escape in progress', __source: { fileName: _jsxFileName, lineNumber: 122 }, __self: this })));
    } else
    {
      escapeMarker = /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ __source: { fileName: _jsxFileName, lineNumber: 125 }, __self: this }, /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'span', /* istanbul ignore next */{ className: 'gor-image-status failed', __source: { fileName: _jsxFileName, lineNumber: 125 }, __self: this }), /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'span', /* istanbul ignore next */{ className: 'gor-status-text', __source: { fileName: _jsxFileName, lineNumber: 125 }, __self: this }, /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_reactIntl.FormattedMessage, /* istanbul ignore next */{ id: 'operation.fire.escapefail', defaultMessage: 'Failed to clear escape path', description: 'Description Text escape to fail', __source: { fileName: _jsxFileName, lineNumber: 125 }, __self: this })));
    }
    return escapeMarker;
  }

  render()
  {
    var shutterFlag = false,escapePathFlag = false;
    var shutterNuber = Object.keys(this.props.fireHazard.shutters).length;
    shutterFlag = shutterNuber === 0;
    escapePathFlag = this.props.fireHazard.escapePath !== /* istanbul ignore next */_frontEndConstants.NOT_FOUND ? true : false;
    var shutterWrap = this._processData();
    var markerShutter = this.processShutterHeader(this.props.fireHazard.shutters);
    var markerEscapePath = this.processEscapePath(this.props.fireHazard.escapePath);
    return (

      /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'gor-modal-content gor-firehazard', __source: { fileName: _jsxFileName, lineNumber: 141 }, __self: this },
        /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'span', /* istanbul ignore next */{ className: 'hazard-image', __source: { fileName: _jsxFileName, lineNumber: 142 }, __self: this }),
        /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'span', /* istanbul ignore next */{ className: 'close', onClick: this._removeThisModal, __source: { fileName: _jsxFileName, lineNumber: 143 }, __self: this }, /* istanbul ignore next */'\xD7'),
        /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'gor-firehazard-header', __source: { fileName: _jsxFileName, lineNumber: 144 }, __self: this },
          /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'span', /* istanbul ignore next */{ className: 'gor-caution-image', __source: { fileName: _jsxFileName, lineNumber: 145 }, __self: this }),
          /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'span', /* istanbul ignore next */{ className: 'gor-caution-text-header', __source: { fileName: _jsxFileName, lineNumber: 146 }, __self: this },
            /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_reactIntl.FormattedMessage, /* istanbul ignore next */{ id: 'operation.fire.header',
              defaultMessage: 'FIRE EMERGENCY',
              description: 'Header Text FIRE EMERGENCY', __source: { fileName: _jsxFileName, lineNumber: 147 }, __self: this })),

          /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'span', /* istanbul ignore next */{ className: 'gor-caution-text', __source: { fileName: _jsxFileName, lineNumber: 151 }, __self: this },
            /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_reactIntl.FormattedMessage, /* istanbul ignore next */{ id: 'operation.fire.cautionText',
              defaultMessage: 'Fire emergency has been triggered and system has started its safety measures.',
              description: 'Description Text FIRE EMERGENCY', __source: { fileName: _jsxFileName, lineNumber: 152 }, __self: this }),

            /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'span', /* istanbul ignore next */{ className: 'gor-bold-underline', __source: { fileName: _jsxFileName, lineNumber: 156 }, __self: this },
              /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_reactIntl.FormattedMessage, /* istanbul ignore next */{ id: 'operation.fire.evacuation',
                defaultMessage: ' Please follow evacuation procedures immediately.',
                description: 'Description Text evacuation', __source: { fileName: _jsxFileName, lineNumber: 157 }, __self: this })))),



        /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: escapePathFlag ? "gor-shutter-section" : "gor-shutter-section hidden", __source: { fileName: _jsxFileName, lineNumber: 163 }, __self: this },
          markerEscapePath),

        /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: !shutterFlag ? "gor-shutter-section" : "gor-shutter-section hidden", __source: { fileName: _jsxFileName, lineNumber: 166 }, __self: this },
          markerShutter,
          /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'gor-shutter-status-box', __source: { fileName: _jsxFileName, lineNumber: 168 }, __self: this },
            shutterWrap)),


        /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'button', /* istanbul ignore next */{ className: this.state.buttonDisable ? 'gor-resume-btn disable' : 'gor-resume-btn', disabled: this.state.buttonDisable, onClick: this._resumeOperation, __source: { fileName: _jsxFileName, lineNumber: 172 }, __self: this },
          /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_reactIntl.FormattedMessage, /* istanbul ignore next */{ id: 'operation.alert.release.button',
            defaultMessage: 'RESUME OPERATION',
            description: 'Text button to resume operation', __source: { fileName: _jsxFileName, lineNumber: 173 }, __self: this }))));


  }}

;
function mapStateToProps(state, ownProps) {
  return {
    auth_token: state.authLogin.auth_token,
    checkingList: state.emergency.checkingList || false,
    fireHazard: state.fireHazardDetail,
    firehazadflag: state.fireReducer.firehazadflag || false,
    config: state.config || {} };

}
function mapDispatchToProps(dispatch) {
  return {

    setFireHazrdFlag: function /* istanbul ignore next */setFireHazrdFlag(data) {dispatch( /* istanbul ignore next */(0, _tabActions.setFireHazrdFlag)(data));},
    userRequest: function /* istanbul ignore next */userRequest(data) {dispatch( /* istanbul ignore next */(0, _userActions.userRequest)(data));} };

};

FireHazard.propTypes = {
  auth_token: /* istanbul ignore next */_react2.default.PropTypes.string,
  checkingList: /* istanbul ignore next */_react2.default.PropTypes.bool }; /* istanbul ignore next */exports.default =


/* istanbul ignore next */(0, _reactRedux.connect)(mapStateToProps, mapDispatchToProps)(FireHazard);