/* istanbul ignore next */'use strict';Object.defineProperty(exports, "__esModule", { value: true });
var /* istanbul ignore next */_frontEndConstants = require('../constants/frontEndConstants');

var /* istanbul ignore next */_AjaxParser = require('../utilities/AjaxParser');
var /* istanbul ignore next */_fileResponseParser = require('../utilities/fileResponseParser');
var /* istanbul ignore next */_showError = require('../utilities/showError');
var /* istanbul ignore next */_endSession = require('../utilities/endSession');


const ajaxMiddleware = function () {

  return store => next => action => {
    switch (action.type) {

      case /* istanbul ignore next */_frontEndConstants.AJAX_CALL:

        var params = action.params;
        var saltParams = action.params.saltParams ? action.params.saltParams : {};
        var formData = params.formdata || params || null,httpData;

        if (params.cause !== /* istanbul ignore next */_frontEndConstants.MASTER_FILE_UPLOAD) {
          httpData = params.formdata ? JSON.stringify(params.formdata) : null;
        } else
        {
          httpData = params.formdata;
        }


        var httpRequest = new XMLHttpRequest();
        var authCause = [/* istanbul ignore next */_frontEndConstants.AUTH_LOGIN, /* istanbul ignore next */_frontEndConstants.PAUSE_OPERATION, /* istanbul ignore next */_frontEndConstants.RESUME_OPERATION];
        if (!httpRequest || !params.url) {
          return false;
        }
        if (params.responseType) {
          httpRequest.responseType = params.responseType;
        }
        httpRequest.onreadystatechange = function (xhr) {
          if (httpRequest.readyState === XMLHttpRequest.DONE) {
            if (httpRequest.status === 401 && authCause.indexOf(params.cause) == -1) {
              /* istanbul ignore next */(0, _endSession.endSession)(store);
            } else
            {
              try
              {
                let resContentType = httpRequest.getResponseHeader('Content-type');
                if (resContentType.match(/(text\/csv)/g) || resContentType.match(/(application\/vnd.openxmlformats-officedocument.spreadsheetml.sheet)/g)) {
                  //get the file name from the content-disposition header
                  //and then save the file
                  let fileName;
                  if (this.getResponseHeader('Content-disposition')) {
                    let strName = this.getResponseHeader('Content-disposition').match(/filename[^;=\n]*=((['"]).*?\2|[^;\n]*)/);
                    fileName = strName[0].slice(10, strName.length - 2);
                  }
                  fileName = !fileName ? resContentType.match(/(text\/csv)/g) ? "download.csv" : "download.xlsx" : fileName;
                  /* istanbul ignore next */(0, _fileResponseParser.FileResponseParser)(store, httpRequest.response, params.cause, fileName);
                } else
                {
                  let decodedString = httpRequest.responseType === "arraybuffer" ? String.fromCharCode.apply(null, new Uint8Array(httpRequest.response)) : httpRequest.response;
                  var response = JSON.parse(decodedString, httpRequest.status);
                  /* istanbul ignore next */(0, _AjaxParser.AjaxParse)(store, response, params.cause, httpRequest.status, saltParams);

                }

              }
              catch (e)
              {
                if (!response) {
                  /* istanbul ignore next */(0, _showError.ShowError)(store, params.cause, httpRequest.status);
                }
                throw e;
              }
            }
          }
        };
        httpRequest.onerror = function (err) {
          /* istanbul ignore next */(0, _showError.ShowError)(store, params.cause, httpRequest.status);
        };

        httpRequest.open(params.method, params.url, !params.sync);
        if (params.contentType !== false) {
          httpRequest.setRequestHeader('Content-Type', params.contentType || "text/html");
        }
        if (params.withCredentials) {
          httpRequest.withCredentials = true;
        }
        httpRequest.setRequestHeader('Accept', params.accept || "text/html");
        if (params.cause !== /* istanbul ignore next */_frontEndConstants.AUTH_LOGIN)
        {
          httpRequest.setRequestHeader('Authentication-Token', params.token);
        }

        httpRequest.send(httpData);
        break;

      default:
        return next(action);}

  };

}(); /* istanbul ignore next */exports.default =

ajaxMiddleware;