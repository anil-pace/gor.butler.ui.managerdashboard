/* istanbul ignore next */'use strict';Object.defineProperty(exports, "__esModule", { value: true });var _jsxFileName = '/Users/raja.d/GOR/gor.butler.ui.managerdashboard/src/containers/systemTabs/sysControllers.js';var /* istanbul ignore next */_react = require('react'); /* istanbul ignore next */var _react2 = _interopRequireDefault(_react);
var /* istanbul ignore next */_fixedDataTable = require('fixed-data-table');
var /* istanbul ignore next */_reactDimensions = require('react-dimensions'); /* istanbul ignore next */var _reactDimensions2 = _interopRequireDefault(_reactDimensions);
var /* istanbul ignore next */_reactIntl = require('react-intl');
var /* istanbul ignore next */_reactRedux = require('react-redux');
var /* istanbul ignore next */_filterSummary = require('../../components/tableFilter/filterSummary'); /* istanbul ignore next */var _filterSummary2 = _interopRequireDefault(_filterSummary);
var /* istanbul ignore next */_commonFunctionsDataTable = require('../../components/commonFunctionsDataTable');












var /* istanbul ignore next */_reactRouter = require('react-router');
var /* istanbul ignore next */_backEndConstants = require('../../constants/backEndConstants');
var /* istanbul ignore next */_frontEndConstants = require('../../constants/frontEndConstants');
var /* istanbul ignore next */_socketActions = require('../../actions/socketActions');
var /* istanbul ignore next */_messageConstants = require('../../constants/messageConstants');

var /* istanbul ignore next */_filter = require('../../components/tableFilter/filter'); /* istanbul ignore next */var _filter2 = _interopRequireDefault(_filter);
var /* istanbul ignore next */_filterTokenContainer = require('../../components/tableFilter/filterTokenContainer'); /* istanbul ignore next */var _filterTokenContainer2 = _interopRequireDefault(_filterTokenContainer);
var /* istanbul ignore next */_filterAction = require('../../actions/filterAction'); /* istanbul ignore next */function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}







class SystemControllers extends /* istanbul ignore next */_react2.default.Component {
    constructor(props, context) {
        super(props, context);
        this.state = this._getInitialState();
        this._clearFilter = this._clearFilter.bind(this);
        this._sortTableData = this._sortTableData.bind(this);

    }

    _getInitialState() {
        var data = this._processData(this.props.controllers.slice(0));
        var dataList = new /* istanbul ignore next */_commonFunctionsDataTable.tableRenderer(data.length);
        dataList.newData = data;
        return {
            columnWidths: {
                id: this.props.containerWidth * 0.15,
                status: this.props.containerWidth * 0.1,
                location: this.props.containerWidth * 0.13,
                connectionDetails: this.props.containerWidth * 0.2,
                operatingMode: this.props.containerWidth * 0.4 },

            sortOrder: {
                controller_id: "ASC",
                statusText: "ASC" },

            dataList: dataList,
            query: this.props.location.query,
            locale: this.context.intl.locale,
            subscribed: false,
            queryApplied: Object.keys(this.props.location.query).length ? true : false };

    }


    _processData(data) {
        //var data=this.props.controllers.slice(0);
        var dataLen = data.length;
        var processedData = [];
        if (dataLen) {
            for (let i = 0; i < dataLen; i++) {
                let rowObj = {};
                rowObj = Object.assign({}, data[i]);
                if (data[i].status === "connected") {
                    rowObj.statusText = this.context.intl.formatMessage( /* istanbul ignore next */_backEndConstants.stringConfig.connected);
                } else
                {
                    rowObj.statusText = this.context.intl.formatMessage( /* istanbul ignore next */_backEndConstants.stringConfig.disconnected);
                }
                if (data[i].zigbee_network === "connected") {
                    rowObj.zigbeeText = this.context.intl.formatMessage( /* istanbul ignore next */_backEndConstants.stringConfig.connected);
                } else
                {
                    rowObj.zigbeeText = this.context.intl.formatMessage( /* istanbul ignore next */_backEndConstants.stringConfig.disconnected);
                }
                if (data[i].ethernet_network === "connected") {
                    rowObj.ethernetText = this.context.intl.formatMessage( /* istanbul ignore next */_backEndConstants.stringConfig.connected);
                } else
                {
                    rowObj.ethernetText = this.context.intl.formatMessage( /* istanbul ignore next */_backEndConstants.stringConfig.disconnected);
                }
                if (rowObj.sensor_activated === "button_press") {
                    rowObj.sensor_activated_text = /* istanbul ignore next */_messageConstants.CONTROLLER_SENSOR_TRIGGERED_MESSAGES[rowObj.sensor];
                } else
                if (rowObj.sensor_activated === "none") {
                    rowObj.sensor_activated_text = "";
                } else
                {
                    rowObj.sensor_activated_text = /* istanbul ignore next */_messageConstants.CONTROLLER_SENSOR_TRIGGERED_MESSAGES[rowObj.sensor_activated];
                }
                rowObj.action_triggered_text = /* istanbul ignore next */_messageConstants.CONTROLLER_ACTION_TRIGGERED_MESSAGES[rowObj.action_triggered];

                processedData.push(rowObj);
            }
        }
        return processedData;
    }

    _sortTableData(column, direction) {
        var _this = this;
        var data = JSON.parse(JSON.stringify(_this.state.dataList.newData));
        var dataList;
        var sortOrder = JSON.parse(JSON.stringify(_this.state.sortOrder));

        data.sort(function (current, next) {
            let result = direction === "ASC" ? next[column].toLowerCase().localeCompare(current[column].toLowerCase(), _this.state.locale) :
            current[column].toLowerCase().localeCompare(next[column].toLowerCase(), _this.state.locale);
            return result <= 0 ? false : true;

        });
        dataList = new /* istanbul ignore next */_commonFunctionsDataTable.tableRenderer(data.length);
        dataList.newData = data;
        sortOrder[column] = sortOrder[column] === "ASC" ? "DESC" : "ASC";
        _this.setState({
            dataList,
            hasStateChanged: !_this.state.hasStateChanged,
            sortOrder });

    }


    _clearFilter() {
        this.setState({
            subscribed: false },
        function () {
            this.props.router.push({ pathname: "/system/sysControllers" });
        });

    }


    _refreshList(query) {
        var filterSubsData = {};
        var updatedWsSubscription = JSON.parse(JSON.stringify(this.props.wsSubscriptionData));
        if (query && query.zone_id) {
            filterSubsData["zone_id"] = ['=', query.zone_id];
        }
        updatedWsSubscription["controllers"].data[0].details["filter_params"] = filterSubsData;
        this.props.initDataSentCall(updatedWsSubscription["controllers"]);
    }



    shouldComponentUpdate(nextProps, nextState) {
        return nextProps.hasDataChanged !== this.props.hasDataChanged ||
        nextState.hasStateChanged !== this.state.hasStateChanged;
    }


    componentWillReceiveProps(nextProps) {
        if (nextProps.socketAuthorized && !this.state.subscribed || JSON.stringify(this.props.location.query) !== JSON.stringify(nextProps.location.query)) {
            this.setState({
                subscribed: true,
                queryApplied: Object.keys(this.props.location.query).length ? true : false },
            function () {
                this._refreshList(nextProps.location.query);
            });
        }
        if (this.props.hasDataChanged !== nextProps.hasDataChanged) {
            let data = this._processData(nextProps.controllers.slice(0));
            let dataList = new /* istanbul ignore next */_commonFunctionsDataTable.tableRenderer(data.length);
            dataList.newData = data;
            this.setState({
                dataList,
                queryApplied: Object.keys(nextProps.location.query).length ? true : false });

        }
    }
    componentWillMount() {
        if (this.props.socketAuthorized && !this.state.subscribed) {
            this.setState({
                subscribed: true,
                queryApplied: Object.keys(this.props.location.query).length ? true : false },
            function () {
                this._refreshList(this.props.location.query);
            });
        }
    }



    render() {/* istanbul ignore next */var
        dataList = this.state.dataList;
        var filterHeight = screen.height - 190 - 50;

        return (
            /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'gorTableMainContainer gor-sys-controller', __source: { fileName: _jsxFileName, lineNumber: 201 }, __self: this },

                /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'gorToolBar', __source: { fileName: _jsxFileName, lineNumber: 203 }, __self: this },
                    /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'gorToolBarWrap', __source: { fileName: _jsxFileName, lineNumber: 204 }, __self: this },
                        /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'gorToolBarElements', __source: { fileName: _jsxFileName, lineNumber: 205 }, __self: this },
                            /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_reactIntl.FormattedMessage, /* istanbul ignore next */{ id: 'sysController.table.heading', description: 'Heading for PPS',
                                defaultMessage: 'System Controllers', __source: { fileName: _jsxFileName, lineNumber: 206 }, __self: this })))),





                /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_filterSummary2.default, /* istanbul ignore next */{ total: dataList.getSize() || 0, isFilterApplied: this.state.queryApplied, responseFlag: null,
                    refreshList: this._clearFilter,
                    refreshText: /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_reactIntl.FormattedMessage, /* istanbul ignore next */{ id: 'sysController.summary.showall',
                        description: 'button label for show all',
                        defaultMessage: 'Show all Zones', __source: { fileName: _jsxFileName, lineNumber: 215 }, __self: this }), __source: { fileName: _jsxFileName, lineNumber: 213 }, __self: this }),

                /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_fixedDataTable.Table, /* istanbul ignore next */Object.assign({
                        rowHeight: 80,
                        rowsCount: dataList.getSize(),
                        headerHeight: 70,
                        onColumnResizeEndCallback: null,
                        isColumnResizing: false,
                        width: this.props.containerWidth,
                        height: document.documentElement.clientHeight * 0.6 },
                    this.props, { __source: { fileName: _jsxFileName, lineNumber: 219 }, __self: this }),
                    /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_fixedDataTable.Column, /* istanbul ignore next */{
                        columnKey: 'controller_id',
                        header:


                        /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_commonFunctionsDataTable.SortHeaderCell, /* istanbul ignore next */{ onSortChange: () => this._sortTableData("controller_id", this.state.sortOrder.controller_id),
                                sortDir: this.state.sortOrder.controller_id, __source: { fileName: _jsxFileName, lineNumber: 233 }, __self: this },
                            /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'gorToolHeaderEl', __source: { fileName: _jsxFileName, lineNumber: 235 }, __self: this },
                                /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_reactIntl.FormattedMessage, /* istanbul ignore next */{ id: 'sysControllers.idColumn.heading',
                                    description: 'CONTROLLER ID',
                                    defaultMessage: 'CONTROLLER ID', __source: { fileName: _jsxFileName, lineNumber: 236 }, __self: this }),
                                /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'gorToolHeaderSubText', __source: { fileName: _jsxFileName, lineNumber: 239 }, __self: this },
                                    /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_reactIntl.FormattedMessage, /* istanbul ignore next */{ id: 'sysControllers.totalControllers',
                                        description: 'total controllers',
                                        defaultMessage: 'Total:{count}',
                                        values: { count: dataList.getSize() || 0 }, __source: { fileName: _jsxFileName, lineNumber: 240 }, __self: this })))),









                        cell: /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_commonFunctionsDataTable.TextCell, /* istanbul ignore next */{ data: dataList, classKey: "id", __source: { fileName: _jsxFileName, lineNumber: 253 }, __self: this }),
                        fixed: true,
                        width: this.state.columnWidths.id,
                        isResizable: true, __source: { fileName: _jsxFileName, lineNumber: 228 }, __self: this }),

                    /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_fixedDataTable.Column, /* istanbul ignore next */{
                        columnKey: 'statusText',
                        header:
                        /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_commonFunctionsDataTable.SortHeaderCell, /* istanbul ignore next */{ onSortChange: () => this._sortTableData("statusText", this.state.sortOrder.statusText),

                                sortDir: this.state.sortOrder.statusText, __source: { fileName: _jsxFileName, lineNumber: 261 }, __self: this },

                            /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'gorToolHeaderEl', __source: { fileName: _jsxFileName, lineNumber: 265 }, __self: this },

                                /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_reactIntl.FormattedMessage, /* istanbul ignore next */{ id: 'sysController.table.status', description: 'Status for PPS',
                                    defaultMessage: 'STATUS', __source: { fileName: _jsxFileName, lineNumber: 267 }, __self: this }),
                                /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'gorToolHeaderSubText', __source: { fileName: _jsxFileName, lineNumber: 269 }, __self: this }))),



                        cell: /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_commonFunctionsDataTable.TextCell, /* istanbul ignore next */{ data: dataList, setClass: "status", __source: { fileName: _jsxFileName, lineNumber: 273 }, __self: this }),
                        fixed: true,
                        width: this.state.columnWidths.status,
                        isResizable: true, __source: { fileName: _jsxFileName, lineNumber: 258 }, __self: this }),

                    /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_fixedDataTable.Column, /* istanbul ignore next */{
                        columnKey: null,
                        header:
                        /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_fixedDataTable.Cell, /* istanbul ignore next */{ __source: { fileName: _jsxFileName, lineNumber: 281 }, __self: this },
                            /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'gorToolHeaderEl', __source: { fileName: _jsxFileName, lineNumber: 282 }, __self: this },

                                /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_reactIntl.FormattedMessage, /* istanbul ignore next */{ id: 'sysController.table.location', description: 'Location',
                                    defaultMessage: 'LOCATION', __source: { fileName: _jsxFileName, lineNumber: 284 }, __self: this }),
                                /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'gorToolHeaderSubText', __source: { fileName: _jsxFileName, lineNumber: 286 }, __self: this }))),



                        cell: /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_commonFunctionsDataTable.TextCell, /* istanbul ignore next */{ data: dataList, classKey: "location", childrenClass: 'location', childColumnKey: 'zone_id', __source: { fileName: _jsxFileName, lineNumber: 290 }, __self: this },
                            /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'span', /* istanbul ignore next */{ __source: { fileName: _jsxFileName, lineNumber: 291 }, __self: this })),

                        fixed: true,
                        width: this.state.columnWidths.location,
                        isResizable: true, __source: { fileName: _jsxFileName, lineNumber: 278 }, __self: this }),

                    /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_fixedDataTable.Column, /* istanbul ignore next */{
                        columnKey: "ethernetText",

                        header:
                        /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_fixedDataTable.Cell, /* istanbul ignore next */{ __source: { fileName: _jsxFileName, lineNumber: 301 }, __self: this },
                            /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'gorToolHeaderEl', __source: { fileName: _jsxFileName, lineNumber: 302 }, __self: this },

                                /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_reactIntl.FormattedMessage, /* istanbul ignore next */{ id: 'sysController.table.conDetails', description: 'Status for PPS',
                                    defaultMessage: 'CONNECTION DETAILS', __source: { fileName: _jsxFileName, lineNumber: 304 }, __self: this }),
                                /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'gorToolHeaderSubText', __source: { fileName: _jsxFileName, lineNumber: 306 }, __self: this }))),



                        cell: /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_commonFunctionsDataTable.ConnectionDetailsCell, /* istanbul ignore next */{ data: dataList, subColumnKey: "zigbeeText", classKey: "connectionDetails", __source: { fileName: _jsxFileName, lineNumber: 310 }, __self: this },
                            /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_reactIntl.FormattedMessage, /* istanbul ignore next */{ id: 'sysController.table.ethernetStatus', description: 'sysController.table.ethernetStatus',
                                defaultMessage: 'Ethernet Network: ', __source: { fileName: _jsxFileName, lineNumber: 311 }, __self: this }),

                            /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_reactIntl.FormattedMessage, /* istanbul ignore next */{ id: 'sysController.table.zigbeeStatus', description: 'sysController.table.zigbeeStatus',
                                defaultMessage: 'Zigbee Network: ', __source: { fileName: _jsxFileName, lineNumber: 314 }, __self: this })),



                        fixed: true,
                        width: this.state.columnWidths.connectionDetails,
                        isResizable: true, __source: { fileName: _jsxFileName, lineNumber: 297 }, __self: this }),

                    /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_fixedDataTable.Column, /* istanbul ignore next */{
                        columnKey: 'action_triggered_text',
                        header:
                        /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_fixedDataTable.Cell, /* istanbul ignore next */{ __source: { fileName: _jsxFileName, lineNumber: 326 }, __self: this },
                            /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'gorToolHeaderEl', __source: { fileName: _jsxFileName, lineNumber: 327 }, __self: this },

                                /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_reactIntl.FormattedMessage, /* istanbul ignore next */{ id: 'sysController.table.operatingMode', description: 'Status for PPS',
                                    defaultMessage: 'OPERATING MODE', __source: { fileName: _jsxFileName, lineNumber: 329 }, __self: this }),
                                /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'gorToolHeaderSubText', __source: { fileName: _jsxFileName, lineNumber: 331 }, __self: this }))),





                        cell: /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_commonFunctionsDataTable.OperatingModeCell, /* istanbul ignore next */{ data: dataList, subColumnKey: "sensor_activated_text", classKey: "action_triggered", __source: { fileName: _jsxFileName, lineNumber: 337 }, __self: this }),
                        fixed: true,
                        width: this.state.columnWidths.operatingMode,
                        isResizable: true, __source: { fileName: _jsxFileName, lineNumber: 323 }, __self: this })),



                !this.props.controllers.length && /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'gor-no-data', __source: { fileName: _jsxFileName, lineNumber: 344 }, __self: this }, /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_reactIntl.FormattedMessage, /* istanbul ignore next */{ id: 'sysControllers.table.noData',
                        description: 'No data message for PPStable',
                        defaultMessage: 'No Controllers Found', __source: { fileName: _jsxFileName, lineNumber: 344 }, __self: this }))));


    }}


SystemControllers.contextTypes = {
    intl: /* istanbul ignore next */_react2.default.PropTypes.object.isRequired };

function mapStateToProps(state, ownProps) {
    return {
        controllers: state.sysControllersReducer.controllers || [],
        hasDataChanged: state.sysControllersReducer.hasDataChanged,
        socketAuthorized: state.recieveSocketActions.socketAuthorized,
        wsSubscriptionData: state.recieveSocketActions.socketDataSubscriptionPacket };


}

function mapDispatchToProps(dispatch) {
    return {
        initDataSentCall: function /* istanbul ignore next */initDataSentCall(data) {dispatch( /* istanbul ignore next */(0, _socketActions.setWsAction)({ type: /* istanbul ignore next */_frontEndConstants.WS_ONSEND, data: data }));} };

} /* istanbul ignore next */exports.default =



/* istanbul ignore next */(0, _reactRedux.connect)(mapStateToProps, mapDispatchToProps)( /* istanbul ignore next */(0, _reactDimensions2.default)()( /* istanbul ignore next */(0, _reactRouter.withRouter)(SystemControllers)));