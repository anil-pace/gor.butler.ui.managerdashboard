/* istanbul ignore next */'use strict';Object.defineProperty(exports, "__esModule", { value: true });var _jsxFileName = '/Users/raja.d/GOR/gor.butler.ui.managerdashboard/src/components/login/loginForm.js';var /* istanbul ignore next */_react = require('react'); /* istanbul ignore next */var _react2 = _interopRequireDefault(_react);
var /* istanbul ignore next */_loginAction = require('../../actions/loginAction');
var /* istanbul ignore next */_validationActions = require('../../actions/validationActions');
var /* istanbul ignore next */_reactRedux = require('react-redux');
var /* istanbul ignore next */_frontEndConstants = require('../../constants/frontEndConstants');
var /* istanbul ignore next */_messageConstants = require('../../constants/messageConstants');
var /* istanbul ignore next */_configConstants = require('../../constants/configConstants');
var /* istanbul ignore next */_reactIntl = require('react-intl');
var /* istanbul ignore next */_fieldCheck = require('../../utilities/fieldCheck'); /* istanbul ignore next */function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}

class LoginForm extends /* istanbul ignore next */_react2.default.Component {
    constructor(props)
    {
        super(props);
    }
    _checkUser() {
        let userid = this.userName.value,userNameCheck;
        userNameCheck = /* istanbul ignore next */(0, _fieldCheck.emptyField)(userid);
        this.props.validateID(userNameCheck);
        return userNameCheck.type;
    }
    _typing(Field) {
        if (Field === 1)
        this.userField.className = /* istanbul ignore next */_frontEndConstants.TYPING;else

        this.passField.className = /* istanbul ignore next */_frontEndConstants.TYPING;
    }
    _checkPass() {
        let password = this.password.value.trim(),loginPassInfo;
        loginPassInfo = /* istanbul ignore next */(0, _fieldCheck.emptyField)(password);
        this.props.validatePass(loginPassInfo);
        return loginPassInfo.type;
    }
    _handleSubmit(e) {
        e.preventDefault();
        if (!window.navigator.onLine)
        {
            this.props.loginError( /* istanbul ignore next */_messageConstants.NO_NET);
            return;
        }
        if (!this.props.userNameCheck.type || !this.props.passWordCheck.type)
        {
            if (!this._checkUser())
            return;
            if (!this._checkPass())
            return;
        }
        let formdata = {
            'username': this.userName.value,
            'password': this.password.value };


        let loginData = {
            'url': /* istanbul ignore next */_configConstants.LOGIN_URL,
            'formdata': formdata,
            'method': /* istanbul ignore next */_frontEndConstants.POST,
            'cause': /* istanbul ignore next */_frontEndConstants.AUTH_LOGIN,
            'contentType': /* istanbul ignore next */_frontEndConstants.APP_JSON,
            'accept': /* istanbul ignore next */_frontEndConstants.APP_JSON };

        sessionStorage.setItem('nextView', 'md');
        this.props.setLoginSpinner(true);
        this.props.setUsername(formdata.username);
        this.props.authLoginData(loginData);
    }

    render() {
        // remove the internationalization from 'Butler' as it is our brand and also 'TM' as it is universal term
        return (
            /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'form', /* istanbul ignore next */{ action: '#', id: 'loginForm', ref: node => {this.loginForm = node;},
                    onSubmit: e => this._handleSubmit(e), __source: { fileName: _jsxFileName, lineNumber: 70 }, __self: this },
                /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'gor-login-mid', __source: { fileName: _jsxFileName, lineNumber: 72 }, __self: this },
                    /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'gor-upper-box', __source: { fileName: _jsxFileName, lineNumber: 73 }, __self: this },
                        /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'gor-login-head', __source: { fileName: _jsxFileName, lineNumber: 74 }, __self: this },

                            /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'span', /* istanbul ignore next */{ className: 'gor-lg-txt', __source: { fileName: _jsxFileName, lineNumber: 76 }, __self: this }, /* istanbul ignore next */'Butler'),
                            /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'sup', /* istanbul ignore next */{ __source: { fileName: _jsxFileName, lineNumber: 77 }, __self: this }, /* istanbul ignore next */'TM')),

                        /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'p', /* istanbul ignore next */{ __source: { fileName: _jsxFileName, lineNumber: 79 }, __self: this },
                            /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_reactIntl.FormattedMessage, /* istanbul ignore next */{ id: 'login.butler.manageInterface',
                                defaultMessage: 'Management Interface',
                                description: 'Text for Management Interface', __source: { fileName: _jsxFileName, lineNumber: 80 }, __self: this }))),


                    this.props.loginInfo.type === /* istanbul ignore next */_frontEndConstants.ERROR && /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'gor-login-auth-error', __source: { fileName: _jsxFileName, lineNumber: 85 }, __self: this }, /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'gor-login-error', __source: { fileName: _jsxFileName, lineNumber: 85 }, __self: this }),
                        this.props.loginInfo.msg),

                    /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'section', /* istanbul ignore next */{ __source: { fileName: _jsxFileName, lineNumber: 88 }, __self: this },
                        /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'gor-login-field' + (this.props.userNameCheck.type === /* istanbul ignore next */_frontEndConstants.ERROR || this.props.loginInfo.type === /* istanbul ignore next */_frontEndConstants.ERROR ? ' gor-input-error' : ' gor-input-ok'), ref: node => {this.userField = node;}, __source: { fileName: _jsxFileName, lineNumber: 89 }, __self: this },
                            /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: this.props.userNameCheck.type === /* istanbul ignore next */_frontEndConstants.ERROR || this.props.loginInfo.type === /* istanbul ignore next */_frontEndConstants.ERROR ? 'gor-login-user-error' : 'gor-login-user', __source: { fileName: _jsxFileName, lineNumber: 90 }, __self: this }),
                            /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'input', /* istanbul ignore next */{ className: 'field', onInput: this._typing.bind(this, 1), onBlur: this._checkUser.bind(this), type: 'text', id: 'username',
                                placeholder: this.props.intlMessages["login.form.username"],
                                ref: node => {this.userName = node;}, __source: { fileName: _jsxFileName, lineNumber: 91 }, __self: this }))),




                    this.props.userNameCheck ? this.props.userNameCheck.type === /* istanbul ignore next */_frontEndConstants.ERROR ?
                    /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'gor-login-usr-error', __source: { fileName: _jsxFileName, lineNumber: 99 }, __self: this },
                        /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_reactIntl.FormattedMessage, /* istanbul ignore next */{ id: 'login.butler.error.username',
                            defaultMessage: 'Please enter your username', description: 'Text for missing username error', __source: { fileName: _jsxFileName, lineNumber: 100 }, __self: this })) :
                    '' : '',

                    /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'section', /* istanbul ignore next */{ __source: { fileName: _jsxFileName, lineNumber: 104 }, __self: this },
                        /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'gor-login-field' + (this.props.passWordCheck.type === /* istanbul ignore next */_frontEndConstants.ERROR || this.props.loginInfo.type === /* istanbul ignore next */_frontEndConstants.ERROR ? ' gor-input-error' : ' gor-input-ok'), ref: node => {this.passField = node;}, __source: { fileName: _jsxFileName, lineNumber: 105 }, __self: this },
                            /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: this.props.passWordCheck.type === /* istanbul ignore next */_frontEndConstants.ERROR || this.props.loginInfo.type === /* istanbul ignore next */_frontEndConstants.ERROR ? 'gor-login-password-error' : 'gor-login-password', __source: { fileName: _jsxFileName, lineNumber: 106 }, __self: this }),
                            /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'input', /* istanbul ignore next */{ className: 'field', onInput: this._typing.bind(this, 2), onBlur: this._checkPass.bind(this), type: 'password', id: 'password',
                                placeholder: this.props.intlMessages["login.form.password"],
                                ref: node => {this.password = node;}, __source: { fileName: _jsxFileName, lineNumber: 107 }, __self: this }))),


                    this.props.passWordCheck ? this.props.passWordCheck.type === /* istanbul ignore next */_frontEndConstants.ERROR ?
                    /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'gor-login-usr-error', __source: { fileName: _jsxFileName, lineNumber: 113 }, __self: this },
                        /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_reactIntl.FormattedMessage, /* istanbul ignore next */{ id: 'login.butler.error.password',
                            defaultMessage: 'Please enter your password', description: 'Text for missing password error', __source: { fileName: _jsxFileName, lineNumber: 114 }, __self: this })) :
                    '' : '',

                    /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'section', /* istanbul ignore next */{ __source: { fileName: _jsxFileName, lineNumber: 118 }, __self: this },
                        /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'input', /* istanbul ignore next */{ type: 'submit', className: 'gor-login-btn', value: this.props.intlMessages["login.form.button"], __source: { fileName: _jsxFileName, lineNumber: 119 }, __self: this }), /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'br', /* istanbul ignore next */{ __source: { fileName: _jsxFileName, lineNumber: 119 }, __self: this })))));




    }}
;

function mapStateToProps(state, ownProps) {
    return {
        intlMessages: state.intl.messages || {},
        userNameCheck: state.appInfo.idInfo || {},
        loginInfo: state.appInfo.loginInfo || {},
        passWordCheck: state.appInfo.passwordInfo || {},
        loginSpinner: state.spinner.loginSpinner };

}
function mapDispatchToProps(dispatch) {
    return {
        authLoginData: function /* istanbul ignore next */authLoginData(params) {dispatch( /* istanbul ignore next */(0, _loginAction.authLoginData)(params));},
        validateID: function /* istanbul ignore next */validateID(data) {dispatch( /* istanbul ignore next */(0, _validationActions.validateID)(data));},
        validatePass: function /* istanbul ignore next */validatePass(data) {dispatch( /* istanbul ignore next */(0, _validationActions.validatePassword)(data));},
        setLoginSpinner: function /* istanbul ignore next */setLoginSpinner(data) {dispatch( /* istanbul ignore next */(0, _loginAction.setLoginSpinner)(data));},
        setUsername: function /* istanbul ignore next */setUsername(data) {dispatch( /* istanbul ignore next */(0, _loginAction.setUsername)(data));},
        loginError: function /* istanbul ignore next */loginError(data) {dispatch( /* istanbul ignore next */(0, _validationActions.loginError)(data));} };

} /* istanbul ignore next */exports.default =
/* istanbul ignore next */(0, _reactRedux.connect)(mapStateToProps, mapDispatchToProps)(LoginForm);