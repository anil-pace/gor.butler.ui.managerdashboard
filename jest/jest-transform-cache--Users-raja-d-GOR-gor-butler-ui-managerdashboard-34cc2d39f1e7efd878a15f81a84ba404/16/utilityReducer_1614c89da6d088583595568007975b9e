/* istanbul ignore next */"use strict";Object.defineProperty(exports, "__esModule", { value: true });exports.

















utilityValidations = utilityValidations;var /* istanbul ignore next */_frontEndConstants = require("../constants/frontEndConstants"); /**
                                                                                                                                       * @param  {State Object}
                                                                                                                                       * @param  {Action object}
                                                                                                                                       * @return {[Object] updated state}
                                                                                                                                       */ //Name to be corrected
function utilityValidations(state = {}, action) {switch (action.type) {case /* istanbul ignore next */_frontEndConstants.INVOICE_VALIDATION:var res = action.data;if (res.alert_data) {return Object.assign({}, state, {
                    invalidInvoice: true });

            } else {
                return Object.assign({}, state, {
                    invalidInvoice: false });

            }
        case /* istanbul ignore next */_frontEndConstants.MASTER_UPLOAD_PROCESSING:
            return Object.assign({}, state, {
                isMasterUploadProcessing: action.data });

        case /* istanbul ignore next */_frontEndConstants.MASTER_UPLOAD_SUCCESS:
            if (action.data.alert_data) {
                return Object.assign({}, state, {
                    masterDataUploadSuccess: false,
                    errorCode: action.data.alert_data[0].code,
                    maxsize: action.data.alert_data[0].details.max_size });

            } else {
                let newFileUploaded = !state.newFileUploaded;
                return Object.assign({}, state, {
                    masterDataUploadSuccess: action.data.data ? true : false,
                    newFileUploaded: newFileUploaded,
                    errorCode: "",
                    maxsize: "" });

            }
        case /* istanbul ignore next */_frontEndConstants.UPLOAD_HISTORY:
            var uploadHistChanged = !state.uploadHistChanged;
            return Object.assign({}, state, {
                uploadHistoryData: action.data.mdm_upload_info || [],
                uploadHistChanged: uploadHistChanged });

        case /* istanbul ignore next */_frontEndConstants.UPDATE_FILE_SIZE:
            return Object.assign({}, state, {
                maxfilesizelimit: action.data.file_content_length || [] });

        case /* istanbul ignore next */_frontEndConstants.UTILITY_TAB_REFRESHED:
            return Object.assign({}, state, {
                utilityTabRefreshed: new Date() });


        case /* istanbul ignore next */_frontEndConstants.STOCK_LEDGER_SKU_VALIDATION:
            var res = action.data;
            if (res.alert_data) {
                return Object.assign({}, state, {
                    invalidStockLedgerSKU: true });

            } else {
                return Object.assign({}, state, {
                    invalidStockLedgerSKU: false });

            }

        case /* istanbul ignore next */_frontEndConstants.CLEAR_STOCK_LEDGER_SKU_VALIDATION:
            return Object.assign({}, state, {
                invalidStockLedgerSKU: null });


        case /* istanbul ignore next */_frontEndConstants.REPORTS_HISTORY:
            return Object.assign({}, state, {
                reportsHistory: action.data.data || [] });

        case /* istanbul ignore next */_frontEndConstants.GRN_HISTORY:
            return Object.assign({}, state, {
                grnHistory: action.data.data || [] });


        default:
            return state;}

}