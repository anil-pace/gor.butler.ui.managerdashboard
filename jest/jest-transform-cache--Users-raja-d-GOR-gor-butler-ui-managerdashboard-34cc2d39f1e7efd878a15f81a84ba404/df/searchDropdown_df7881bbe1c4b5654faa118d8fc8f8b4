/* istanbul ignore next */'use strict';Object.defineProperty(exports, "__esModule", { value: true });var _jsxFileName = '/Users/raja.d/GOR/gor.butler.ui.managerdashboard/src/components/dropdown/searchDropdown.js';var /* istanbul ignore next */_react = require('react'); /* istanbul ignore next */var _react2 = _interopRequireDefault(_react);
var /* istanbul ignore next */_reactDom = require('react-dom'); /* istanbul ignore next */var _reactDom2 = _interopRequireDefault(_reactDom);
var /* istanbul ignore next */_frontEndConstants = require('../../constants/frontEndConstants'); /* istanbul ignore next */function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}

class SearchDropdown extends /* istanbul ignore next */_react.Component {
  constructor(props) {
    super(props);
    this.state = { selected: "Search and select", showList: false, currentQuery: "", currentList: "", checkedIndex: "", totalChecked: 0, tabSelected: /* istanbul ignore next */_frontEndConstants.SHOW_ALL_ENTRIES };
    this._showList = this._showList.bind(this);
    this._handleDocumentClick = this._handleDocumentClick.bind(this);
  }

  componentWillReceiveProps(nextProps) {
    var listLength = nextProps.list && nextProps.list.length ? nextProps.list.length : 0;
    var initialIndex = Array.from(Array(listLength).keys());
    var checkedIndex = new Array(listLength).fill(false);
    var currentTab = this.state.tabSelected;
    this.state = { selected: "Search and select", showList: false, currentQuery: "", currentList: initialIndex, checkedIndex: checkedIndex, totalChecked: 0, tabSelected: currentTab ? currentTab : /* istanbul ignore next */_frontEndConstants.SHOW_ALL_ENTRIES };
    this._showList = this._showList.bind(this);
  }

  componentWillMount() {
    document.addEventListener('click', this._handleDocumentClick, false);
    document.addEventListener('touchend', this._handleDocumentClick, false);
  }

  componentWillUnmount() {
    document.removeEventListener('click', this._handleDocumentClick, false);
    document.removeEventListener('touchend', this._handleDocumentClick, false);
  }

  _querySubmit(e) {
    var list = this.props.list;
    var searchQuery = this.pageNum.value,filtered = [];
    for (var i = 0; i < list.length; i++) {
      if (list[i].value.indexOf(searchQuery) > -1) {
        filtered.push(i);
      }
    }
    this.setState({ currentList: filtered, currentQuery: this.pageNum.value });
  }

  _selectThis(i) {
    var placeholderList = "",totalChecked = 0;
    var checkedState = this.state.checkedIndex,listToDispatch = [];
    checkedState[i] = !checkedState[i];
    for (let i = this.props.list.length - 1; i >= 0; i--) {
      if (checkedState[i]) {
        placeholderList = placeholderList === "" ? this.props.list[i].value : placeholderList + ", " + this.props.list[i].value;
        listToDispatch.push(this.props.list[i].value);
        totalChecked++;
      }
    }
    this.props.selectedItems(listToDispatch);
    this.setState({ checkedIndex: checkedState, selected: placeholderList, totalChecked: totalChecked, showList: true });
  }

  _showList() {
    this.setState({ showList: true });
  }

  _hideList() {
    this.setState({ showList: false });
  }

  _selectTab(tabSelected) {
    this.setState({ tabSelected: tabSelected });
  }

  _clearQuery() {
    this.pageNum.value = "";
    this._querySubmit();
    this.setState({ currentQuery: "" });
  }

  _renderList() {

    var items = [];
    var list = this.state.currentList;
    var totalList = this.props.list;


    for (var i = 0; i < list.length; i++) {
      var item = totalList[list[i]];
      var checkedState = this.state.checkedIndex;
      if (checkedState[list[i]] || this.state.tabSelected === /* istanbul ignore next */_frontEndConstants.SHOW_ALL_ENTRIES) {
        items.push( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ __source: { fileName: _jsxFileName, lineNumber: 87 }, __self: this },
          /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'gor-inline', __source: { fileName: _jsxFileName, lineNumber: 88 }, __self: this },
            /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'input', /* istanbul ignore next */{ type: 'checkbox', checked: checkedState[list[i]], onChange: this._selectThis.bind(this, list[i]), __source: { fileName: _jsxFileName, lineNumber: 89 }, __self: this })),

          /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'gor-inline', __source: { fileName: _jsxFileName, lineNumber: 91 }, __self: this },
            item.value)));


      }
    }
    return items;
  }

  _handleDocumentClick() {
    if (! /* istanbul ignore next */_reactDom2.default.findDOMNode(this).contains(event.target)) {
      this.setState({ showList: false });
    }
  }

  render() {
    var dropdownOptions = this._renderList();
    return (
      /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ style: { width: '100%' }, __source: { fileName: _jsxFileName, lineNumber: 109 }, __self: this },
        /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: this.state.showList ? "gor-searchDropdown-input-wrap-open" : "gor-searchDropdown-input-wrap", onClick: () => {this._showList();}, __source: { fileName: _jsxFileName, lineNumber: 110 }, __self: this },
          /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'gor-searchDropdown-icon-wrap', __source: { fileName: _jsxFileName, lineNumber: 111 }, __self: this },
            /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'searchbox-magnifying-glass-icon', __source: { fileName: _jsxFileName, lineNumber: 112 }, __self: this })),

          /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'input', /* istanbul ignore next */{ type: 'text', onChange: this._querySubmit.bind(this),
            style: { border: 'none', height: '18px', width: "67%" },
            placeholder: this.state.selected,
            ref: node => {this.pageNum = node;},
            value: this.state.currentQuery, __source: { fileName: _jsxFileName, lineNumber: 114 }, __self: this }),

          this.state.currentQuery ?
          /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'gor-searchDropdown-icon-wrap', __source: { fileName: _jsxFileName, lineNumber: 121 }, __self: this },
            /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'gor-close', onClick: this._clearQuery.bind(this), __source: { fileName: _jsxFileName, lineNumber: 122 }, __self: this })) :

          ""),

        /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: this.state.showList ? "gor-dropdown-list" : "gor-display-none", __source: { fileName: _jsxFileName, lineNumber: 126 }, __self: this },
          /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'gor-searchDropdown-tab-wrap', __source: { fileName: _jsxFileName, lineNumber: 127 }, __self: this },
            /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: this.state.tabSelected === /* istanbul ignore next */_frontEndConstants.SHOW_ALL_ENTRIES ? "gor-searchDropdown-tab-selected" : "gor-searchDropdown-tab", onClick: this._selectTab.bind(this, /* istanbul ignore next */_frontEndConstants.SHOW_ALL_ENTRIES), __source: { fileName: _jsxFileName, lineNumber: 128 }, __self: this },
              /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'gor-searchDropdown-tab-block', __source: { fileName: _jsxFileName, lineNumber: 129 }, __self: this }, /* istanbul ignore next */'Available')),



            /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: this.state.tabSelected === /* istanbul ignore next */_frontEndConstants.SHOW_SELECTED_ENTRIES ? "gor-searchDropdown-tab-selected" : "gor-searchDropdown-tab", onClick: this._selectTab.bind(this, /* istanbul ignore next */_frontEndConstants.SHOW_SELECTED_ENTRIES), __source: { fileName: _jsxFileName, lineNumber: 133 }, __self: this },
              /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'gor-searchDropdown-tab-block', __source: { fileName: _jsxFileName, lineNumber: 134 }, __self: this },
                this.state.totalChecked, /* istanbul ignore next */' Selected'))),



          /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'gor-searchDropdown-list', __source: { fileName: _jsxFileName, lineNumber: 139 }, __self: this },
            dropdownOptions.length ? dropdownOptions : /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'gor-searchDropdown-noData', __source: { fileName: _jsxFileName, lineNumber: 140 }, __self: this }, /* istanbul ignore next */'No Data')))));




  }} /* istanbul ignore next */exports.default =


SearchDropdown;