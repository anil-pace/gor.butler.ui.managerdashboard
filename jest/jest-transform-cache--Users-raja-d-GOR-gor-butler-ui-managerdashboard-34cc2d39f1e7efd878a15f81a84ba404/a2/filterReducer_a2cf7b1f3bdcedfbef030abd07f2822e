/* istanbul ignore next */"use strict";Object.defineProperty(exports, "__esModule", { value: true });exports.









filterInfo = filterInfo;var /* istanbul ignore next */_frontEndConstants = require("../constants/frontEndConstants"); /**
                                                                                                                       * @param  {State Object}
                                                                                                                       * @param  {Action object}
                                                                                                                       * @return {[Object] updated state}
                                                                                                                       */function filterInfo(state = {}, action) {switch (action.type) {case /* istanbul ignore next */_frontEndConstants.SHOW_FILTER:return Object.assign({}, state, { "filterState": action.data });




    case /* istanbul ignore next */_frontEndConstants.BOT_TOGGLE_FILTER:
      return Object.assign({}, state, {
        "botToggleFilter": action.data });



    case /* istanbul ignore next */_frontEndConstants.PPS_TOGGLE_FILTER:
      return Object.assign({}, state, {
        "ppsToggleFilter": action.data });



    case /* istanbul ignore next */_frontEndConstants.CS_TOGGLE_FILTER:
      return Object.assign({}, state, {
        "csToggleFilter": action.data });



    case /* istanbul ignore next */_frontEndConstants.WAVES_TOGGLE_FILTER:
      return Object.assign({}, state, {
        "wavesToggleFilter": action.data });



    case /* istanbul ignore next */_frontEndConstants.ORDERS_TOGGLE_FILTER:
      return Object.assign({}, state, {
        "ordersToggleFilter": action.data });



    case /* istanbul ignore next */_frontEndConstants.AUDIT_TOGGLE_FILTER:
      return Object.assign({}, state, {
        "auditToggleFilter": action.data });



    case /* istanbul ignore next */_frontEndConstants.USER_TOGGLE_FILTER:
      return Object.assign({}, state, {
        "userToggleFilter": action.data });



    case /* istanbul ignore next */_frontEndConstants.IS_FILTER_APPLIED: //This reducer will update the the isFilterApplied value with true/false
      return Object.assign({}, state, {
        "isFilterApplied": action.data });


    case /* istanbul ignore next */_frontEndConstants.SET_DEFAULT_RANGE: //This reducer will update the the isFilterApplied value with true/false
      return Object.assign({}, state, {
        "deaultSliderRange": action.data });




    case /* istanbul ignore next */_frontEndConstants.TOGGLE_BUTTON_BOT: //This reducer will update the the botFilterStatus value with latest applied filter
      return Object.assign({}, state, {
        "botFilterStatus": action.data });


    case /* istanbul ignore next */_frontEndConstants.CHARGING_FILTER_VALUE: //This reducer will update the the chargingFilterStatus value with latest applied filter
      return Object.assign({}, state, {
        "chargingFilterStatus": action.data });


    case /* istanbul ignore next */_frontEndConstants.WAVE_FILTER_VALUE: //This reducer will update the the waveFilterStatus value with latest applied filter
      return Object.assign({}, state, {
        "waveFilterStatus": action.data });



    case /* istanbul ignore next */_frontEndConstants.PPS_FILTER_VALUE: //This reducer will update the the ppsFilterState value with latest applied filter
      return Object.assign({}, state, {
        "ppsFilterState": action.data });



    case /* istanbul ignore next */_frontEndConstants.AUDIT_FILTER_VALUE: //This reducer will update the the ppsFilterState value with latest applied filter
      return Object.assign({}, state, {
        "auditFilterStatus": action.data });



    case /* istanbul ignore next */_frontEndConstants.ORDER_FILTER_VALUE: //This reducer will update the the ppsFilterState value with latest applied filter
      return Object.assign({}, state, {
        "orderFilterStatus": action.data });



    case /* istanbul ignore next */_frontEndConstants.USER_FILTER_VALUE: //This reducer will update the the userFilterStatus value with latest applied filter
      return Object.assign({}, state, {
        "userFilterStatus": action.data });



    case /* istanbul ignore next */_frontEndConstants.BUTLER_FILTER_STATE: //This reducer will update the the butlerFilterState value with latest applied filter
      return Object.assign({}, state, {
        "butlerFilterState": action.data });



    case /* istanbul ignore next */_frontEndConstants.AUDIT_FILTER_STATE: //This reducer will update the the butlerFilterState value with latest applied filter
      return Object.assign({}, state, {
        "auditFilterState": action.data });


    case /* istanbul ignore next */_frontEndConstants.ORDER_FILTER_STATE: //This reducer will update the the butlerFilterState value with latest applied filter
      return Object.assign({}, state, {
        "orderFilterState": action.data });



    case /* istanbul ignore next */_frontEndConstants.CHARGINGSTATION_FILTER_STATE: //This reducer will update the the chargingstationfilterState value with latest applied filter
      return Object.assign({}, state, {
        "chargingstationfilterState": action.data });


    case /* istanbul ignore next */_frontEndConstants.PPS_FILTER_STATE: //This reducer will update the the ppsfilterState value with latest applied filter
      return Object.assign({}, state, {
        "ppsfilterState": action.data });


    case /* istanbul ignore next */_frontEndConstants.WAVE_FILTER_STATE: //This reducer will update the the wavefilterState value with latest applied filter
      return Object.assign({}, state, {
        "wavefilterState": action.data });



    case /* istanbul ignore next */_frontEndConstants.USER_FILTER_STATE: //This reducer will update the the userfilterState value with latest applied filter
      return Object.assign({}, state, {
        "userfilterState": action.data });



    case /* istanbul ignore next */_frontEndConstants.FILTER_APPLY_FLAG: //This reducer will update the the Apply flag value true/false
      return Object.assign({}, state, {
        "filterApplyFlag": action.data });




    default:
      return state;}

}