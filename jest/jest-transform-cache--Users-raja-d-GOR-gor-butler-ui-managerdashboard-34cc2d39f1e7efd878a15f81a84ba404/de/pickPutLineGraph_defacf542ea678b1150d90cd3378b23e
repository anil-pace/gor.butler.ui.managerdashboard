/* istanbul ignore next */'use strict';Object.defineProperty(exports, "__esModule", { value: true });var _jsxFileName = '/Users/raja.d/GOR/gor.butler.ui.managerdashboard/src/components/inventory/pickPutLineGraph.js'; /**
                                                                                                                                                                                                                          * Container for PickPutLineGraph 
                                                                                                                                                                                                                          * 
                                                                                                                                                                                                                          */
var /* istanbul ignore next */_react = require('react'); /* istanbul ignore next */var _react2 = _interopRequireDefault(_react);
var /* istanbul ignore next */_multiLineGraph = require('../graphd3/multiLineGraph'); /* istanbul ignore next */var _multiLineGraph2 = _interopRequireDefault(_multiLineGraph);
var /* istanbul ignore next */_frontEndConstants = require('../../constants/frontEndConstants');
var /* istanbul ignore next */_reactIntl = require('react-intl'); /* istanbul ignore next */function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}

//Mesages for internationalization
const messages = /* istanbul ignore next */(0, _reactIntl.defineMessages)({
  toolTipPut: {
    id: 'inventory.linechart.toolTipPut',
    description: 'Text for put in tooltip',
    defaultMessage: "Put" },

  toolTipPick: {
    id: 'inventory.linechart.toolTipPick',
    description: 'Text for pick in tooltip',
    defaultMessage: "Picked" },

  toolTipEntity: {
    id: 'inventory.linechart.toolTipEntity',
    description: 'Text inventory entity',
    defaultMessage: "Items" },

  noDataText: {
    id: "inventory.linechart.noDataText",
    defaultMessage: "No Item Movement" },

  lineChartTodayTxt: {
    id: 'inventory.linechart.today',
    description: 'Text to show today',
    defaultMessage: "Today's" } });






class PickPutLineGraph extends /* istanbul ignore next */_react2.default.Component {

  _processData() {
    var recreatedData = JSON.parse(JSON.stringify(this.props.recreatedData)),
    processedData = [];

    for (let k in recreatedData) {
      let dataObj = recreatedData[k].graphInfo;
      dataObj.toolTipData = {
        date: this.context.intl.formatDate(dataObj.date,
        {
          year: 'numeric',
          month: 'short',
          day: '2-digit' }),

        put: this.context.intl.formatMessage(messages.toolTipPut) + ": " + dataObj.items_put + " " + this.context.intl.formatMessage(messages.toolTipEntity),
        pick: this.context.intl.formatMessage(messages.toolTipPick) + ": " + dataObj.items_picked + " " + this.context.intl.formatMessage(messages.toolTipEntity) };

      processedData.push(dataObj);
    }

    processedData.sort(function (a, b) {
      var x = a["customData"];var y = b["customData"];
      return x < y ? -1 : x > y ? 1 : 0;
    });


    return processedData;
  }
  shouldComponentUpdate(nextProps) {
    return this.props.hasDataChanged !== nextProps.hasDataChanged;
  }
  render() {
    var processedData = this._processData();
    var config = Object.assign({}, /* istanbul ignore next */_frontEndConstants.INVENTORY_LINE_CONFIG);
    config.noDataText = this.context.intl.formatMessage(messages.noDataText);
    config.today = this.context.intl.formatMessage(messages.lineChartTodayTxt);
    config.breakMonth = this.context.intl.formatDate(Date.now(), { month: 'short' });
    return (
      /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ __source: { fileName: _jsxFileName, lineNumber: 80 }, __self: this },
        /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_multiLineGraph2.default, /* istanbul ignore next */{ hasDataChanged: this.props.hasDataChanged, config: config, inventoryData: processedData || [], __source: { fileName: _jsxFileName, lineNumber: 81 }, __self: this })));


  }}
;
PickPutLineGraph.propTypes = {
  inventoryData: /* istanbul ignore next */_react2.default.PropTypes.array,
  hasDataChanged: /* istanbul ignore next */_react2.default.PropTypes.bool,
  noData: /* istanbul ignore next */_react2.default.PropTypes.bool };


PickPutLineGraph.contextTypes = {
  intl: /* istanbul ignore next */_react2.default.PropTypes.object.isRequired }; /* istanbul ignore next */exports.default =

PickPutLineGraph;