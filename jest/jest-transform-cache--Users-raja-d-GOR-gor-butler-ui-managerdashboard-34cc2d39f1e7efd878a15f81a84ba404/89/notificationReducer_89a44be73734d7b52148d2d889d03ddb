/* istanbul ignore next */"use strict";Object.defineProperty(exports, "__esModule", { value: true });exports.















notificationReducer = notificationReducer;var /* istanbul ignore next */_frontEndConstants = require("../constants/frontEndConstants"); /**
                                                                                                                                         * @param  {State Object}
                                                                                                                                         * @param  {Action object}
                                                                                                                                         * @return {[Object] updated state}
                                                                                                                                         */function notificationReducer(state = {}, action) {switch (action.type) {case /* istanbul ignore next */_frontEndConstants.SEARCHED_NOTIFICATIONS_DATA:return Object.assign({}, state, { "searchedNotificationData": state.searchedNotificationData ? state.searchedNotificationData.concat(action.data) : [].concat(action.data),
        "searchApplied": true,
        "searchDataFound": action.data.length ? true : false });

      break;
    case /* istanbul ignore next */_frontEndConstants.WS_NOTIFICATIONS_DATA:
      let wsNotificationData;
      let isNotificationRead = state.isNotificationRead;
      let readList = [];
      let responseData = action.data.splice(0);
      let initRespLen = responseData.length;
      if (!isNotificationRead) {
        wsNotificationData = responseData;
      } else
      {
        wsNotificationData = state.wsNotificationData ? responseData.concat(state.wsNotificationData.splice(0)) : responseData;
      }


      let epochTime = new Date().getTime();
      for (let i = 0; i < initRespLen; i++) {
        let tuple = {};
        tuple.id = responseData[i].id;
        tuple.lastRead = epochTime;
        readList.push(tuple.id);
      }

      return Object.assign({}, state, {
        "wsNotificationData": wsNotificationData,
        "unreadCount": initRespLen,
        "readNotificationList": readList,
        "isNotificationRead": false });

    case /* istanbul ignore next */_frontEndConstants.SEND_READ_INTIMATION:
      return Object.assign({}, state, {
        "unreadCount": 0,
        "isNotificationRead": true,
        "readNotificationList": [] });

    case /* istanbul ignore next */_frontEndConstants.RESET_NOTIFICATION_DATA:
      return Object.assign({}, state, {
        "searchApplied": false,
        "searchedNotificationData": [] });

    case /* istanbul ignore next */_frontEndConstants.GET_ALL_NOTIFICATIONS:
      let notificationData = action.saltParams.lazyData ? state.completeNotificationData || [] : [];
      return Object.assign({}, state, {
        "completeNotificationData": notificationData.concat(action.data),
        "hasDataChanged": !state.hasDataChanged,
        "isLoading": false,
        "isInfiniteLoading": false,
        "dataFound": action.saltParams.lazyData && !action.data.length ? false : null });

    case /* istanbul ignore next */_frontEndConstants.RESET_NOTIFICATION_TABLE_DATA:
      return Object.assign({}, state, {
        "completeNotificationData": action.data ? [] : state.completeNotificationData,
        "hasDataChanged": !state.hasDataChanged,
        "searchAppliedAllNotifications": false });

    case /* istanbul ignore next */_frontEndConstants.SET_NOTIFICATION_SPINNER:
      return Object.assign({}, state, {
        "isLoading": action.data });

    case /* istanbul ignore next */_frontEndConstants.SET_INFINITE_SPINNER:
      return Object.assign({}, state, {
        "isInfiniteLoading": action.data });

    case /* istanbul ignore next */_frontEndConstants.SEARCHED_NOTIFICATIONS_DATA_ALL:
      return Object.assign({}, state, {
        "searchedAllNotificationData": action.data,
        "isLoading": false,
        "hasDataChanged": !state.hasDataChanged,
        "searchAppliedAllNotifications": true });


    default:
      return state;}

}