/* istanbul ignore next */'use strict';Object.defineProperty(exports, "__esModule", { value: true });var _jsxFileName = '/Users/raja.d/GOR/gor.butler.ui.managerdashboard/src/containers/auditTab/auditTable.js';var /* istanbul ignore next */_react = require('react'); /* istanbul ignore next */var _react2 = _interopRequireDefault(_react);
var /* istanbul ignore next */_fixedDataTable = require('fixed-data-table');
var /* istanbul ignore next */_reactDimensions = require('react-dimensions'); /* istanbul ignore next */var _reactDimensions2 = _interopRequireDefault(_reactDimensions);
var /* istanbul ignore next */_reactIntl = require('react-intl');

var /* istanbul ignore next */_commonFunctionsDataTable = require('../../components/commonFunctionsDataTable');








var /* istanbul ignore next */_reactReduxModal = require('react-redux-modal');

var /* istanbul ignore next */_startAudit = require('./startAudit'); /* istanbul ignore next */var _startAudit2 = _interopRequireDefault(_startAudit);
var /* istanbul ignore next */_deleteAudit = require('./deleteAudit'); /* istanbul ignore next */var _deleteAudit2 = _interopRequireDefault(_deleteAudit);
var /* istanbul ignore next */_duplicateAudit = require('./duplicateAudit'); /* istanbul ignore next */var _duplicateAudit2 = _interopRequireDefault(_duplicateAudit);
var /* istanbul ignore next */_resolveAudit = require('./resolveAudit'); /* istanbul ignore next */var _resolveAudit2 = _interopRequireDefault(_resolveAudit);
var /* istanbul ignore next */_frontEndConstants = require('../../constants/frontEndConstants'); /* istanbul ignore next */function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}







const messages = /* istanbul ignore next */(0, _reactIntl.defineMessages)({
    auditPlaceholder: {
        id: 'audit.placeholder',
        description: 'audit dropdown placeholder',
        defaultMessage: "Manage Tasks" } });




class AuditTable extends /* istanbul ignore next */_react2.default.Component {
    constructor(props) {
        super(props);
        this.tableState(this.props, this);
        this._onColumnResizeEndCallback = this._onColumnResizeEndCallback.bind(this);
        this.backendSort = this.backendSort.bind(this);
    }

    componentWillReceiveProps(nextProps) {

        this.tableState(nextProps, this);
    }


    shouldComponentUpdate(nextProps) {
        if (this.props.items && nextProps.items.length === 0) {
            return false;
        }
        return true;
    }




    /**
       * Hack for fixing the bug https://work.greyorange.com/jira/browse/BSS-656
       * This has to be removed once we get rid of the fixedDataTable
       * @param  {Number} rowIndex rowindex on which the click was initiated
       */
    _handleOnClickDropdown(event, index) {
        var el = event.target;
        var elClassName = el.className.trim(),
        parentEl,siblingEl,totalRowCount = this.props.items.length - 1;
        if (elClassName !== "gor-dropdown-wrapper" && elClassName !== "gor-dropdown" && elClassName !== 'gor-audit-info-icon' && elClassName !== "gor-tool-tip-hover") {
            return;
        }
        parentEl = el.parentNode;
        while (parentEl) {
            if (parentEl.className === "fixedDataTableRowLayout_rowWrapper") {
                parentEl.parentNode.childNodes.forEach(function (node) {
                    node.style.zIndex = "0";
                });
                parentEl.style.zIndex = "300";
                if (index === totalRowCount && totalRowCount !== 0) {
                    if (elClassName !== "gor-dropdown-wrapper") {
                        siblingEl = el.parentNode.nextSibling;
                    } else
                    {
                        siblingEl = el.nextSibling;
                    }
                    siblingEl.style.bottom = '100%';
                    siblingEl.style.top = 'initial';
                }
                break;
            } else
            {
                parentEl = parentEl.parentNode;
            }
        }
    }

    tableState(nProps, current) {
        var items = nProps.items || [];
        current._dataList = new /* istanbul ignore next */_commonFunctionsDataTable.tableRenderer(items ? items.length : 0);
        current._defaultSortIndexes = [];
        current._dataList.newData = items;
        var size = current._dataList.getSize(),sortIndex = {};
        for (var index = 0; index < size; index++) {
            current._defaultSortIndexes.push(index);
        }
        if (nProps.currentHeaderOrder.colSortDirs) {
            sortIndex = nProps.currentHeaderOrder.colSortDirs;
        }
        current.state = {
            sortedDataList: current._dataList,
            colSortDirs: sortIndex,
            columnWidths: {
                display_id: nProps.containerWidth * 0.09,
                auditTypeValue: nProps.containerWidth * 0.12,
                status: nProps.containerWidth * 0.11,
                startTime: nProps.containerWidth * 0.13,
                progress: nProps.containerWidth * 0.17,
                completedTime: nProps.containerWidth * 0.13,
                actions: nProps.containerWidth * 0.25 },

            headerChecked: false };

    }

    _onColumnResizeEndCallback(newColumnWidth, columnKey) {
        this.setState(({ columnWidths }) => ({
            columnWidths: /* istanbul ignore next */Object.assign({},
            columnWidths, {
                [columnKey]: newColumnWidth }) }));


    }


    backendSort(columnKey, sortDir) {
        var data = { "columnKey": columnKey, "sortDir": sortDir };
        this.props.sortHeaderOrder({
            colSortDirs: { [columnKey]: sortDir } });

        this.props.sortHeaderState(columnKey);
        this.props.onSortChange(data);
    }





    startAudit(columnKey, rowIndex) {
        var auditId = [];
        if (this.state.sortedDataList.newData[rowIndex]) {
            auditId.push(this.state.sortedDataList.newData[rowIndex].id);
        }
        /* istanbul ignore next */_reactReduxModal.modal.add( /* istanbul ignore next */_startAudit2.default, {
            title: '',
            size: 'large', // large, medium or small,
            closeOnOutsideClick: true, // (optional) Switch to true if you want to close the modal by clicking outside of it,
            hideCloseButton: true,
            auditId: auditId });

    }

    resolveAudit(columnKey, rowIndex, screenId) {
        var auditId, auditType, displayId, auditMethod;
        if (this.state.sortedDataList.newData[rowIndex]) {
            auditId = this.state.sortedDataList.newData[rowIndex].id;
            auditType = this.state.sortedDataList.newData[rowIndex].auditTypeValue;
            displayId = this.state.sortedDataList.newData[rowIndex].display_id;
            auditMethod = this.state.sortedDataList.newData[rowIndex].auditType;
        }
        /* istanbul ignore next */_reactReduxModal.modal.add( /* istanbul ignore next */_resolveAudit2.default, {
            title: '',
            size: 'large', // large, medium or small,
            closeOnOutsideClick: true, // (optional) Switch to true if you want to close the modal by clicking outside of it,
            hideCloseButton: true,
            auditId: auditId,
            screenId: screenId,
            auditType: auditType,
            displayId: displayId,
            auditMethod: auditMethod });

    }

    handleChange(columnKey, rowIndex, evt) {
        var checkedPPS = JSON.parse(JSON.stringify(this.props.checkedPps));
        var sortedDataList = this.state.sortedDataList;
        var selectedData = sortedDataList._data ?
        sortedDataList._data.newData[sortedDataList._indexMap[rowIndex]] :
        sortedDataList.newData[rowIndex];
        if (evt.target.checked) {
            checkedPPS[selectedData[columnKey]] = selectedData;
        } else
        {
            delete checkedPPS[selectedData[columnKey]];
        }


        this.props.setCheckedPps(checkedPPS);
        this.props.renderDdrop(Object.keys(checkedPPS).length ? true : false);
    }

    manageAuditTask(rowIndex, option) {
        if (option.value === "duplicateTask") {
            var auditType, auditComplete, auditTypeParam, auditPdfaValue;
            if (this.state.sortedDataList.newData[rowIndex]) {
                auditType = this.state.sortedDataList.newData[rowIndex].auditType;
                auditTypeParam = this.state.sortedDataList.newData[rowIndex].auditValue;
                auditComplete = this.state.sortedDataList.newData[rowIndex].auditTypeValue;
                if (this.state.sortedDataList.newData[rowIndex].pdfaValues) {
                    auditPdfaValue = this.state.sortedDataList.newData[rowIndex].pdfaValues;
                }
            }

            /* istanbul ignore next */_reactReduxModal.modal.add( /* istanbul ignore next */_duplicateAudit2.default, {
                title: '',
                size: 'large', // large, medium or small,
                closeOnOutsideClick: true, // (optional) Switch to true if you want to close the modal by clicking outside of it,
                hideCloseButton: true,
                auditType: auditType,
                auditTypeParam: auditTypeParam,
                auditComplete: auditComplete,
                auditPdfaValue: auditPdfaValue });


        } else
        if (option.value === "deleteRecord") {
            var auditId;
            if (this.state.sortedDataList.newData[rowIndex]) {
                auditId = this.state.sortedDataList.newData[rowIndex].id;
            }
            /* istanbul ignore next */_reactReduxModal.modal.add( /* istanbul ignore next */_deleteAudit2.default, {
                title: '',
                size: 'large', // large, medium or small,
                closeOnOutsideClick: true, // (optional) Switch to true if you want to close the modal by clicking outside of it,
                hideCloseButton: true,
                auditId: auditId,
                auditComplete: auditComplete });

        } else if (option.value === 'cancelTask') {
            this.props.cancelAudit(this.state.sortedDataList.newData[rowIndex].id);

        }
    }



    _showAllAudit() {
        var clearFilter = [];
        this.props.refreshData(clearFilter);
    }
    //Render function for Audit Table
    render() {/* istanbul ignore next */var _state =

        this.state,sortedDataList = _state.sortedDataList,colSortDirs = _state.colSortDirs,columnWidths = _state.columnWidths,heightRes;
        var auditCompleted = this.props.auditState.auditCompleted;
        var auditIssue = this.props.auditState.auditIssue;
        var locationAudit = this.props.auditState.locationAudit;
        var skuAudit = this.props.auditState.skuAudit;
        var totalProgress = this.props.auditState.totalProgress;
        var rowsCount = sortedDataList.getSize();
        var headerChecked = false;
        let checkState = this.handleChange.bind(this);
        let checkedStatePps = [];
        if (this.props.checkedPps) {
            checkedStatePps = this.props.checkedPps;
        }
        var headerAlert = /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'alertState', __source: { fileName: _jsxFileName, lineNumber: 268 }, __self: this },

            /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'table-subtab-alert-icon', __source: { fileName: _jsxFileName, lineNumber: 270 }, __self: this }),
            /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'gor-inline', __source: { fileName: _jsxFileName, lineNumber: 271 }, __self: this }, /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_reactIntl.FormattedMessage, /* istanbul ignore next */{ id: 'auditList.alert.lable',
                    description: 'audit list alert lable',
                    defaultMessage: '{auditIssue} {auditIssue,plural, one{Alert} other{Alerts}}',
                    values: { auditIssue: auditIssue ? auditIssue : '0' }, __source: { fileName: _jsxFileName, lineNumber: 271 }, __self: this })));



        var noData = /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ __source: { fileName: _jsxFileName, lineNumber: 278 }, __self: this });
        if (rowsCount === 0 || rowsCount === undefined || rowsCount === null) {
            noData = /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'gor-no-data', __source: { fileName: _jsxFileName, lineNumber: 280 }, __self: this }, /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_reactIntl.FormattedMessage, /* istanbul ignore next */{ id: 'audit.table.noData',
                    description: 'No data message for audit table',
                    defaultMessage: 'No Audit Task Found', __source: { fileName: _jsxFileName, lineNumber: 280 }, __self: this }));
            heightRes = /* istanbul ignore next */_frontEndConstants.GOR_TABLE_HEADER_HEIGHT;
        } else
        {
            heightRes = Math.max( /* istanbul ignore next */_frontEndConstants.GOR_USER_TABLE_HEADER_HEIGHT * rowsCount + /* istanbul ignore next */_frontEndConstants.GOR_AUDIT_TABLE_HEIGHT_CORRECTION, screen.height - /* istanbul ignore next */_frontEndConstants.GOR_AUDIT_TABLE_HEIGHT_CORRECTION);
        }

        var tableRenderer = /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ __source: { fileName: _jsxFileName, lineNumber: 289 }, __self: this });
        tableRenderer = /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'gorTableMainContainer', __source: { fileName: _jsxFileName, lineNumber: 290 }, __self: this },

            /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_fixedDataTable.Table, /* istanbul ignore next */Object.assign({
                    rowHeight: 50,
                    rowsCount: rowsCount,
                    headerHeight: 70,
                    onRowClick: this._handleOnClickDropdown.bind(this),
                    onColumnResizeEndCallback: this._onColumnResizeEndCallback,
                    isColumnResizing: false,
                    width: this.props.containerWidth,
                    height: heightRes },
                this.props, { __source: { fileName: _jsxFileName, lineNumber: 292 }, __self: this }),
                /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_fixedDataTable.Column, /* istanbul ignore next */{
                    columnKey: 'display_id',
                    header:
                    /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ __source: { fileName: _jsxFileName, lineNumber: 305 }, __self: this },
                        /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'gor-header-check', __source: { fileName: _jsxFileName, lineNumber: 306 }, __self: this },
                            /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'input', /* istanbul ignore next */{ type: 'checkbox', checked: headerChecked, __source: { fileName: _jsxFileName, lineNumber: 307 }, __self: this })),

                        /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_commonFunctionsDataTable.SortHeaderCell, /* istanbul ignore next */{ onSortChange: this.backendSort,
                                sortDir: colSortDirs.display_id, __source: { fileName: _jsxFileName, lineNumber: 309 }, __self: this },
                            /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'gorToolHeaderEl', __source: { fileName: _jsxFileName, lineNumber: 311 }, __self: this },
                                /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_reactIntl.FormattedMessage, /* istanbul ignore next */{ id: 'auditTable.stationID.heading',
                                    description: 'Heading for audit ID for auditTable',
                                    defaultMessage: 'AUDIT ID', __source: { fileName: _jsxFileName, lineNumber: 312 }, __self: this }),
                                /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'gorToolHeaderSubText', __source: { fileName: _jsxFileName, lineNumber: 315 }, __self: this },
                                    /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_reactIntl.FormattedMessage, /* istanbul ignore next */{ id: 'auditTable.SubAuditID',
                                        description: 'total Sub auditID for auditTable',
                                        defaultMessage: 'Total:{rowsCount}',
                                        values: { rowsCount: this.props.totalAudits ? this.props.totalAudits : '0' }, __source: { fileName: _jsxFileName, lineNumber: 316 }, __self: this }))))),





                    cell: /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_commonFunctionsDataTable.AuditIssuesTooltipCell, /* istanbul ignore next */{ checkboxColumn: "auditId", data: sortedDataList, callBack: this._handleOnClickDropdown.bind(this), resolved: 'resolvedTask', data: sortedDataList, checkState: checkState,
                        checked: checkedStatePps, unresolved: 'unresolvedTask', __source: { fileName: _jsxFileName, lineNumber: 325 }, __self: this }),
                    fixed: true,
                    width: columnWidths.display_id,
                    isResizable: true, __source: { fileName: _jsxFileName, lineNumber: 302 }, __self: this }),


                /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_fixedDataTable.Column, /* istanbul ignore next */{


                    columnKey: 'auditTypeValue',
                    header:
                    /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'gor-table-header', __source: { fileName: _jsxFileName, lineNumber: 337 }, __self: this },
                        /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'gorToolHeaderEl', __source: { fileName: _jsxFileName, lineNumber: 338 }, __self: this },
                            /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_reactIntl.FormattedMessage, /* istanbul ignore next */{ id: 'audit.table.type', description: 'audit type for audit table',
                                defaultMessage: 'AUDIT TYPE', __source: { fileName: _jsxFileName, lineNumber: 339 }, __self: this }),
                            /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'gorToolHeaderSubText', __source: { fileName: _jsxFileName, lineNumber: 341 }, __self: this },
                                /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_reactIntl.FormattedMessage, /* istanbul ignore next */{ id: 'audit.auditType', description: 'audit type for audit table',
                                    defaultMessage: 'SKU ({sku}) . Location ({location})',
                                    values: {
                                        sku: skuAudit ? skuAudit : '0',
                                        location: locationAudit ? locationAudit : '0' }, __source: { fileName: _jsxFileName, lineNumber: 342 }, __self: this })))),





                    cell: /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_commonFunctionsDataTable.ToolTipCell, /* istanbul ignore next */{ data: sortedDataList, callBack: this._handleOnClickDropdown.bind(this),
                        tooltipData: 'pdfaValues', __source: { fileName: _jsxFileName, lineNumber: 352 }, __self: this }),
                    fixed: true,
                    width: columnWidths.auditTypeValue,
                    isResizable: true, __source: { fileName: _jsxFileName, lineNumber: 332 }, __self: this }),

                /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_fixedDataTable.Column, /* istanbul ignore next */{
                    columnKey: 'status',
                    header:
                    /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_commonFunctionsDataTable.SortHeaderCell, /* istanbul ignore next */{ onSortChange: this.backendSort,
                            sortDir: colSortDirs.status, __source: { fileName: _jsxFileName, lineNumber: 361 }, __self: this },
                        /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'gorToolHeaderEl', __source: { fileName: _jsxFileName, lineNumber: 363 }, __self: this },

                            /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_reactIntl.FormattedMessage, /* istanbul ignore next */{ id: 'audit.table.STATUS', description: 'STATUS for audit',
                                defaultMessage: 'STATUS', __source: { fileName: _jsxFileName, lineNumber: 365 }, __self: this }),
                            auditIssue ? headerAlert :
                            /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'gor-subStatus-online', __source: { fileName: _jsxFileName, lineNumber: 368 }, __self: this },
                                /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ __source: { fileName: _jsxFileName, lineNumber: 369 }, __self: this },
                                    /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_reactIntl.FormattedMessage, /* istanbul ignore next */{ id: 'auditTable.status',
                                        description: 'status completed audit',
                                        defaultMessage: '{auditCompleted} Completed',
                                        values: { auditCompleted: auditCompleted ? auditCompleted : '0' }, __source: { fileName: _jsxFileName, lineNumber: 370 }, __self: this }))))),





                    cell: /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_commonFunctionsDataTable.AuditStatusCell, /* istanbul ignore next */{ data: sortedDataList, statusKey: 'statusClass', descriptionKey: 'cancelling', __source: { fileName: _jsxFileName, lineNumber: 379 }, __self: this }),
                    fixed: true,
                    width: columnWidths.status,
                    isResizable: true, __source: { fileName: _jsxFileName, lineNumber: 358 }, __self: this }),


                /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_fixedDataTable.Column, /* istanbul ignore next */{
                    columnKey: 'startTime',
                    header:
                    /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_commonFunctionsDataTable.SortHeaderCell, /* istanbul ignore next */{ onSortChange: this.backendSort,
                            sortDir: colSortDirs.startTime, __source: { fileName: _jsxFileName, lineNumber: 388 }, __self: this },
                        /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'gorToolHeaderEl', __source: { fileName: _jsxFileName, lineNumber: 390 }, __self: this },
                            /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_reactIntl.FormattedMessage, /* istanbul ignore next */{ id: 'audit.table.startTime', description: 'startTime for audit',
                                defaultMessage: 'START TIME', __source: { fileName: _jsxFileName, lineNumber: 391 }, __self: this }),
                            /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'gorToolHeaderSubText', __source: { fileName: _jsxFileName, lineNumber: 393 }, __self: this }))),





                    cell: /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_commonFunctionsDataTable.TextCell, /* istanbul ignore next */{ style: { textTransform: 'capitalize' }, data: sortedDataList, __source: { fileName: _jsxFileName, lineNumber: 399 }, __self: this }),
                    fixed: true,
                    width: columnWidths.startTime,
                    isResizable: true, __source: { fileName: _jsxFileName, lineNumber: 385 }, __self: this }),

                /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_fixedDataTable.Column, /* istanbul ignore next */{
                    columnKey: 'progress',
                    header:
                    /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'gor-table-header', __source: { fileName: _jsxFileName, lineNumber: 407 }, __self: this },
                        /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'gorToolHeaderEl', __source: { fileName: _jsxFileName, lineNumber: 408 }, __self: this },
                            /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_reactIntl.FormattedMessage, /* istanbul ignore next */{ id: 'audit.table.progress', description: 'progress for audit task',
                                defaultMessage: 'PROGRESS(%)', __source: { fileName: _jsxFileName, lineNumber: 409 }, __self: this }),
                            /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'gorToolHeaderSubText', __source: { fileName: _jsxFileName, lineNumber: 411 }, __self: this },
                                /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_reactIntl.FormattedMessage, /* istanbul ignore next */{ id: 'audit.Totalprogress',
                                    description: 'total progress for audit table',
                                    defaultMessage: '{totalProgress}% Completed',
                                    values: { totalProgress: totalProgress.toFixed(1) ? totalProgress.toFixed(1) : '0' }, __source: { fileName: _jsxFileName, lineNumber: 412 }, __self: this })))),




                    cell: /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_commonFunctionsDataTable.ProgressCell, /* istanbul ignore next */{ data: sortedDataList, resolved: 'resolvedTask',
                            unresolved: 'unresolvedTask', __source: { fileName: _jsxFileName, lineNumber: 420 }, __self: this }, /* istanbul ignore next */' '),
                    fixed: true,
                    width: columnWidths.progress,
                    isResizable: true, __source: { fileName: _jsxFileName, lineNumber: 404 }, __self: this }),


                /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_fixedDataTable.Column, /* istanbul ignore next */{
                    columnKey: 'completedTime',
                    header:
                    /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_commonFunctionsDataTable.SortHeaderCell, /* istanbul ignore next */{ onSortChange: this.backendSort,
                            sortDir: colSortDirs.completedTime, __source: { fileName: _jsxFileName, lineNumber: 430 }, __self: this },
                        /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'gorToolHeaderEl', __source: { fileName: _jsxFileName, lineNumber: 432 }, __self: this },
                            /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_reactIntl.FormattedMessage, /* istanbul ignore next */{ id: 'audit.table.timeCompleted', description: 'timeCompleted for audit',
                                defaultMessage: 'TIME COMPLETED', __source: { fileName: _jsxFileName, lineNumber: 433 }, __self: this }),
                            /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'gorToolHeaderSubText', __source: { fileName: _jsxFileName, lineNumber: 435 }, __self: this },
                                this.props.timeZoneString))),




                    cell: /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_commonFunctionsDataTable.TextCell, /* istanbul ignore next */{ style: { textTransform: 'capitalize' }, data: sortedDataList, __source: { fileName: _jsxFileName, lineNumber: 441 }, __self: this }),
                    fixed: true,
                    width: columnWidths.completedTime,
                    isResizable: true, __source: { fileName: _jsxFileName, lineNumber: 427 }, __self: this }),


                /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_fixedDataTable.Column, /* istanbul ignore next */{
                    columnKey: 'actions',
                    header:
                    /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'gor-table-header', __source: { fileName: _jsxFileName, lineNumber: 450 }, __self: this },
                        /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'gorToolHeaderEl', __source: { fileName: _jsxFileName, lineNumber: 451 }, __self: this },
                            /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_reactIntl.FormattedMessage, /* istanbul ignore next */{ id: 'audit.table.action', description: 'action Column',
                                defaultMessage: 'ACTIONS', __source: { fileName: _jsxFileName, lineNumber: 452 }, __self: this }),
                            /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'gorToolHeaderSubText', __source: { fileName: _jsxFileName, lineNumber: 454 }, __self: this }))),



                    cell: /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_commonFunctionsDataTable.ActionCellAudit, /* istanbul ignore next */{ data: sortedDataList, handleAudit: this.startAudit.bind(this),
                        manageAuditTask: this.manageAuditTask.bind(this), showBox: 'startAudit',

                        placeholderText: this.context.intl.formatMessage(messages.auditPlaceholder),
                        resolveflag: 'resolveAudit', resolveAudit: this.resolveAudit.bind(this),
                        checkIssues: 'viewIssues', __source: { fileName: _jsxFileName, lineNumber: 458 }, __self: this }),

                    width: columnWidths.actions, __source: { fileName: _jsxFileName, lineNumber: 447 }, __self: this })),




            /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ __source: { fileName: _jsxFileName, lineNumber: 470 }, __self: this }, /* istanbul ignore next */' ', noData, /* istanbul ignore next */' '));



        return (
            /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ __source: { fileName: _jsxFileName, lineNumber: 475 }, __self: this }, /* istanbul ignore next */' ', tableRenderer, /* istanbul ignore next */' '));

    }}



AuditTable.contextTypes = {
    intl: /* istanbul ignore next */_react2.default.PropTypes.object.isRequired };


AuditTable.PropTypes = {
    items: /* istanbul ignore next */_react2.default.PropTypes.array,
    sortHeaderOrder: /* istanbul ignore next */_react2.default.PropTypes.func,
    sortHeaderState: /* istanbul ignore next */_react2.default.PropTypes.func,
    refreshData: /* istanbul ignore next */_react2.default.PropTypes.func,
    setFilter: /* istanbul ignore next */_react2.default.PropTypes.func,
    auditState: /* istanbul ignore next */_react2.default.PropTypes.object,
    showFilter: /* istanbul ignore next */_react2.default.PropTypes.bool,
    isFilterApplied: /* istanbul ignore next */_react2.default.PropTypes.bool,
    responseFlag: /* istanbul ignore next */_react2.default.PropTypes.bool,
    containerWidth: /* istanbul ignore next */_react2.default.PropTypes.number,
    totalAudits: /* istanbul ignore next */_react2.default.PropTypes.number }; /* istanbul ignore next */exports.default =



/* istanbul ignore next */(0, _reactDimensions2.default)()(AuditTable);