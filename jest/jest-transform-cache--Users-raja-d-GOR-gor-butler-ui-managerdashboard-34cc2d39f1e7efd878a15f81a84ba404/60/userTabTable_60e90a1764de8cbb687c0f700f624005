/* istanbul ignore next */'use strict';Object.defineProperty(exports, "__esModule", { value: true });var _jsxFileName = '/Users/raja.d/GOR/gor.butler.ui.managerdashboard/src/containers/userTab/userTabTable.js';var /* istanbul ignore next */_react = require('react'); /* istanbul ignore next */var _react2 = _interopRequireDefault(_react);
var /* istanbul ignore next */_reactIntl = require('react-intl');
var /* istanbul ignore next */_fixedDataTable = require('fixed-data-table');
var /* istanbul ignore next */_reactDimensions = require('react-dimensions'); /* istanbul ignore next */var _reactDimensions2 = _interopRequireDefault(_reactDimensions);
var /* istanbul ignore next */_commonFunctionsDataTable = require('../../components/commonFunctionsDataTable');











var /* istanbul ignore next */_reactReduxModal = require('react-redux-modal');
var /* istanbul ignore next */_editUser = require('./editUser'); /* istanbul ignore next */var _editUser2 = _interopRequireDefault(_editUser);
var /* istanbul ignore next */_deleteUser = require('./deleteUser'); /* istanbul ignore next */var _deleteUser2 = _interopRequireDefault(_deleteUser);
var /* istanbul ignore next */_frontEndConstants = require('../../constants/frontEndConstants'); /* istanbul ignore next */function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}
class UserDataTable extends /* istanbul ignore next */_react2.default.Component {
    constructor(props) {
        super(props);
        this._dataList = new /* istanbul ignore next */_commonFunctionsDataTable.tableRenderer(this.props.items.length);
        this._defaultSortIndexes = [];
        this._dataList.newData = this.props.items;
        var size = this._dataList.getSize();
        for (var index = 0; index < size; index++) {
            this._defaultSortIndexes.push(index);
        }
        this.state = {
            colSortDirs: {},
            sortedDataList: this._dataList },

        this._onSortChange = this._onSortChange.bind(this);
        this._onFilterChange = this._onFilterChange.bind(this);
        this._onColumnResizeEndCallback = this._onColumnResizeEndCallback.bind(this);
    }

    _onColumnResizeEndCallback(newColumnWidth, columnKey) {
        this.setState(({ columnWidths }) => ({
            columnWidths: /* istanbul ignore next */Object.assign({},
            columnWidths, {
                [columnKey]: newColumnWidth }) }));


    }

    componentWillReceiveProps(nextProps) {
        this._dataList = new /* istanbul ignore next */_commonFunctionsDataTable.tableRenderer(nextProps.items.length);
        this._defaultSortIndexes = [];
        this._dataList.newData = nextProps.items;
        var size = this._dataList.getSize();
        for (var index = 0; index < size; index++) {
            this._defaultSortIndexes.push(index);
        }
        this.state = {
            colSortDirs: {},
            sortedDataList: this._dataList },

        this._onSortChange = this._onSortChange.bind(this);
        this._onFilterChange = this._onFilterChange.bind(this);
        this._onColumnResizeEndCallback = this._onColumnResizeEndCallback.bind(this);
        this._onFilterChange(nextProps.getUserFilter);
    }

    _onColumnResizeEndCallback(newColumnWidth, columnKey) {
        this.setState(({ columnWidths }) => ({
            columnWidths: /* istanbul ignore next */Object.assign({},
            columnWidths, {
                [columnKey]: newColumnWidth }) }));


    }


    _onFilterChange(e) {
        var filterField = ["role", "id", "status", "workMode", "location", "logInTime"],newData;

        if (e.target && !e.target.value) {
            this.setState({
                sortedDataList: this._dataList });

        }
        if (e.target && (e.target.value || e.target.value === "")) {
            var captureValue = e.target.value;
            newData = new /* istanbul ignore next */_commonFunctionsDataTable.DataListWrapper( /* istanbul ignore next */(0, _commonFunctionsDataTable.filterIndex)(e, this.state.sortedDataList, filterField), this._dataList);

            this.setState({
                sortedDataList: newData },
            function () {
                this.props.setUserFilter(captureValue);
                if (this.props.items.length) {
                    this._onSortChange(this.props.currentSortState, this.props.currentHeaderOrder);
                }
            });
        } else

        {
            newData = new /* istanbul ignore next */_commonFunctionsDataTable.DataListWrapper( /* istanbul ignore next */(0, _commonFunctionsDataTable.filterIndex)(e, this.state.sortedDataList, filterField), this._dataList);
            this.setState({
                sortedDataList: newData },
            function () {
                if (this.props.items.length) {
                    this._onSortChange(this.props.currentSortState, this.props.currentHeaderOrder);
                }
            });
        }

    }


    _onSortChange(columnKey, sortDir) {
        var sortIndexes = this._defaultSortIndexes.slice();
        if (this.state.sortedDataList._indexMap) {
            sortIndexes = this.state.sortedDataList._indexMap.slice();
        }
        this.setState({
            sortedDataList: new /* istanbul ignore next */_commonFunctionsDataTable.DataListWrapper( /* istanbul ignore next */(0, _commonFunctionsDataTable.sortData)(columnKey, sortDir, sortIndexes, this._dataList), this._dataList),
            colSortDirs: {
                [columnKey]: sortDir } });


        this.props.sortHeaderOrder(sortDir);
        this.props.sortHeaderState(columnKey);
    }


    handleEdit(columnKey, rowIndex) {
        let uid, uname, fname, lname, roleName, sortedIndex;
        if (this.state.sortedDataList.newData === undefined) {
            sortedIndex = this.state.sortedDataList._indexMap[rowIndex];
            uid = this.state.sortedDataList._data.newData[sortedIndex].uid;
            uname = this.state.sortedDataList._data.newData[sortedIndex].userName;
            fname = this.state.sortedDataList._data.newData[sortedIndex].first;
            lname = this.state.sortedDataList._data.newData[sortedIndex].last;
            roleName = this.state.sortedDataList._data.newData[sortedIndex].roleId;
        } else

        {
            uid = this.state.sortedDataList.newData[rowIndex].uid;
            uname = this.state.sortedDataList.newData[rowIndex].userName;
            fname = this.state.sortedDataList.newData[rowIndex].first;
            lname = this.state.sortedDataList.newData[rowIndex].last;
            roleName = this.state.sortedDataList.newData[rowIndex].roleId;
        }

        /* istanbul ignore next */_reactReduxModal.modal.add( /* istanbul ignore next */_editUser2.default, {
            title: '',
            size: 'large', // large, medium or small,
            closeOnOutsideClick: true, // (optional) Switch to true if you want to close the modal by clicking outside of it,
            hideCloseButton: true,
            id: uid,
            roleName: roleName,
            userName: uname,
            first: fname,
            last: lname });

    }

    handleDel(columnKey, rowIndex) {
        let id, name, temp, sortedIndex;
        if (this.state.sortedDataList.newData === undefined) {
            sortedIndex = this.state.sortedDataList._indexMap[rowIndex];
            id = this.state.sortedDataList._data.newData[sortedIndex].uid;
            name = this.state.sortedDataList._data.newData[sortedIndex].id;
        } else

        {
            id = this.state.sortedDataList.newData[rowIndex].uid;
            name = this.state.sortedDataList.newData[rowIndex].id;
        }
        /* istanbul ignore next */_reactReduxModal.modal.add( /* istanbul ignore next */_deleteUser2.default, {
            title: '',
            size: 'large', // large, medium or small,
            closeOnOutsideClick: true, // (optional) Switch to true if you want to close the modal by clicking outside of it,
            hideCloseButton: true,
            id: id,
            name: name });


    }

    _setFilter() {
        var newState = !this.props.showFilter;
        this.props.setFilter(newState);
    }


    render() {
        let updateStatusIntl = "";
        let filterHeight = screen.height - 190 - 50; /* istanbul ignore next */var _state =
        this.state; /* istanbul ignore next */let sortedDataList = _state.sortedDataList,colSortDirs = _state.colSortDirs,columnWidths = _state.columnWidths;
        let columnWidth = this.props.containerWidth / this.props.itemNumber;
        let heightRes = 560,rowsCount = sortedDataList.getSize();
        if (this.props.containerHeight !== 0) {
            heightRes = this.props.containerHeight;
        }
        var selEdit = this.handleEdit.bind(this);
        let selDel = this.handleDel.bind(this);
        let containerHeight = this.props.containerHeight;
        let noData = /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ __source: { fileName: _jsxFileName, lineNumber: 202 }, __self: this });
        if (rowsCount === 0 || rowsCount === undefined || rowsCount === null) {
            noData = /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'gor-no-data', __source: { fileName: _jsxFileName, lineNumber: 204 }, __self: this }, /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_reactIntl.FormattedMessage, /* istanbul ignore next */{ id: 'user.table.noData',
                    description: 'No data message for user table',
                    defaultMessage: 'No User Found', __source: { fileName: _jsxFileName, lineNumber: 204 }, __self: this }));
            containerHeight = /* istanbul ignore next */_frontEndConstants.GOR_USER_TABLE_HEADER_HEIGHT;
        }
        return (
            /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ __source: { fileName: _jsxFileName, lineNumber: 210 }, __self: this },
                /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_fixedDataTable.Table, /* istanbul ignore next */Object.assign({
                        rowHeight: 50,
                        rowsCount: sortedDataList.getSize(),
                        headerHeight: 50,
                        onColumnResizeEndCallback: this._onColumnResizeEndCallback,
                        isColumnResizing: false,
                        width: this.props.containerWidth,
                        height: containerHeight },
                    this.props, { __source: { fileName: _jsxFileName, lineNumber: 211 }, __self: this }),
                    /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_fixedDataTable.Column, /* istanbul ignore next */{
                        columnKey: 'id',
                        header:
                        /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_commonFunctionsDataTable.SortHeaderCell, /* istanbul ignore next */{ onSortChange: this._onSortChange,
                                sortDir: colSortDirs.id, __source: { fileName: _jsxFileName, lineNumber: 223 }, __self: this },
                            /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'gorToolHeaderEl', __source: { fileName: _jsxFileName, lineNumber: 225 }, __self: this },
                                /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_reactIntl.FormattedMessage, /* istanbul ignore next */{ id: 'user.table.usersCount', description: 'Users Column',
                                    defaultMessage: '{rowsCount} USERS',
                                    values: { rowsCount: rowsCount ? rowsCount : '0' }, __source: { fileName: _jsxFileName, lineNumber: 226 }, __self: this }))),



                        cell: /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_commonFunctionsDataTable.TextCell, /* istanbul ignore next */{ data: sortedDataList, __source: { fileName: _jsxFileName, lineNumber: 232 }, __self: this }),
                        width: columnWidth, __source: { fileName: _jsxFileName, lineNumber: 220 }, __self: this }),

                    /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_fixedDataTable.Column, /* istanbul ignore next */{
                        columnKey: 'status',
                        header:
                        /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_commonFunctionsDataTable.SortHeaderCell, /* istanbul ignore next */{ onSortChange: this._onSortChange,
                                sortDir: colSortDirs.status, __source: { fileName: _jsxFileName, lineNumber: 238 }, __self: this },
                            /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'gorToolHeaderEl', __source: { fileName: _jsxFileName, lineNumber: 240 }, __self: this },
                                /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_reactIntl.FormattedMessage, /* istanbul ignore next */{ id: 'user.table.status', description: 'Users Status',
                                    defaultMessage: 'STATUS', __source: { fileName: _jsxFileName, lineNumber: 241 }, __self: this }))),



                        cell: /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_commonFunctionsDataTable.StatusCell, /* istanbul ignore next */{ data: sortedDataList, statusKey: 'statusClass', __source: { fileName: _jsxFileName, lineNumber: 246 }, __self: this }),
                        width: columnWidth, __source: { fileName: _jsxFileName, lineNumber: 235 }, __self: this }),

                    /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_fixedDataTable.Column, /* istanbul ignore next */{
                        columnKey: 'role',
                        header:
                        /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_commonFunctionsDataTable.SortHeaderCell, /* istanbul ignore next */{ onSortChange: this._onSortChange,
                                sortDir: colSortDirs.role, __source: { fileName: _jsxFileName, lineNumber: 252 }, __self: this },
                            /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'gorToolHeaderEl', __source: { fileName: _jsxFileName, lineNumber: 254 }, __self: this },
                                /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_reactIntl.FormattedMessage, /* istanbul ignore next */{ id: 'user.table.role', description: 'User Role',
                                    defaultMessage: 'ROLE', __source: { fileName: _jsxFileName, lineNumber: 255 }, __self: this }))),



                        cell: /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_commonFunctionsDataTable.TextCell, /* istanbul ignore next */{ data: sortedDataList, __source: { fileName: _jsxFileName, lineNumber: 260 }, __self: this }),
                        width: columnWidth, __source: { fileName: _jsxFileName, lineNumber: 249 }, __self: this }),

                    /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_fixedDataTable.Column, /* istanbul ignore next */{
                        columnKey: 'workMode',
                        header:
                        /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_commonFunctionsDataTable.SortHeaderCell, /* istanbul ignore next */{ onSortChange: this._onSortChange,
                                sortDir: colSortDirs.workMode, __source: { fileName: _jsxFileName, lineNumber: 266 }, __self: this },
                            /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'gorToolHeaderEl', __source: { fileName: _jsxFileName, lineNumber: 268 }, __self: this },
                                /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_reactIntl.FormattedMessage, /* istanbul ignore next */{ id: 'user.table.workMode', description: 'User Workmode',
                                    defaultMessage: 'WORKMODE', __source: { fileName: _jsxFileName, lineNumber: 269 }, __self: this }))),



                        cell: /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_commonFunctionsDataTable.TextCell, /* istanbul ignore next */{ data: sortedDataList, __source: { fileName: _jsxFileName, lineNumber: 274 }, __self: this }),
                        width: columnWidth, __source: { fileName: _jsxFileName, lineNumber: 263 }, __self: this }),

                    /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_fixedDataTable.Column, /* istanbul ignore next */{
                        columnKey: 'location',
                        header:
                        /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_commonFunctionsDataTable.SortHeaderCell, /* istanbul ignore next */{ onSortChange: this._onSortChange,
                                sortDir: colSortDirs.location, __source: { fileName: _jsxFileName, lineNumber: 280 }, __self: this },
                            /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'gorToolHeaderEl', __source: { fileName: _jsxFileName, lineNumber: 282 }, __self: this },
                                /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_reactIntl.FormattedMessage, /* istanbul ignore next */{ id: 'user.table.location', description: 'User location',
                                    defaultMessage: 'LOCATION', __source: { fileName: _jsxFileName, lineNumber: 283 }, __self: this }))),



                        cell: /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_commonFunctionsDataTable.TextCell, /* istanbul ignore next */{ data: sortedDataList, __source: { fileName: _jsxFileName, lineNumber: 288 }, __self: this }),
                        width: columnWidth, __source: { fileName: _jsxFileName, lineNumber: 277 }, __self: this }),

                    /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_fixedDataTable.Column, /* istanbul ignore next */{
                        columnKey: 'logInTime',
                        header:
                        /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_commonFunctionsDataTable.SortHeaderCell, /* istanbul ignore next */{ onSortChange: this._onSortChange,
                                sortDir: colSortDirs.logInTime, __source: { fileName: _jsxFileName, lineNumber: 294 }, __self: this },
                            /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'gorToolHeaderEl', __source: { fileName: _jsxFileName, lineNumber: 296 }, __self: this },
                                /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_reactIntl.FormattedMessage, /* istanbul ignore next */{ id: 'user.table.logInTime', description: 'User log in time',
                                    defaultMessage: 'LOG IN TIME', __source: { fileName: _jsxFileName, lineNumber: 297 }, __self: this }))),



                        cell: /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_commonFunctionsDataTable.TextCell, /* istanbul ignore next */{ data: sortedDataList, __source: { fileName: _jsxFileName, lineNumber: 302 }, __self: this }),
                        width: columnWidth, __source: { fileName: _jsxFileName, lineNumber: 291 }, __self: this }),

                    /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_fixedDataTable.Column, /* istanbul ignore next */{
                        columnKey: 'actions',
                        header:
                        /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'gor-table-header', __source: { fileName: _jsxFileName, lineNumber: 308 }, __self: this },
                            /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'gorToolHeaderEl', __source: { fileName: _jsxFileName, lineNumber: 309 }, __self: this },
                                /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_reactIntl.FormattedMessage, /* istanbul ignore next */{ id: 'user.table.action', description: 'action Column',
                                    defaultMessage: 'ACTIONS', __source: { fileName: _jsxFileName, lineNumber: 310 }, __self: this }))),



                        cell: /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_commonFunctionsDataTable.ActionCell, /* istanbul ignore next */{ data: sortedDataList, selEdit: selEdit, selDel: selDel,
                            mid: this.props.mid, __source: { fileName: _jsxFileName, lineNumber: 315 }, __self: this }),
                        width: columnWidth, __source: { fileName: _jsxFileName, lineNumber: 305 }, __self: this })),


                /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ __source: { fileName: _jsxFileName, lineNumber: 320 }, __self: this }, /* istanbul ignore next */' ', noData, /* istanbul ignore next */' ')));


    }}


UserDataTable.PropTypes = {
    items: /* istanbul ignore next */_react2.default.PropTypes.array,
    containerWidth: /* istanbul ignore next */_react2.default.PropTypes.number,
    itemNumber: /* istanbul ignore next */_react2.default.PropTypes.number,
    currentHeaderOrder: /* istanbul ignore next */_react2.default.PropTypes.object,
    sortHeaderState: /* istanbul ignore next */_react2.default.PropTypes.func,
    lastUpdatedText: /* istanbul ignore next */_react2.default.PropTypes.string,
    showFilter: /* istanbul ignore next */_react2.default.PropTypes.bool,
    lastUpdated: /* istanbul ignore next */_react2.default.PropTypes.string,
    setFilter: /* istanbul ignore next */_react2.default.PropTypes.func,
    containerHeight: /* istanbul ignore next */_react2.default.PropTypes.number,
    currentSortState: /* istanbul ignore next */_react2.default.PropTypes.string,
    responseFlag: /* istanbul ignore next */_react2.default.PropTypes.bool,
    userFilterStatus: /* istanbul ignore next */_react2.default.PropTypes.bool }; /* istanbul ignore next */exports.default =



/* istanbul ignore next */(0, _reactDimensions2.default)()(UserDataTable);