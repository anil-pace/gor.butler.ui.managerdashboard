/* istanbul ignore next */'use strict';Object.defineProperty(exports, "__esModule", { value: true });var _jsxFileName = '/Users/raja.d/GOR/gor.butler.ui.managerdashboard/src/containers/systemTabs/tags.js'; /**
                                                                                                                                                                                                               * Created by gaurav.m on 6/21/17.
                                                                                                                                                                                                               */
var /* istanbul ignore next */_react = require('react'); /* istanbul ignore next */var _react2 = _interopRequireDefault(_react);
var /* istanbul ignore next */_reactRedux = require('react-redux');
var /* istanbul ignore next */_ppsConfigurationActions = require('./../../actions/ppsConfigurationActions');
var /* istanbul ignore next */_configConstants = require('./../../constants/configConstants');
var /* istanbul ignore next */_frontEndConstants = require('./../../constants/frontEndConstants');
var /* istanbul ignore next */_reactIntl = require('react-intl');
var /* istanbul ignore next */_ajaxActions = require('./../../actions/ajaxActions'); /* istanbul ignore next */function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}
const messages = /* istanbul ignore next */(0, _reactIntl.defineMessages)({
    tagSearchPlaceholder: {
        id: "pps.configuration.tag.search.placeholder",
        defaultMessage: "Enter a tag..." } });


class Tags extends /* istanbul ignore next */_react2.default.Component {
    constructor(props) {
        super(props);
        this.state = {
            tags: [],
            filteredTags: [],
            filter: "",
            canAddTag: false };


    }


    componentWillReceiveProps(nextProps) {
        let self = this;
        if (nextProps.tags !== this.state.tags) {
            this.setState({ tags: nextProps.tags, filteredTags: nextProps.tags }, function () {
                self.searchTags({ target: { value: '' } });
            });

        }
    }

    componentDidMount() {
        /**
                          * Fetch PPS List
                          */
        let data = {
            'url': /* istanbul ignore next */_configConstants.FETCH_TAGS_URL,
            'method': /* istanbul ignore next */_frontEndConstants.GET,
            'cause': /* istanbul ignore next */_frontEndConstants.FETCH_TAGS,
            'contentType': /* istanbul ignore next */_frontEndConstants.APP_JSON,
            'accept': /* istanbul ignore next */_frontEndConstants.APP_JSON,
            'token': this.props.auth_token };

        this.props.setPPSConfigurationSpinner(true);
        this.props.makeAjaxCall(data);
    }

    searchTags(e) {
        let searchedText = function (e) {
            try {
                return e.target.value || "";
            } catch (exception) {
                return "";
            }
        }(e);
        let exactMatch = false;
        let filteredTags = this.state.tags.filter(function (tag) {
            let returnValue = false;
            if (!searchedText) {
                exactMatch = true;
                returnValue = true;
            }

            !returnValue && searchedText.split(" ").forEach(function (word) {
                if (word && tag.toLowerCase().indexOf(word.toLowerCase()) > -1) {
                    returnValue = true;
                }
            });

            if (searchedText && searchedText.toLowerCase() === tag.toLowerCase()) {
                exactMatch = true;
            }
            return returnValue;
        });
        this.setState({ canAddTag: !exactMatch, filteredTags: filteredTags, filter: searchedText });
    }

    handleTagSelect(selectedTag, e) {
        let self = this;
        if (!e.target) {
            return false;
        }

        let tags = this.state.filteredTags;
        tags.forEach(function (tag) {
            if (tag === selectedTag) {
                self.props.addTagToBin({ tag: tag, bin: self.props.selectedPPSBin['tags'] });
            }
        });

        this.setState({ filteredTags: tags });

    }

    addTag(e) {
        /**
                * The API will update the list
                * of tags.
                */
        let form_data = { "pps_bin_tags": [this.state.filter] };
        let data = {
            'url': /* istanbul ignore next */_configConstants.SAVE_TAGS_URL,
            'method': /* istanbul ignore next */_frontEndConstants.PUT,
            'cause': /* istanbul ignore next */_frontEndConstants.ADD_TAG_TO_LIST,
            'formdata': form_data,
            'contentType': /* istanbul ignore next */_frontEndConstants.APP_JSON,
            'accept': /* istanbul ignore next */_frontEndConstants.APP_JSON,
            'token': this.props.auth_token };

        this.props.setPPSConfigurationSpinner(true);
        this.props.makeAjaxCall(data);

    }

    clearSearch(e) {
        this.searchTags(e);
    }

    highlightSearchedText(tag) {
        let innerHTML = tag;
        this.state.filter && this.state.filter.split(" ").forEach(function (word) {
            let index_of_word = tag.toLowerCase().indexOf(word.toLowerCase());
            if (word && index_of_word >= 0) {
                let re = new RegExp(word, "gi");
                innerHTML = tag.replace(re, "<span class='highlight'>" + tag.substr(index_of_word, word.length) + "</span>");
            }
        });

        return innerHTML;
    }


    render() {
        let self = this;
        if (self.props.tags.length === 0) {
            return null;
        }
        return (/* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'pps-tags-container', __source: { fileName: _jsxFileName, lineNumber: 146 }, __self: this },

                /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'pps-tags-header', __source: { fileName: _jsxFileName, lineNumber: 148 }, __self: this }, /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'span', /* istanbul ignore next */{ className: 'gor-tag-icon', __source: { fileName: _jsxFileName, lineNumber: 148 }, __self: this }), /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_reactIntl.FormattedMessage, /* istanbul ignore next */{
                        id: 'pps.configuration.tags.label',
                        description: 'Tags',
                        defaultMessage: 'Tags', __source: { fileName: _jsxFileName, lineNumber: 148 }, __self: this })),
                /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'pps-searchbox-container', __source: { fileName: _jsxFileName, lineNumber: 152 }, __self: this },
                    /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'input', /* istanbul ignore next */{ placeholder: self.context.intl.formatMessage(messages.tagSearchPlaceholder),
                        className: 'pps-searchbox-tags', type: 'text', onChange: this.searchTags.bind(this),
                        value: this.state.filter, __source: { fileName: _jsxFileName, lineNumber: 153 }, __self: this }),
                    this.state.filter ?
                    /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'span', /* istanbul ignore next */{ className: 'searchbox-cross-icon', onClick: this.clearSearch.bind(this), __source: { fileName: _jsxFileName, lineNumber: 157 }, __self: this }) : null),


                /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'pps-searchresult-label', __source: { fileName: _jsxFileName, lineNumber: 160 }, __self: this }, this.state.filter ?
                    /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_reactIntl.FormattedMessage, /* istanbul ignore next */{ id: 'pps.configuration.tags.searchResults.text',
                        description: 'Search Results',
                        defaultMessage: 'Search Results', __source: { fileName: _jsxFileName, lineNumber: 161 }, __self: this }) :
                    /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_reactIntl.FormattedMessage, /* istanbul ignore next */{ id: 'pps.configuration.tags.all.text',
                        description: 'All Tags',
                        defaultMessage: 'All Tags', __source: { fileName: _jsxFileName, lineNumber: 164 }, __self: this })),
                /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'pps-tag-list', __source: { fileName: _jsxFileName, lineNumber: 167 }, __self: this },
                    this.state.filteredTags.map(function (tag) {
                        return (/* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'pps-tags-row', key: tag, __source: { fileName: _jsxFileName, lineNumber: 169 }, __self: this },
                                /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'span', /* istanbul ignore next */{ className: 'pps-tag-name',
                                    dangerouslySetInnerHTML: { __html: self.highlightSearchedText.call(self, tag) }, __source: { fileName: _jsxFileName, lineNumber: 170 }, __self: this }),
                                /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'span', /* istanbul ignore next */{ className: 'pps-tag-selection', __source: { fileName: _jsxFileName, lineNumber: 172 }, __self: this },
                                    self.props.selectedPPSBin && self.props.selectedPPSBin['tags'] &&
                                    /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'input', /* istanbul ignore next */{ checked: self.props.selectedPPSBin['tags'].bin_tags.map(function (tag) {
                                            return tag;
                                        }).indexOf(tag) > -1, onChange: self.handleTagSelect.bind(self, tag), type: 'checkbox', __source: { fileName: _jsxFileName, lineNumber: 174 }, __self: this }))));


                    })),

                this.state.canAddTag ? /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'pps-add-tag-container', __source: { fileName: _jsxFileName, lineNumber: 181 }, __self: this },
                    /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'span', /* istanbul ignore next */{ className: 'pps-add-tag-name', __source: { fileName: _jsxFileName, lineNumber: 182 }, __self: this }, /* istanbul ignore next */'"', this.state.filter, /* istanbul ignore next */'"'),
                    /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'span', /* istanbul ignore next */{ className: 'pps-add-tag-button', onClick: this.addTag.bind(this), __source: { fileName: _jsxFileName, lineNumber: 183 }, __self: this },
                        /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_reactIntl.FormattedMessage, /* istanbul ignore next */{ id: 'pps.configuration.tags.add.text',
                            description: 'Add',
                            defaultMessage: 'Add', __source: { fileName: _jsxFileName, lineNumber: 184 }, __self: this }))) :

                null));

    }}


Tags.contextTypes = {
    intl: /* istanbul ignore next */_react2.default.PropTypes.object.isRequired };


function mapStateToProps(state, ownProps) {
    return {
        selectedProfile: state.ppsConfiguration.selectedProfile || { id: null },
        selectedPPS: state.ppsConfiguration.selectedPPS || { id: null },
        selectedPPSBin: state.ppsConfiguration.selectedPPSBin,
        tags: state.ppsConfiguration.tags || [],
        auth_token: state.authLogin.auth_token };

}

var mapDispatchToProps = function mapDispatchToProps(dispatch) {
    return {
        addTagToBin: function /* istanbul ignore next */addTagToBin(data) {
            dispatch( /* istanbul ignore next */(0, _ppsConfigurationActions.addTagToBin)(data));
        },
        makeAjaxCall: function /* istanbul ignore next */makeAjaxCall(data) {
            dispatch( /* istanbul ignore next */(0, _ajaxActions.makeAjaxCall)(data));
        },
        setPPSConfigurationSpinner: function /* istanbul ignore next */setPPSConfigurationSpinner(data) {
            dispatch( /* istanbul ignore next */(0, _ppsConfigurationActions.setPPSConfigurationSpinner)(data));
        } };

}; /* istanbul ignore next */exports.default =

/* istanbul ignore next */(0, _reactRedux.connect)(mapStateToProps, mapDispatchToProps)(Tags);