/* istanbul ignore next */'use strict';Object.defineProperty(exports, "__esModule", { value: true });var _jsxFileName = '/Users/raja.d/GOR/gor.butler.ui.managerdashboard/src/containers/systemTabs/ppsConfigurationTab.js'; /**
                                                                                                                                                                                                                              * Container for Overview tab
                                                                                                                                                                                                                              * This will be switched based on tab click
                                                                                                                                                                                                                              */
var /* istanbul ignore next */_react = require('react'); /* istanbul ignore next */var _react2 = _interopRequireDefault(_react);
var /* istanbul ignore next */_reactRedux = require('react-redux');
var /* istanbul ignore next */_frontEndConstants = require('../../constants/frontEndConstants');





var /* istanbul ignore next */_socketActions = require('./../../actions/socketActions');
var /* istanbul ignore next */_initData = require('./../../constants/initData.js');
var /* istanbul ignore next */_systemActions = require('./../../actions/systemActions');
var /* istanbul ignore next */_reactRouter = require('react-router');
var /* istanbul ignore next */_tags = require('./tags'); /* istanbul ignore next */var _tags2 = _interopRequireDefault(_tags);
var /* istanbul ignore next */_ppsConfigurationBins = require('./ppsConfigurationBins'); /* istanbul ignore next */var _ppsConfigurationBins2 = _interopRequireDefault(_ppsConfigurationBins);
var /* istanbul ignore next */_ppsConfigurationList = require('./ppsConfigurationList'); /* istanbul ignore next */var _ppsConfigurationList2 = _interopRequireDefault(_ppsConfigurationList);
var /* istanbul ignore next */_ppsConfigurationActions = require('./../../actions/ppsConfigurationActions');
var /* istanbul ignore next */_reactReduxModal = require('react-redux-modal');
var /* istanbul ignore next */_createPPSProfile = require('./createPPSProfile'); /* istanbul ignore next */var _createPPSProfile2 = _interopRequireDefault(_createPPSProfile);
var /* istanbul ignore next */_reactIntl = require('react-intl');
var /* istanbul ignore next */_frontEndConstants2 = require('./../../constants/frontEndConstants');
var /* istanbul ignore next */_configConstants = require('./../../constants/configConstants');
var /* istanbul ignore next */_Spinner = require('./../../components/spinner/Spinner'); /* istanbul ignore next */var _Spinner2 = _interopRequireDefault(_Spinner);
var /* istanbul ignore next */_saveApplyProfile = require('./saveApplyProfile'); /* istanbul ignore next */var _saveApplyProfile2 = _interopRequireDefault(_saveApplyProfile);
var /* istanbul ignore next */_ajaxActions = require('./../../actions/ajaxActions'); /* istanbul ignore next */function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}


class PPSConfiguration extends /* istanbul ignore next */_react2.default.Component {
    constructor(props) {
        super(props);
        this.state = { subscribed: false, currentView: 'tags' };
    }

    componentWillMount() {
        /**
                           * It will update the last refreshed property of
                           * overview details, so that updated subscription
                           * packet can be sent to the server for data
                           * update.
                           */
        this.props.ppsConfigurationTabRefreshed();
    }

    componentWillReceiveProps(nextProps) {
        if (nextProps.socketAuthorized && !this.state.subscribed) {
            this._refreshList();
        }
    }

    handleClickOnNavigation(currentView) {
        this.setState({ currentView: currentView });
    }

    /**
       * The method will update the subscription packet
       * and will fetch the data from the socket.
       * @private
       */
    _refreshList() {
        this.setState({ subscribed: true });
        let updatedWsSubscription = this.props.wsSubscriptionData;
        this.props.initDataSentCall(updatedWsSubscription["default"]);
        this.props.updateSubscriptionPacket(updatedWsSubscription);
    }

    handleClickOnNext() {
        if (this.state.currentView === "tags") {
            this.setState({ currentView: 'bins' });
        } else if (this.state.currentView === 'bins') {
            this.setState({ currentView: 'groups' });
        } else {
            // Do Nothing
        }
    }

    handleClickOnBack() {
        if (this.state.currentView === "groups") {
            this.setState({ currentView: 'bins' });
        } else if (this.state.currentView === 'bins') {
            this.setState({ currentView: 'tags' });
        } else {
            // Do Nothing
        }
    }

    /**
       * The method will send the
       * api call to save the profile
       * @param profileName
       */
    saveNewProfile(profileName) {
        let newProfile = JSON.parse(JSON.stringify(this.props.selectedProfile));
        newProfile.name = profileName;

    }

    createProfile() {
        let self = this;
        /* istanbul ignore next */_reactReduxModal.modal.add( /* istanbul ignore next */_createPPSProfile2.default, {
            title: '',
            size: 'large', // large, medium or small,
            closeOnOutsideClick: false, // (optional) Switch to true if you want to close the modal by clicking outside of it,
            hideCloseButton: true, // (optional) if you don't wanna show the top right close button
            saveNewProfile: self.saveNewProfile.bind(self) });

    }

    /**
       * The method will send the selected PPS
       * along with the updated profile to the server.
       */
    cancelProfileChanges() {
        this.props.cancelProfileChanges({});
    }
    /**
       *
       */
    saveProfile(applyProfile) {
        /**
                                * API to save the existing Profile
                                */
        let form_data = JSON.parse(JSON.stringify(this.props.selectedProfile));
        form_data.requested = applyProfile;
        delete form_data.applied;
        let url = /* istanbul ignore next */_configConstants.SAVE_PROFILE_URL + this.props.selectedPPS.pps_id;
        let data = {
            'url': url,
            'formdata': form_data,
            'method': /* istanbul ignore next */_frontEndConstants2.PUT,
            'cause': /* istanbul ignore next */_frontEndConstants2.SAVE_PPS_PROFILE,
            'contentType': /* istanbul ignore next */_frontEndConstants2.APP_JSON,
            'accept': /* istanbul ignore next */_frontEndConstants2.APP_JSON,
            'token': this.props.auth_token };

        this.props.setPPSConfigurationSpinner(true);
        this.props.makeAjaxCall(data);
    }

    /**
       * The method will open
       * the confirmation modal to
       * save and apply the profile
       * for a given PPS
       */
    saveAndApplyProfileConfirmation() {
        let self = this;
        /* istanbul ignore next */_reactReduxModal.modal.add( /* istanbul ignore next */_saveApplyProfile2.default, {
            title: '',
            size: 'large', // large, medium or small,
            closeOnOutsideClick: false, // (optional) Switch to true if you want to close the modal by clicking outside of it,
            hideCloseButton: true, // (optional) if you don't wanna show the top right close button
            saveAndApplyProfile: self.saveProfile.bind(self) });

    }

    render() {

        let self = this;
        return (
            /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'pps-configuration-container', __source: { fileName: _jsxFileName, lineNumber: 163 }, __self: this },
                /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_Spinner2.default, /* istanbul ignore next */{ isLoading: self.props.ppsConfigurationSpinner, setSpinner: self.props.setPPSConfigurationSpinner, __source: { fileName: _jsxFileName, lineNumber: 164 }, __self: this }),
                /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_ppsConfigurationList2.default, /* istanbul ignore next */{ __source: { fileName: _jsxFileName, lineNumber: 165 }, __self: this }),
                /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'pps-configuration-details-container', __source: { fileName: _jsxFileName, lineNumber: 166 }, __self: this },
                    /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'pps-configuration-navigation-tabs', __source: { fileName: _jsxFileName, lineNumber: 167 }, __self: this },
                        /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: ['navigation-tab', this.state.currentView === 'tags' ? 'active' : ''].join(" "), onClick: this.handleClickOnNavigation.bind(this, 'tags'), __source: { fileName: _jsxFileName, lineNumber: 168 }, __self: this }, /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_reactIntl.FormattedMessage, /* istanbul ignore next */{ id: 'pps.configuration.bins.tags.label',
                                description: 'Assign tags to bin',
                                defaultMessage: 'Assign tags to bin', __source: { fileName: _jsxFileName, lineNumber: 168 }, __self: this })),
                        /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: ['navigation-tab', this.state.currentView === 'bins' ? 'active' : ''].join(" "), onClick: this.handleClickOnNavigation.bind(this, 'bins'), __source: { fileName: _jsxFileName, lineNumber: 171 }, __self: this }, /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_reactIntl.FormattedMessage, /* istanbul ignore next */{ id: 'pps.configuration.bins.activation.label',
                                description: 'Bin activate/deactivate',
                                defaultMessage: 'Bin activate/deactivate', __source: { fileName: _jsxFileName, lineNumber: 171 }, __self: this })),
                        /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: ['navigation-tab', this.state.currentView === 'groups' ? 'active' : ''].join(" "), onClick: this.handleClickOnNavigation.bind(this, 'groups'), __source: { fileName: _jsxFileName, lineNumber: 174 }, __self: this }, /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_reactIntl.FormattedMessage, /* istanbul ignore next */{ id: 'pps.configuration.group.activation.label',
                                description: 'Bin group enable/disable',
                                defaultMessage: 'Bin group enable/disable', __source: { fileName: _jsxFileName, lineNumber: 174 }, __self: this })),
                        /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: ['seat-description'].join(" "), __source: { fileName: _jsxFileName, lineNumber: 177 }, __self: this }, /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_reactIntl.FormattedMessage, /* istanbul ignore next */{ id: 'pps.configuration.bins.frontView.label',
                                description: 'Front View',
                                defaultMessage: 'Front View', __source: { fileName: _jsxFileName, lineNumber: 177 }, __self: this }))),

                    /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_ppsConfigurationBins2.default, /* istanbul ignore next */{ currentView: this.state.currentView, __source: { fileName: _jsxFileName, lineNumber: 181 }, __self: this }), /* istanbul ignore next */' ',
                    this.state.currentView === 'tags' && /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_tags2.default, /* istanbul ignore next */{ __source: { fileName: _jsxFileName, lineNumber: 182 }, __self: this })),



                this.props.selectedPPS && /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'pps-configuration-actions-container', __source: { fileName: _jsxFileName, lineNumber: 186 }, __self: this },
                    /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'button', /* istanbul ignore next */{ onClick: self.cancelProfileChanges.bind(self), className: 'pps-bin-cancel-button', __source: { fileName: _jsxFileName, lineNumber: 187 }, __self: this }, /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_reactIntl.FormattedMessage, /* istanbul ignore next */{ id: 'pps.configuration.buttons.cancel.text',
                            description: 'CANCEL',
                            defaultMessage: 'CANCEL', __source: { fileName: _jsxFileName, lineNumber: 187 }, __self: this })),
                    this.state.currentView !== "groups" && /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'button', /* istanbul ignore next */{ onClick: self.handleClickOnNext.bind(self), className: 'pps-bin-next-button', __source: { fileName: _jsxFileName, lineNumber: 190 }, __self: this }, /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_reactIntl.FormattedMessage, /* istanbul ignore next */{ id: 'pps.configuration.buttons.next.text',
                            description: 'NEXT',
                            defaultMessage: 'NEXT', __source: { fileName: _jsxFileName, lineNumber: 190 }, __self: this })),
                    this.state.currentView === "groups" && /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'button', /* istanbul ignore next */{ disabled: self.props.selectedPPS.pps_profiles.filter(function (profile) {return profile.requested;}).length > 0 || self.props.selectedPPS.pps_status === /* istanbul ignore next */_frontEndConstants2.PPS_STATUS_FCLOSE, onClick: self.saveAndApplyProfileConfirmation.bind(self), className: 'pps-bin-save-apply-button', __source: { fileName: _jsxFileName, lineNumber: 193 }, __self: this }, /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_reactIntl.FormattedMessage, /* istanbul ignore next */{ id: 'pps.configuration.buttons.saveApply.text',
                            description: 'SAVE AND APPLY',
                            defaultMessage: 'SAVE AND APPLY', __source: { fileName: _jsxFileName, lineNumber: 193 }, __self: this })),
                    this.state.currentView !== "tags" && /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'button', /* istanbul ignore next */{ onClick: self.handleClickOnBack.bind(self), className: 'pps-bin-back-button', __source: { fileName: _jsxFileName, lineNumber: 196 }, __self: this }, /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_reactIntl.FormattedMessage, /* istanbul ignore next */{ id: 'pps.configuration.buttons.back.text',
                            description: 'BACK',
                            defaultMessage: 'BACK', __source: { fileName: _jsxFileName, lineNumber: 196 }, __self: this })),
                    this.state.currentView === "groups" && /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'button', /* istanbul ignore next */{ onClick: self.createProfile.bind(self), className: 'pps-bin-save-button', __source: { fileName: _jsxFileName, lineNumber: 199 }, __self: this }, /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_reactIntl.FormattedMessage, /* istanbul ignore next */{ id: 'pps.configuration.buttons.saveNewProfile.text',
                            description: 'SAVE AS NEW PROFILE',
                            defaultMessage: 'SAVE AS NEW PROFILE', __source: { fileName: _jsxFileName, lineNumber: 199 }, __self: this })),
                    this.state.currentView === "groups" && /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'button', /* istanbul ignore next */{ disabled: self.props.selectedProfile.applied, onClick: self.saveProfile.bind(self, false), className: 'pps-bin-save-button', __source: { fileName: _jsxFileName, lineNumber: 202 }, __self: this }, /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_reactIntl.FormattedMessage, /* istanbul ignore next */{ id: 'pps.configuration.buttons.save.text',
                            description: 'SAVE',
                            defaultMessage: 'SAVE', __source: { fileName: _jsxFileName, lineNumber: 202 }, __self: this })))));



    }}



var mapStateToProps = function mapStateToProps(state, ownProps) {

    return {
        csFilter: state.sortHeaderState.csFilter || "",
        csSortHeader: state.sortHeaderState.csHeaderSort || /* istanbul ignore next */_frontEndConstants.INITIAL_HEADER_SORT,
        csSortHeaderState: state.sortHeaderState.csHeaderSortOrder || /* istanbul ignore next */_frontEndConstants.INITIAL_HEADER_ORDER,
        csSpinner: state.spinner.csSpinner || false,
        chargersDetail: state.chargersDetail || [],
        showFilter: state.filterInfo.filterState || false,
        isFilterApplied: state.filterInfo.isFilterApplied || false,
        chargingFilterStatus: state.filterInfo.chargingFilterStatus || false,
        wsSubscriptionData: state.recieveSocketActions.socketDataSubscriptionPacket || /* istanbul ignore next */_initData.wsOverviewData,
        ppsConfigurationTabRefreshed: state.ppsConfiguration.ppsConfigurationTabRefreshed,
        socketAuthorized: state.recieveSocketActions.socketAuthorized,
        selectedProfile: state.ppsConfiguration.selectedProfile || { name: null },
        selectedPPS: state.ppsConfiguration.selectedPPS,
        selectedPPSBin: state.ppsConfiguration.selectedPPSBin,
        ppsConfigurationSpinner: state.ppsConfiguration.ppsConfigurationSpinner,
        auth_token: state.authLogin.auth_token };

};

var mapDispatchToProps = function mapDispatchToProps(dispatch) {
    return {


        updateSubscriptionPacket: function /* istanbul ignore next */updateSubscriptionPacket(data) {
            dispatch( /* istanbul ignore next */(0, _socketActions.updateSubscriptionPacket)(data));
        },
        ppsConfigurationTabRefreshed: function /* istanbul ignore next */ppsConfigurationTabRefreshed(data) {
            dispatch( /* istanbul ignore next */(0, _systemActions.ppsConfigurationTabRefreshed)(data));
        },
        initDataSentCall: function /* istanbul ignore next */initDataSentCall(data) {
            dispatch( /* istanbul ignore next */(0, _socketActions.setWsAction)({ type: /* istanbul ignore next */_frontEndConstants.WS_ONSEND, data: data }));
        },
        cancelProfileChanges: function /* istanbul ignore next */cancelProfileChanges(data) {
            dispatch( /* istanbul ignore next */(0, _ppsConfigurationActions.cancelProfileChanges)(data));
        },
        setPPSConfigurationSpinner: function /* istanbul ignore next */setPPSConfigurationSpinner(data) {
            dispatch( /* istanbul ignore next */(0, _ppsConfigurationActions.setPPSConfigurationSpinner)(data));
        },
        makeAjaxCall: function /* istanbul ignore next */makeAjaxCall(data) {
            dispatch( /* istanbul ignore next */(0, _ajaxActions.makeAjaxCall)(data));
        } };



};

PPSConfiguration.PropTypes = {
    wsSubscriptionData: /* istanbul ignore next */_react2.default.PropTypes.object }; /* istanbul ignore next */exports.default =


/* istanbul ignore next */(0, _reactRedux.connect)(mapStateToProps, mapDispatchToProps)(PPSConfiguration);